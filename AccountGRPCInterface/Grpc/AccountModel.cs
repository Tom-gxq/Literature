// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SP.Service {

  /// <summary>Holder for reflection information generated from AccountModel.proto</summary>
  public static partial class AccountModelReflection {

    #region Descriptor
    /// <summary>File descriptor for AccountModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJBY2NvdW50TW9kZWwucHJvdG8SClNQLlNlcnZpY2UaEUNvbW1vbk1vZGVs",
            "LnByb3RvIjIKDExvZ2luUmVxdWVzdBIQCgh1c2VyTmFtZRgBIAEoCRIQCghw",
            "YXNzV29yZBgCIAEoCSInChVBY2NvdW50UmVzdWx0UmVzcG9uc2USDgoGc3Rh",
            "dHVzGAEgASgFIq0BCg9BY2NvdW50UmVzcG9uc2USDgoGc3RhdHVzGAEgASgF",
            "EhEKCWFjY291bnRJZBgCIAEoCRITCgttb2JpbGVQaG9uZRgDIAEoCRINCgVl",
            "bWFpbBgEIAEoCRIQCghwYXNzd29yZBgFIAEoCRIPCgdhbGlCaW5kGAYgASgJ",
            "Eg4KBnd4QmluZBgHIAEoCRIOCgZxUUJpbmQYCCABKAkSEAoIdXNlclR5cGUY",
            "CSABKAUiRgoOQWRkcmVzc1JlcXVlc3QSDgoGc3RhdHVzGAEgASgFEiQKB2Fk",
            "ZHJlc3MYAiABKAsyEy5TUC5TZXJ2aWNlLkFkZHJlc3MiXgoTQWRkcmVzc0xp",
            "c3RSZXNwb25zZRIOCgZzdGF0dXMYASABKAUSKAoLYWRkcmVzc0xpc3QYAiAD",
            "KAsyEy5TUC5TZXJ2aWNlLkFkZHJlc3MSDQoFdG90YWwYAyABKAMiRQoUQWRk",
            "cmVzc1N0YXR1c1JlcXVlc3QSCgoCaWQYASABKAUSDgoGc3RhdHVzGAIgASgF",
            "EhEKCWFjY291bnRJZBgDIAEoCSJDChJBZGRyZXNzRG9ybVJlcXVlc3QSCgoC",
            "aWQYASABKAUSDgoGZG9ybUlkGAIgASgFEhEKCWFjY291bnRJZBgDIAEoCSIe",
            "Cg9Ub2tlbktleVJlcXVlc3QSCwoDa2V5GAEgASgJIlMKE0FjY2Vzc1Rva2Vu",
            "UmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEiwKC2FjY2Vzc1Rva2VuGAIgASgL",
            "MhcuU1AuU2VydmljZS5BY2Nlc3NUb2tlbiI4Cg5Ub2tlbklkUmVxdWVzdBIT",
            "CgthY2Nlc3NUb2tlbhgBIAEoCRIRCglhY2NvdW50SWQYAiABKAkimAEKC0Fj",
            "Y2Vzc1Rva2VuEhMKC2FjY2Vzc1Rva2VuGAEgASgJEhEKCWFjY291bnRJZBgC",
            "IAEoCRIaChJhY2Nlc3NUb2tlbkV4cGlyZXMYAyABKAMSFAoMcmVmcmVzaFRv",
            "a2VuGAQgASgJEhsKE3JlZnJlc2hUb2tlbkV4cGlyZXMYBSABKAMSEgoKY3Jl",
            "YXRlVGltZRgGIAEoAyJCChJBY2Nlc3NUb2tlblJlcXVlc3QSLAoLYWNjZXNz",
            "VG9rZW4YASABKAsyFy5TUC5TZXJ2aWNlLkFjY2Vzc1Rva2VuIl8KFFVwZGF0",
            "ZUFjY291bnRSZXF1ZXN0Eg0KBWVtYWlsGAEgASgJEhMKC21vYmlsZVBob25l",
            "GAIgASgJEhAKCHBhc3NXb3JkGAMgASgJEhEKCWFjY291bnRJZBgEIAEoCSJX",
            "Cg1SZWdpc3RSZXF1ZXN0Eg0KBWVtYWlsGAEgASgJEhMKC21vYmlsZVBob25l",
            "GAIgASgJEhAKCHBhc3NXb3JkGAMgASgJEhAKCHVzZXJOYW1lGAQgASgJIh8K",
            "EURlbEFkZHJlc3NSZXF1ZXN0EgoKAmlkGAEgASgFIiEKDkFjY291bnRSZXF1",
            "ZXN0Eg8KB2FjY291bnQYASABKAkiJQoRUmVnaW9uRGF0YVJlcXVlc3QSEAoI",
            "ZGF0YVR5cGUYASABKAUiRAoKUmVnaW9uRGF0YRIOCgZkYXRhSWQYASABKAUS",
            "EAoIZGF0YU5hbWUYAiABKAkSFAoMcGFyZW50RGF0YUlkGAMgASgFIlAKElJl",
            "Z2lvbkxpc3RSZXNwb25zZRIOCgZzdGF0dXMYASABKAUSKgoKcmVnaW9uTGlz",
            "dBgCIAMoCzIWLlNQLlNlcnZpY2UuUmVnaW9uRGF0YSIhCg9SZWdpb25JRFJl",
            "cXVlc3QSDgoGZGF0YUlkGAEgASgFIoABChJSZWdpb25EYXRhUmVzcG9uc2US",
            "DgoGc3RhdHVzGAEgASgFEg4KBmRhdGFJZBgCIAEoBRIQCghkYXRhTmFtZRgD",
            "IAEoCRIUCgxwYXJlbnREYXRhSWQYBCABKAUSDgoGY2l0eUlkGAUgASgFEhIK",
            "CnByb3ZpbmNlSWQYBiABKAUiXQoTU2hvcHBpbmdDYXJ0UmVxdWVzdBIRCglw",
            "cm9kdWN0SWQYASABKAkSEQoJYWNjb3VudElkGAIgASgJEhAKCHF1YW50aXR5",
            "GAMgASgFEg4KBnNob3BJZBgEIAEoBSIsChpTaG9wcGluZ0NhcnRSZXN1bHRS",
            "ZXNwb25zZRIOCgZzdGF0dXMYASABKAUiPwobU2hvcHBpbmdDYXJ0UXVhbnRp",
            "dHlSZXF1ZXN0Eg4KBmNhcnRJZBgBIAEoCRIQCghxdWFudGl0eRgCIAEoBSI9",
            "ChpTaG9wcGluZ0NhcnRPcmRlcklkUmVxdWVzdBIOCgZjYXJ0SWQYASADKAkS",
            "DwoHb3JkZXJJZBgCIAEoCSJeChhTaG9wcGluZ0NhcnRMaXN0UmVzcG9uc2US",
            "DgoGc3RhdHVzGAEgASgFEjIKEHNob3BwaW5nQ2FydExpc3QYAiADKAsyGC5T",
            "UC5TZXJ2aWNlLlNob3BwaW5nQ2FydCI6ChlTaG9wcGluZ0NhcnRDb3VudFJl",
            "c3BvbnNlEg4KBnN0YXR1cxgBIAEoBRINCgVjb3VudBgCIAEoAyJHCg9BZGRy",
            "ZXNzUmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEiQKB2FkZHJlc3MYAiABKAsy",
            "Ey5TUC5TZXJ2aWNlLkFkZHJlc3MimAEKFUFjY291bnRBdXRoZW50aWNhdGlv",
            "bhIQCghhdXRoVHlwZRgBIAEoBRIRCglhY2NvdW50SWQYAiABKAkSDwoHYWNj",
            "b3VudBgDIAEoCRINCgV0b2tlbhgEIAEoCRISCgp2ZXJpZnlDb2RlGAUgASgJ",
            "EhIKCmNyZWF0ZVRpbWUYBiABKAMSEgoKdXBkYXRlVGltZRgHIAEoAyJSChhB",
            "ZGRBdXRoZW50aWNhdGlvblJlcXVlc3QSNgoLYWNjb3VudEF1dGgYASABKAsy",
            "IS5TUC5TZXJ2aWNlLkFjY291bnRBdXRoZW50aWNhdGlvbiJMChRHZXRWZXJp",
            "ZnlDb2RlUmVxdWVzdBIPCgdhY2NvdW50GAEgASgJEhAKCGF1dGhUeXBlGAIg",
            "ASgFEhEKCWFjY291bnRJZBgDIAEoCSI4ChJWZXJpZnlDb2RlUmVzcG9uc2US",
            "DgoGc3RhdHVzGAEgASgFEhIKCnZlcmlmeUNvZGUYAiABKAkiYwobVXBkYXRl",
            "QXV0aGVudGljYXRpb25SZXF1ZXN0Eg8KB2FjY291bnQYASABKAkSEQoJYWNj",
            "b3VudElkGAIgASgJEhAKCGF1dGhUeXBlGAMgASgFEg4KBnN0YXR1cxgEIAEo",
            "BSLuAQoKQXNzb2NpYXRvchIUCgxhc3NvY2lhdG9ySWQYASABKAkSEQoJYWNj",
            "b3VudElkGAIgASgJEg4KBmtpbmRJZBgDIAEoCRIQCghxdWFudGl0eRgEIAEo",
            "BRIOCgZhbW91bnQYBSABKAESFAoMcGF5T3JkZXJDb2RlGAYgASgJEg8KB3Bh",
            "eVR5cGUYByABKAUSEQoJc3RhcnREYXRlGAggASgDEg8KB2VuZERhdGUYCSAB",
            "KAMSDgoGc3RhdHVzGAogASgFEhMKC2Rlc2NyaXB0aW9uGAsgASgJEhUKDWRp",
            "c2NvdW50VmFsdWUYDCABKAEiggEKFEFkZEFzc29jaWF0b3JSZXF1ZXN0EhEK",
            "CWFjY291bnRJZBgCIAEoCRIOCgZraW5kSWQYAyABKAkSEAoIcXVhbnRpdHkY",
            "BCABKAUSDgoGYW1vdW50GAUgASgBEhQKDHBheU9yZGVyQ29kZRgGIAEoCRIP",
            "CgdwYXlUeXBlGAcgASgFIlgKFkFzc29jaWF0b3JMaXN0UmVzcG9uc2USDgoG",
            "c3RhdHVzGAEgASgFEi4KDmFzc29jaWF0b3JMaXN0GAIgAygLMhYuU1AuU2Vy",
            "dmljZS5Bc3NvY2lhdG9yIiEKEUdldFN5c0tpbmRSZXF1ZXN0EgwKBGtpbmQY",
            "ASABKAUiggEKB1N5c0tpbmQSDgoGa2luZElkGAEgASgJEgwKBGtpbmQYAiAB",
            "KAUSEAoIcXVhbnRpdHkYAyABKAUSDAoEdW5pdBgEIAEoBRINCgVwcmljZRgF",
            "IAEoARITCgtkZXNjcmlwdGlvbhgGIAEoCRIVCg1kaXNjb3VudFZhbHVlGAcg",
            "ASgBIkwKE1N5c0tpbmRMaXN0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEiUK",
            "CGtpbmRMaXN0GAIgAygLMhMuU1AuU2VydmljZS5TeXNLaW5kIpoBChdBY2Nv",
            "dW50RnVsbEluZm9SZXNwb25zZRIOCgZzdGF0dXMYASABKAUSDgoGYXZhdGFy",
            "GAIgASgJEhAKCGZ1bGxOYW1lGAMgASgJEg4KBmdlbmRlchgEIAEoCBITCgtw",
            "YXlQYXNzV29yZBgFIAEoCRIQCgh1c2VyVHlwZRgGIAEoBRIWCg5hc3NvY2lh",
            "dG9yRGF0ZRgHIAEoAyJ/ChZBY2NvdW50RnVsbEluZm9SZXF1ZXN0EhEKCWFj",
            "Y291bnRJZBgBIAEoCRIOCgZhdmF0YXIYAiABKAkSEAoIZnVsbE5hbWUYAyAB",
            "KAkSDgoGZ2VuZGVyGAQgASgIEhAKCHVzZXJUeXBlGAUgASgFEg4KBmRvcm1J",
            "ZBgGIAEoBSIyCg9EaXNjb3VudFJlcXVlc3QSEQoJYWNjb3VudElkGAEgASgJ",
            "EgwKBGtpbmQYAiABKAUiKwoTQXNzb2NpYXRvcklkUmVxdWVzdBIUCgxhc3Nv",
            "Y2lhdG9ySWQYASABKAkiUAoSQXNzb2NpYXRvclJlc3BvbnNlEg4KBnN0YXR1",
            "cxgBIAEoBRIqCgphc3NvY2lhdG9yGAIgASgLMhYuU1AuU2VydmljZS5Bc3Nv",
            "Y2lhdG9yIkUKHVVwZGF0ZUFzc29jaWF0b3JTdGF0dXNSZXF1ZXN0EhQKDGFz",
            "c29jaWF0b3JJZBgBIAEoCRIOCgZzdGF0dXMYAiABKAUiOwoVTXlTaG9wcGlu",
            "Z0NhcnRSZXF1ZXN0EhEKCWFjY291bnRJZBgBIAEoCRIPCgdvcmRlcklkGAIg",
            "ASgJIjkKFEFjY291bnRQYXlQd2RSZXF1ZXN0EhEKCWFjY291bnRJZBgBIAEo",
            "CRIOCgZwYXlQd2QYAiABKAkiggEKEkJpbmdBY2NvdW50UmVxdWVzdBIRCglh",
            "Y2NvdW50SWQYASABKAkSEQoJb3RoZXJUeXBlGAIgASgFEhQKDG90aGVyQWNj",
            "b3VudBgDIAEoCRIOCgZhdmF0YXIYBCABKAkSEAoIZnVsbE5hbWUYBSABKAkS",
            "DgoGZ2VuZGVyGAYgASgIIoUBChNPdGhlckFjY291bnRSZXF1ZXN0EhMKC21v",
            "YmlsZVBob25lGAEgASgJEhEKCW90aGVyVHlwZRgCIAEoBRIUCgxvdGhlckFj",
            "Y291bnQYAyABKAkSDgoGYXZhdGFyGAQgASgJEhAKCGZ1bGxOYW1lGAUgASgJ",
            "Eg4KBmdlbmRlchgGIAEoCCJBChZHZXRPdGhlckFjY291bnRSZXF1ZXN0EhEK",
            "CW90aGVyVHlwZRgCIAEoBRIUCgxvdGhlckFjY291bnQYAyABKAkiPgoUQWNj",
            "b3VudE1vYmlsZVJlcXVlc3QSEQoJYWNjb3VudElkGAEgASgJEhMKC21vYmls",
            "ZVBob25lGAIgASgJIlkKEEFjY291bnRJRFJlcXVlc3QSEAoIdXNlclR5cGUY",
            "ASABKAUSDgoGZG9ybUlkGAIgASgFEhEKCWFjY291bnRJZBgDIAEoCRIQCghm",
            "dWxsTmFtZRgEIAEoCSI4ChNBcHBseVBhcnRuZXJSZXF1ZXN0EhEKCWFjY291",
            "bnRJZBgBIAEoCRIOCgZkb3JtSWQYAiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SP.Service.CommonModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.LoginRequest), global::SP.Service.LoginRequest.Parser, new[]{ "UserName", "PassWord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountResultResponse), global::SP.Service.AccountResultResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountResponse), global::SP.Service.AccountResponse.Parser, new[]{ "Status", "AccountId", "MobilePhone", "Email", "Password", "AliBind", "WxBind", "QQBind", "UserType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddressRequest), global::SP.Service.AddressRequest.Parser, new[]{ "Status", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddressListResponse), global::SP.Service.AddressListResponse.Parser, new[]{ "Status", "AddressList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddressStatusRequest), global::SP.Service.AddressStatusRequest.Parser, new[]{ "Id", "Status", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddressDormRequest), global::SP.Service.AddressDormRequest.Parser, new[]{ "Id", "DormId", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TokenKeyRequest), global::SP.Service.TokenKeyRequest.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccessTokenResponse), global::SP.Service.AccessTokenResponse.Parser, new[]{ "Status", "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TokenIdRequest), global::SP.Service.TokenIdRequest.Parser, new[]{ "AccessToken", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccessToken), global::SP.Service.AccessToken.Parser, new[]{ "AccessToken_", "AccountId", "AccessTokenExpires", "RefreshToken", "RefreshTokenExpires", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccessTokenRequest), global::SP.Service.AccessTokenRequest.Parser, new[]{ "AccessToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateAccountRequest), global::SP.Service.UpdateAccountRequest.Parser, new[]{ "Email", "MobilePhone", "PassWord", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegistRequest), global::SP.Service.RegistRequest.Parser, new[]{ "Email", "MobilePhone", "PassWord", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.DelAddressRequest), global::SP.Service.DelAddressRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountRequest), global::SP.Service.AccountRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegionDataRequest), global::SP.Service.RegionDataRequest.Parser, new[]{ "DataType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegionData), global::SP.Service.RegionData.Parser, new[]{ "DataId", "DataName", "ParentDataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegionListResponse), global::SP.Service.RegionListResponse.Parser, new[]{ "Status", "RegionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegionIDRequest), global::SP.Service.RegionIDRequest.Parser, new[]{ "DataId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.RegionDataResponse), global::SP.Service.RegionDataResponse.Parser, new[]{ "Status", "DataId", "DataName", "ParentDataId", "CityId", "ProvinceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartRequest), global::SP.Service.ShoppingCartRequest.Parser, new[]{ "ProductId", "AccountId", "Quantity", "ShopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartResultResponse), global::SP.Service.ShoppingCartResultResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartQuantityRequest), global::SP.Service.ShoppingCartQuantityRequest.Parser, new[]{ "CartId", "Quantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartOrderIdRequest), global::SP.Service.ShoppingCartOrderIdRequest.Parser, new[]{ "CartId", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartListResponse), global::SP.Service.ShoppingCartListResponse.Parser, new[]{ "Status", "ShoppingCartList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShoppingCartCountResponse), global::SP.Service.ShoppingCartCountResponse.Parser, new[]{ "Status", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddressResponse), global::SP.Service.AddressResponse.Parser, new[]{ "Status", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountAuthentication), global::SP.Service.AccountAuthentication.Parser, new[]{ "AuthType", "AccountId", "Account", "Token", "VerifyCode", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddAuthenticationRequest), global::SP.Service.AddAuthenticationRequest.Parser, new[]{ "AccountAuth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.GetVerifyCodeRequest), global::SP.Service.GetVerifyCodeRequest.Parser, new[]{ "Account", "AuthType", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.VerifyCodeResponse), global::SP.Service.VerifyCodeResponse.Parser, new[]{ "Status", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateAuthenticationRequest), global::SP.Service.UpdateAuthenticationRequest.Parser, new[]{ "Account", "AccountId", "AuthType", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Associator), global::SP.Service.Associator.Parser, new[]{ "AssociatorId", "AccountId", "KindId", "Quantity", "Amount", "PayOrderCode", "PayType", "StartDate", "EndDate", "Status", "Description", "DiscountValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddAssociatorRequest), global::SP.Service.AddAssociatorRequest.Parser, new[]{ "AccountId", "KindId", "Quantity", "Amount", "PayOrderCode", "PayType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AssociatorListResponse), global::SP.Service.AssociatorListResponse.Parser, new[]{ "Status", "AssociatorList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.GetSysKindRequest), global::SP.Service.GetSysKindRequest.Parser, new[]{ "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SysKind), global::SP.Service.SysKind.Parser, new[]{ "KindId", "Kind", "Quantity", "Unit", "Price", "Description", "DiscountValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SysKindListResponse), global::SP.Service.SysKindListResponse.Parser, new[]{ "Status", "KindList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountFullInfoResponse), global::SP.Service.AccountFullInfoResponse.Parser, new[]{ "Status", "Avatar", "FullName", "Gender", "PayPassWord", "UserType", "AssociatorDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountFullInfoRequest), global::SP.Service.AccountFullInfoRequest.Parser, new[]{ "AccountId", "Avatar", "FullName", "Gender", "UserType", "DormId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.DiscountRequest), global::SP.Service.DiscountRequest.Parser, new[]{ "AccountId", "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AssociatorIdRequest), global::SP.Service.AssociatorIdRequest.Parser, new[]{ "AssociatorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AssociatorResponse), global::SP.Service.AssociatorResponse.Parser, new[]{ "Status", "Associator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateAssociatorStatusRequest), global::SP.Service.UpdateAssociatorStatusRequest.Parser, new[]{ "AssociatorId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.MyShoppingCartRequest), global::SP.Service.MyShoppingCartRequest.Parser, new[]{ "AccountId", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountPayPwdRequest), global::SP.Service.AccountPayPwdRequest.Parser, new[]{ "AccountId", "PayPwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.BingAccountRequest), global::SP.Service.BingAccountRequest.Parser, new[]{ "AccountId", "OtherType", "OtherAccount", "Avatar", "FullName", "Gender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OtherAccountRequest), global::SP.Service.OtherAccountRequest.Parser, new[]{ "MobilePhone", "OtherType", "OtherAccount", "Avatar", "FullName", "Gender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.GetOtherAccountRequest), global::SP.Service.GetOtherAccountRequest.Parser, new[]{ "OtherType", "OtherAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountMobileRequest), global::SP.Service.AccountMobileRequest.Parser, new[]{ "AccountId", "MobilePhone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountIDRequest), global::SP.Service.AccountIDRequest.Parser, new[]{ "UserType", "DormId", "AccountId", "FullName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ApplyPartnerRequest), global::SP.Service.ApplyPartnerRequest.Parser, new[]{ "AccountId", "DormId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// 验证登陆密码的请求参数
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      userName_ = other.userName_;
      passWord_ = other.passWord_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///*
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passWord" field.</summary>
    public const int PassWordFieldNumber = 2;
    private string passWord_ = "";
    /// <summary>
    ///*
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (PassWord != other.PassWord) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PassWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            PassWord = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户的状态返回信息
  /// </summary>
  public sealed partial class AccountResultResponse : pb::IMessage<AccountResultResponse> {
    private static readonly pb::MessageParser<AccountResultResponse> _parser = new pb::MessageParser<AccountResultResponse>(() => new AccountResultResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountResultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResultResponse(AccountResultResponse other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResultResponse Clone() {
      return new AccountResultResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountResultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountResultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountResultResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户详情的返回信息
  /// </summary>
  public sealed partial class AccountResponse : pb::IMessage<AccountResponse> {
    private static readonly pb::MessageParser<AccountResponse> _parser = new pb::MessageParser<AccountResponse>(() => new AccountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResponse(AccountResponse other) : this() {
      status_ = other.status_;
      accountId_ = other.accountId_;
      mobilePhone_ = other.mobilePhone_;
      email_ = other.email_;
      password_ = other.password_;
      aliBind_ = other.aliBind_;
      wxBind_ = other.wxBind_;
      qQBind_ = other.qQBind_;
      userType_ = other.userType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountResponse Clone() {
      return new AccountResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobilePhone" field.</summary>
    public const int MobilePhoneFieldNumber = 3;
    private string mobilePhone_ = "";
    /// <summary>
    ///*
    /// 账户手机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MobilePhone {
      get { return mobilePhone_; }
      set {
        mobilePhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    /// <summary>
    ///*
    /// 账户邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    /// <summary>
    ///*
    /// 账户密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aliBind" field.</summary>
    public const int AliBindFieldNumber = 6;
    private string aliBind_ = "";
    /// <summary>
    ///*
    /// 绑定的阿里账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AliBind {
      get { return aliBind_; }
      set {
        aliBind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wxBind" field.</summary>
    public const int WxBindFieldNumber = 7;
    private string wxBind_ = "";
    /// <summary>
    ///*
    /// 绑定的微信账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WxBind {
      get { return wxBind_; }
      set {
        wxBind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qQBind" field.</summary>
    public const int QQBindFieldNumber = 8;
    private string qQBind_ = "";
    /// <summary>
    ///*
    /// 绑定的QQ账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QQBind {
      get { return qQBind_; }
      set {
        qQBind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 9;
    private int userType_;
    /// <summary>
    ///*
    /// 用户类别(0，商家 1，餐饮配送员 2，超市配送员)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (AccountId != other.AccountId) return false;
      if (MobilePhone != other.MobilePhone) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (AliBind != other.AliBind) return false;
      if (WxBind != other.WxBind) return false;
      if (QQBind != other.QQBind) return false;
      if (UserType != other.UserType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (MobilePhone.Length != 0) hash ^= MobilePhone.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (AliBind.Length != 0) hash ^= AliBind.GetHashCode();
      if (WxBind.Length != 0) hash ^= WxBind.GetHashCode();
      if (QQBind.Length != 0) hash ^= QQBind.GetHashCode();
      if (UserType != 0) hash ^= UserType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (MobilePhone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MobilePhone);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
      if (AliBind.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AliBind);
      }
      if (WxBind.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WxBind);
      }
      if (QQBind.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(QQBind);
      }
      if (UserType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UserType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (MobilePhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MobilePhone);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AliBind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AliBind);
      }
      if (WxBind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WxBind);
      }
      if (QQBind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QQBind);
      }
      if (UserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.MobilePhone.Length != 0) {
        MobilePhone = other.MobilePhone;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.AliBind.Length != 0) {
        AliBind = other.AliBind;
      }
      if (other.WxBind.Length != 0) {
        WxBind = other.WxBind;
      }
      if (other.QQBind.Length != 0) {
        QQBind = other.QQBind;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            MobilePhone = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
          case 50: {
            AliBind = input.ReadString();
            break;
          }
          case 58: {
            WxBind = input.ReadString();
            break;
          }
          case 66: {
            QQBind = input.ReadString();
            break;
          }
          case 72: {
            UserType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户ID的请求参数
  /// </summary>
  public sealed partial class AddressRequest : pb::IMessage<AddressRequest> {
    private static readonly pb::MessageParser<AddressRequest> _parser = new pb::MessageParser<AddressRequest>(() => new AddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest(AddressRequest other) : this() {
      status_ = other.status_;
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest Clone() {
      return new AddressRequest(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::SP.Service.Address address_;
    /// <summary>
    ///*
    /// 用户地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::SP.Service.Address();
        }
        Address.MergeFrom(other.Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (address_ == null) {
              address_ = new global::SP.Service.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户地址链表的返回信息
  /// </summary>
  public sealed partial class AddressListResponse : pb::IMessage<AddressListResponse> {
    private static readonly pb::MessageParser<AddressListResponse> _parser = new pb::MessageParser<AddressListResponse>(() => new AddressListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressListResponse(AddressListResponse other) : this() {
      status_ = other.status_;
      addressList_ = other.addressList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressListResponse Clone() {
      return new AddressListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "addressList" field.</summary>
    public const int AddressListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Address> _repeated_addressList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Address.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Address> addressList_ = new pbc::RepeatedField<global::SP.Service.Address>();
    /// <summary>
    ///*
    /// 用户地址列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Address> AddressList {
      get { return addressList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!addressList_.Equals(other.addressList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= addressList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      addressList_.WriteTo(output, _repeated_addressList_codec);
      if (Total != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += addressList_.CalculateSize(_repeated_addressList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      addressList_.Add(other.addressList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            addressList_.AddEntriesFrom(input, _repeated_addressList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户地址状态的请求参数
  /// </summary>
  public sealed partial class AddressStatusRequest : pb::IMessage<AddressStatusRequest> {
    private static readonly pb::MessageParser<AddressStatusRequest> _parser = new pb::MessageParser<AddressStatusRequest>(() => new AddressStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressStatusRequest(AddressStatusRequest other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressStatusRequest Clone() {
      return new AddressStatusRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///*
    ///  用户地址ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///*
    /// 用户地址状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户地址的请求参数
  /// </summary>
  public sealed partial class AddressDormRequest : pb::IMessage<AddressDormRequest> {
    private static readonly pb::MessageParser<AddressDormRequest> _parser = new pb::MessageParser<AddressDormRequest>(() => new AddressDormRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressDormRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressDormRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressDormRequest(AddressDormRequest other) : this() {
      id_ = other.id_;
      dormId_ = other.dormId_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressDormRequest Clone() {
      return new AddressDormRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///*
    ///  用户地址ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "dormId" field.</summary>
    public const int DormIdFieldNumber = 2;
    private int dormId_;
    /// <summary>
    ///*
    /// 用户宿舍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DormId {
      get { return dormId_; }
      set {
        dormId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressDormRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressDormRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DormId != other.DormId) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DormId != 0) hash ^= DormId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DormId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DormId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (DormId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DormId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressDormRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DormId != 0) {
        DormId = other.DormId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DormId = input.ReadInt32();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取AccessToken的请求参数
  /// </summary>
  public sealed partial class TokenKeyRequest : pb::IMessage<TokenKeyRequest> {
    private static readonly pb::MessageParser<TokenKeyRequest> _parser = new pb::MessageParser<TokenKeyRequest>(() => new TokenKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenKeyRequest(TokenKeyRequest other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenKeyRequest Clone() {
      return new TokenKeyRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    ///*
    ///  key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// AccessToken的返回信息
  /// </summary>
  public sealed partial class AccessTokenResponse : pb::IMessage<AccessTokenResponse> {
    private static readonly pb::MessageParser<AccessTokenResponse> _parser = new pb::MessageParser<AccessTokenResponse>(() => new AccessTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenResponse(AccessTokenResponse other) : this() {
      status_ = other.status_;
      AccessToken = other.accessToken_ != null ? other.AccessToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenResponse Clone() {
      return new AccessTokenResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private global::SP.Service.AccessToken accessToken_;
    /// <summary>
    ///*
    /// AccessToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AccessToken AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(AccessToken, other.AccessToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (accessToken_ != null) hash ^= AccessToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (accessToken_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (accessToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.accessToken_ != null) {
        if (accessToken_ == null) {
          accessToken_ = new global::SP.Service.AccessToken();
        }
        AccessToken.MergeFrom(other.AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (accessToken_ == null) {
              accessToken_ = new global::SP.Service.AccessToken();
            }
            input.ReadMessage(accessToken_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取AccessToken的请求参数
  /// </summary>
  public sealed partial class TokenIdRequest : pb::IMessage<TokenIdRequest> {
    private static readonly pb::MessageParser<TokenIdRequest> _parser = new pb::MessageParser<TokenIdRequest>(() => new TokenIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenIdRequest(TokenIdRequest other) : this() {
      accessToken_ = other.accessToken_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenIdRequest Clone() {
      return new TokenIdRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    /// <summary>
    ///*
    ///  AccessToken的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取AccessToken的请求参数
  /// </summary>
  public sealed partial class AccessToken : pb::IMessage<AccessToken> {
    private static readonly pb::MessageParser<AccessToken> _parser = new pb::MessageParser<AccessToken>(() => new AccessToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessToken(AccessToken other) : this() {
      accessToken_ = other.accessToken_;
      accountId_ = other.accountId_;
      accessTokenExpires_ = other.accessTokenExpires_;
      refreshToken_ = other.refreshToken_;
      refreshTokenExpires_ = other.refreshTokenExpires_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessToken Clone() {
      return new AccessToken(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessToken_FieldNumber = 1;
    private string accessToken_ = "";
    /// <summary>
    ///*
    ///  AccessToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken_ {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accessTokenExpires" field.</summary>
    public const int AccessTokenExpiresFieldNumber = 3;
    private long accessTokenExpires_;
    /// <summary>
    ///*
    ///  AccessToken过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccessTokenExpires {
      get { return accessTokenExpires_; }
      set {
        accessTokenExpires_ = value;
      }
    }

    /// <summary>Field number for the "refreshToken" field.</summary>
    public const int RefreshTokenFieldNumber = 4;
    private string refreshToken_ = "";
    /// <summary>
    ///*
    ///  刷新AccessToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefreshToken {
      get { return refreshToken_; }
      set {
        refreshToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refreshTokenExpires" field.</summary>
    public const int RefreshTokenExpiresFieldNumber = 5;
    private long refreshTokenExpires_;
    /// <summary>
    ///*
    ///  刷新AccessToken的过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshTokenExpires {
      get { return refreshTokenExpires_; }
      set {
        refreshTokenExpires_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private long createTime_;
    /// <summary>
    ///*
    ///  AccessToken建立时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken_ != other.AccessToken_) return false;
      if (AccountId != other.AccountId) return false;
      if (AccessTokenExpires != other.AccessTokenExpires) return false;
      if (RefreshToken != other.RefreshToken) return false;
      if (RefreshTokenExpires != other.RefreshTokenExpires) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken_.Length != 0) hash ^= AccessToken_.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AccessTokenExpires != 0L) hash ^= AccessTokenExpires.GetHashCode();
      if (RefreshToken.Length != 0) hash ^= RefreshToken.GetHashCode();
      if (RefreshTokenExpires != 0L) hash ^= RefreshTokenExpires.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken_);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (AccessTokenExpires != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccessTokenExpires);
      }
      if (RefreshToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RefreshToken);
      }
      if (RefreshTokenExpires != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RefreshTokenExpires);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken_);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AccessTokenExpires != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccessTokenExpires);
      }
      if (RefreshToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshToken);
      }
      if (RefreshTokenExpires != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshTokenExpires);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessToken other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken_.Length != 0) {
        AccessToken_ = other.AccessToken_;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AccessTokenExpires != 0L) {
        AccessTokenExpires = other.AccessTokenExpires;
      }
      if (other.RefreshToken.Length != 0) {
        RefreshToken = other.RefreshToken;
      }
      if (other.RefreshTokenExpires != 0L) {
        RefreshTokenExpires = other.RefreshTokenExpires;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccessToken_ = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 24: {
            AccessTokenExpires = input.ReadInt64();
            break;
          }
          case 34: {
            RefreshToken = input.ReadString();
            break;
          }
          case 40: {
            RefreshTokenExpires = input.ReadInt64();
            break;
          }
          case 48: {
            CreateTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取AccessToken的请求参数
  /// </summary>
  public sealed partial class AccessTokenRequest : pb::IMessage<AccessTokenRequest> {
    private static readonly pb::MessageParser<AccessTokenRequest> _parser = new pb::MessageParser<AccessTokenRequest>(() => new AccessTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenRequest(AccessTokenRequest other) : this() {
      AccessToken = other.accessToken_ != null ? other.AccessToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessTokenRequest Clone() {
      return new AccessTokenRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private global::SP.Service.AccessToken accessToken_;
    /// <summary>
    ///*
    ///  AccessToken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AccessToken AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessToken, other.AccessToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessToken_ != null) hash ^= AccessToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accessToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.accessToken_ != null) {
        if (accessToken_ == null) {
          accessToken_ = new global::SP.Service.AccessToken();
        }
        AccessToken.MergeFrom(other.AccessToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (accessToken_ == null) {
              accessToken_ = new global::SP.Service.AccessToken();
            }
            input.ReadMessage(accessToken_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新账户的请求参数
  /// </summary>
  public sealed partial class UpdateAccountRequest : pb::IMessage<UpdateAccountRequest> {
    private static readonly pb::MessageParser<UpdateAccountRequest> _parser = new pb::MessageParser<UpdateAccountRequest>(() => new UpdateAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest(UpdateAccountRequest other) : this() {
      email_ = other.email_;
      mobilePhone_ = other.mobilePhone_;
      passWord_ = other.passWord_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest Clone() {
      return new UpdateAccountRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///*
    ///  注册邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobilePhone" field.</summary>
    public const int MobilePhoneFieldNumber = 2;
    private string mobilePhone_ = "";
    /// <summary>
    ///*
    ///  注册邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MobilePhone {
      get { return mobilePhone_; }
      set {
        mobilePhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passWord" field.</summary>
    public const int PassWordFieldNumber = 3;
    private string passWord_ = "";
    /// <summary>
    ///*
    ///  注册密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (MobilePhone != other.MobilePhone) return false;
      if (PassWord != other.PassWord) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (MobilePhone.Length != 0) hash ^= MobilePhone.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (MobilePhone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MobilePhone);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassWord);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (MobilePhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MobilePhone);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.MobilePhone.Length != 0) {
        MobilePhone = other.MobilePhone;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            MobilePhone = input.ReadString();
            break;
          }
          case 26: {
            PassWord = input.ReadString();
            break;
          }
          case 34: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 注册账户的请求参数
  /// </summary>
  public sealed partial class RegistRequest : pb::IMessage<RegistRequest> {
    private static readonly pb::MessageParser<RegistRequest> _parser = new pb::MessageParser<RegistRequest>(() => new RegistRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistRequest(RegistRequest other) : this() {
      email_ = other.email_;
      mobilePhone_ = other.mobilePhone_;
      passWord_ = other.passWord_;
      userName_ = other.userName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistRequest Clone() {
      return new RegistRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///*
    ///  注册邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobilePhone" field.</summary>
    public const int MobilePhoneFieldNumber = 2;
    private string mobilePhone_ = "";
    /// <summary>
    ///*
    ///  注册邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MobilePhone {
      get { return mobilePhone_; }
      set {
        mobilePhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passWord" field.</summary>
    public const int PassWordFieldNumber = 3;
    private string passWord_ = "";
    /// <summary>
    ///*
    ///  注册密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    /// <summary>
    ///*
    ///  注册的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (MobilePhone != other.MobilePhone) return false;
      if (PassWord != other.PassWord) return false;
      if (UserName != other.UserName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (MobilePhone.Length != 0) hash ^= MobilePhone.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (MobilePhone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MobilePhone);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassWord);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (MobilePhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MobilePhone);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.MobilePhone.Length != 0) {
        MobilePhone = other.MobilePhone;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            MobilePhone = input.ReadString();
            break;
          }
          case 26: {
            PassWord = input.ReadString();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 删除账户地址的请求参数
  /// </summary>
  public sealed partial class DelAddressRequest : pb::IMessage<DelAddressRequest> {
    private static readonly pb::MessageParser<DelAddressRequest> _parser = new pb::MessageParser<DelAddressRequest>(() => new DelAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAddressRequest(DelAddressRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelAddressRequest Clone() {
      return new DelAddressRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///*
    ///  地址Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取账户的请求参数
  /// </summary>
  public sealed partial class AccountRequest : pb::IMessage<AccountRequest> {
    private static readonly pb::MessageParser<AccountRequest> _parser = new pb::MessageParser<AccountRequest>(() => new AccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountRequest(AccountRequest other) : this() {
      account_ = other.account_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountRequest Clone() {
      return new AccountRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///*
    ///  账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取区域的请求参数
  /// </summary>
  public sealed partial class RegionDataRequest : pb::IMessage<RegionDataRequest> {
    private static readonly pb::MessageParser<RegionDataRequest> _parser = new pb::MessageParser<RegionDataRequest>(() => new RegionDataRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataRequest(RegionDataRequest other) : this() {
      dataType_ = other.dataType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataRequest Clone() {
      return new RegionDataRequest(this);
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 1;
    private int dataType_;
    /// <summary>
    ///*
    ///  区域类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataType != other.DataType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataType != 0) hash ^= DataType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionData : pb::IMessage<RegionData> {
    private static readonly pb::MessageParser<RegionData> _parser = new pb::MessageParser<RegionData>(() => new RegionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionData(RegionData other) : this() {
      dataId_ = other.dataId_;
      dataName_ = other.dataName_;
      parentDataId_ = other.parentDataId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionData Clone() {
      return new RegionData(this);
    }

    /// <summary>Field number for the "dataId" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    /// <summary>
    ///*
    ///  区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "dataName" field.</summary>
    public const int DataNameFieldNumber = 2;
    private string dataName_ = "";
    /// <summary>
    ///*
    ///  区域名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataName {
      get { return dataName_; }
      set {
        dataName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentDataId" field.</summary>
    public const int ParentDataIdFieldNumber = 3;
    private int parentDataId_;
    /// <summary>
    ///*
    ///  区域父ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentDataId {
      get { return parentDataId_; }
      set {
        parentDataId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      if (DataName != other.DataName) return false;
      if (ParentDataId != other.ParentDataId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (DataName.Length != 0) hash ^= DataName.GetHashCode();
      if (ParentDataId != 0) hash ^= ParentDataId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
      if (DataName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataName);
      }
      if (ParentDataId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ParentDataId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (DataName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataName);
      }
      if (ParentDataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentDataId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionData other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      if (other.DataName.Length != 0) {
        DataName = other.DataName;
      }
      if (other.ParentDataId != 0) {
        ParentDataId = other.ParentDataId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
          case 18: {
            DataName = input.ReadString();
            break;
          }
          case 24: {
            ParentDataId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 区域的返回信息
  /// </summary>
  public sealed partial class RegionListResponse : pb::IMessage<RegionListResponse> {
    private static readonly pb::MessageParser<RegionListResponse> _parser = new pb::MessageParser<RegionListResponse>(() => new RegionListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionListResponse(RegionListResponse other) : this() {
      status_ = other.status_;
      regionList_ = other.regionList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionListResponse Clone() {
      return new RegionListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "regionList" field.</summary>
    public const int RegionListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.RegionData> _repeated_regionList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.RegionData.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.RegionData> regionList_ = new pbc::RepeatedField<global::SP.Service.RegionData>();
    /// <summary>
    ///*
    ///  区域列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.RegionData> RegionList {
      get { return regionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!regionList_.Equals(other.regionList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= regionList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      regionList_.WriteTo(output, _repeated_regionList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += regionList_.CalculateSize(_repeated_regionList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      regionList_.Add(other.regionList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            regionList_.AddEntriesFrom(input, _repeated_regionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 区域ID的请求参数
  /// </summary>
  public sealed partial class RegionIDRequest : pb::IMessage<RegionIDRequest> {
    private static readonly pb::MessageParser<RegionIDRequest> _parser = new pb::MessageParser<RegionIDRequest>(() => new RegionIDRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIDRequest(RegionIDRequest other) : this() {
      dataId_ = other.dataId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionIDRequest Clone() {
      return new RegionIDRequest(this);
    }

    /// <summary>Field number for the "dataId" field.</summary>
    public const int DataIdFieldNumber = 1;
    private int dataId_;
    /// <summary>
    ///*
    ///  区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataId != other.DataId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataId != 0) hash ^= DataId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionIDRequest other) {
      if (other == null) {
        return;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DataId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 区域ID的返回信息
  /// </summary>
  public sealed partial class RegionDataResponse : pb::IMessage<RegionDataResponse> {
    private static readonly pb::MessageParser<RegionDataResponse> _parser = new pb::MessageParser<RegionDataResponse>(() => new RegionDataResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataResponse(RegionDataResponse other) : this() {
      status_ = other.status_;
      dataId_ = other.dataId_;
      dataName_ = other.dataName_;
      parentDataId_ = other.parentDataId_;
      cityId_ = other.cityId_;
      provinceId_ = other.provinceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionDataResponse Clone() {
      return new RegionDataResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "dataId" field.</summary>
    public const int DataIdFieldNumber = 2;
    private int dataId_;
    /// <summary>
    ///*
    ///  区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataId {
      get { return dataId_; }
      set {
        dataId_ = value;
      }
    }

    /// <summary>Field number for the "dataName" field.</summary>
    public const int DataNameFieldNumber = 3;
    private string dataName_ = "";
    /// <summary>
    ///*
    ///  区域名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataName {
      get { return dataName_; }
      set {
        dataName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentDataId" field.</summary>
    public const int ParentDataIdFieldNumber = 4;
    private int parentDataId_;
    /// <summary>
    ///*
    ///  区ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentDataId {
      get { return parentDataId_; }
      set {
        parentDataId_ = value;
      }
    }

    /// <summary>Field number for the "cityId" field.</summary>
    public const int CityIdFieldNumber = 5;
    private int cityId_;
    /// <summary>
    ///*
    ///  城市ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "provinceId" field.</summary>
    public const int ProvinceIdFieldNumber = 6;
    private int provinceId_;
    /// <summary>
    ///*
    ///  省ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProvinceId {
      get { return provinceId_; }
      set {
        provinceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (DataId != other.DataId) return false;
      if (DataName != other.DataName) return false;
      if (ParentDataId != other.ParentDataId) return false;
      if (CityId != other.CityId) return false;
      if (ProvinceId != other.ProvinceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (DataId != 0) hash ^= DataId.GetHashCode();
      if (DataName.Length != 0) hash ^= DataName.GetHashCode();
      if (ParentDataId != 0) hash ^= ParentDataId.GetHashCode();
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (ProvinceId != 0) hash ^= ProvinceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (DataId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DataId);
      }
      if (DataName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataName);
      }
      if (ParentDataId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentDataId);
      }
      if (CityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CityId);
      }
      if (ProvinceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ProvinceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (DataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataId);
      }
      if (DataName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataName);
      }
      if (ParentDataId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentDataId);
      }
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityId);
      }
      if (ProvinceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProvinceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.DataId != 0) {
        DataId = other.DataId;
      }
      if (other.DataName.Length != 0) {
        DataName = other.DataName;
      }
      if (other.ParentDataId != 0) {
        ParentDataId = other.ParentDataId;
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.ProvinceId != 0) {
        ProvinceId = other.ProvinceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            DataId = input.ReadInt32();
            break;
          }
          case 26: {
            DataName = input.ReadString();
            break;
          }
          case 32: {
            ParentDataId = input.ReadInt32();
            break;
          }
          case 40: {
            CityId = input.ReadInt32();
            break;
          }
          case 48: {
            ProvinceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加购物车的请求参数
  /// </summary>
  public sealed partial class ShoppingCartRequest : pb::IMessage<ShoppingCartRequest> {
    private static readonly pb::MessageParser<ShoppingCartRequest> _parser = new pb::MessageParser<ShoppingCartRequest>(() => new ShoppingCartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartRequest(ShoppingCartRequest other) : this() {
      productId_ = other.productId_;
      accountId_ = other.accountId_;
      quantity_ = other.quantity_;
      shopId_ = other.shopId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartRequest Clone() {
      return new ShoppingCartRequest(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    /// <summary>
    ///*
    ///  产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private int quantity_;
    /// <summary>
    ///*
    ///  购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 4;
    private int shopId_;
    /// <summary>
    ///*
    ///  店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (AccountId != other.AccountId) return false;
      if (Quantity != other.Quantity) return false;
      if (ShopId != other.ShopId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quantity);
      }
      if (ShopId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 24: {
            Quantity = input.ReadInt32();
            break;
          }
          case 32: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 购物车添加结果
  /// </summary>
  public sealed partial class ShoppingCartResultResponse : pb::IMessage<ShoppingCartResultResponse> {
    private static readonly pb::MessageParser<ShoppingCartResultResponse> _parser = new pb::MessageParser<ShoppingCartResultResponse>(() => new ShoppingCartResultResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartResultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartResultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartResultResponse(ShoppingCartResultResponse other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartResultResponse Clone() {
      return new ShoppingCartResultResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  用户地址ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartResultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartResultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartResultResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新购物数量的请求参数
  /// </summary>
  public sealed partial class ShoppingCartQuantityRequest : pb::IMessage<ShoppingCartQuantityRequest> {
    private static readonly pb::MessageParser<ShoppingCartQuantityRequest> _parser = new pb::MessageParser<ShoppingCartQuantityRequest>(() => new ShoppingCartQuantityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartQuantityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartQuantityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartQuantityRequest(ShoppingCartQuantityRequest other) : this() {
      cartId_ = other.cartId_;
      quantity_ = other.quantity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartQuantityRequest Clone() {
      return new ShoppingCartQuantityRequest(this);
    }

    /// <summary>Field number for the "cartId" field.</summary>
    public const int CartIdFieldNumber = 1;
    private string cartId_ = "";
    /// <summary>
    ///*
    ///  购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CartId {
      get { return cartId_; }
      set {
        cartId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 2;
    private int quantity_;
    /// <summary>
    ///*
    ///  购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartQuantityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartQuantityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CartId != other.CartId) return false;
      if (Quantity != other.Quantity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CartId.Length != 0) hash ^= CartId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CartId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CartId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quantity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CartId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CartId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartQuantityRequest other) {
      if (other == null) {
        return;
      }
      if (other.CartId.Length != 0) {
        CartId = other.CartId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CartId = input.ReadString();
            break;
          }
          case 16: {
            Quantity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新购物车的订单ID的请求参数
  /// </summary>
  public sealed partial class ShoppingCartOrderIdRequest : pb::IMessage<ShoppingCartOrderIdRequest> {
    private static readonly pb::MessageParser<ShoppingCartOrderIdRequest> _parser = new pb::MessageParser<ShoppingCartOrderIdRequest>(() => new ShoppingCartOrderIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartOrderIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartOrderIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartOrderIdRequest(ShoppingCartOrderIdRequest other) : this() {
      cartId_ = other.cartId_.Clone();
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartOrderIdRequest Clone() {
      return new ShoppingCartOrderIdRequest(this);
    }

    /// <summary>Field number for the "cartId" field.</summary>
    public const int CartIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cartId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cartId_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///  购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CartId {
      get { return cartId_; }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///*
    ///  订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartOrderIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartOrderIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cartId_.Equals(other.cartId_)) return false;
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cartId_.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cartId_.WriteTo(output, _repeated_cartId_codec);
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cartId_.CalculateSize(_repeated_cartId_codec);
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartOrderIdRequest other) {
      if (other == null) {
        return;
      }
      cartId_.Add(other.cartId_);
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cartId_.AddEntriesFrom(input, _repeated_cartId_codec);
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 购物车一览
  /// </summary>
  public sealed partial class ShoppingCartListResponse : pb::IMessage<ShoppingCartListResponse> {
    private static readonly pb::MessageParser<ShoppingCartListResponse> _parser = new pb::MessageParser<ShoppingCartListResponse>(() => new ShoppingCartListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartListResponse(ShoppingCartListResponse other) : this() {
      status_ = other.status_;
      shoppingCartList_ = other.shoppingCartList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartListResponse Clone() {
      return new ShoppingCartListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  用户地址ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shoppingCartList" field.</summary>
    public const int ShoppingCartListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.ShoppingCart> _repeated_shoppingCartList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.ShoppingCart.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ShoppingCart> shoppingCartList_ = new pbc::RepeatedField<global::SP.Service.ShoppingCart>();
    /// <summary>
    ///*
    ///  购物车列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ShoppingCart> ShoppingCartList {
      get { return shoppingCartList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!shoppingCartList_.Equals(other.shoppingCartList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= shoppingCartList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      shoppingCartList_.WriteTo(output, _repeated_shoppingCartList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += shoppingCartList_.CalculateSize(_repeated_shoppingCartList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      shoppingCartList_.Add(other.shoppingCartList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            shoppingCartList_.AddEntriesFrom(input, _repeated_shoppingCartList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 购物车一览
  /// </summary>
  public sealed partial class ShoppingCartCountResponse : pb::IMessage<ShoppingCartCountResponse> {
    private static readonly pb::MessageParser<ShoppingCartCountResponse> _parser = new pb::MessageParser<ShoppingCartCountResponse>(() => new ShoppingCartCountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingCartCountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartCountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartCountResponse(ShoppingCartCountResponse other) : this() {
      status_ = other.status_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingCartCountResponse Clone() {
      return new ShoppingCartCountResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  用户地址ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    ///*
    ///  购物车列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingCartCountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingCartCountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingCartCountResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户ID的请求参数
  /// </summary>
  public sealed partial class AddressResponse : pb::IMessage<AddressResponse> {
    private static readonly pb::MessageParser<AddressResponse> _parser = new pb::MessageParser<AddressResponse>(() => new AddressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressResponse(AddressResponse other) : this() {
      status_ = other.status_;
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressResponse Clone() {
      return new AddressResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::SP.Service.Address address_;
    /// <summary>
    ///*
    /// 用户地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::SP.Service.Address();
        }
        Address.MergeFrom(other.Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (address_ == null) {
              address_ = new global::SP.Service.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 认证情况
  /// </summary>
  public sealed partial class AccountAuthentication : pb::IMessage<AccountAuthentication> {
    private static readonly pb::MessageParser<AccountAuthentication> _parser = new pb::MessageParser<AccountAuthentication>(() => new AccountAuthentication());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountAuthentication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountAuthentication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountAuthentication(AccountAuthentication other) : this() {
      authType_ = other.authType_;
      accountId_ = other.accountId_;
      account_ = other.account_;
      token_ = other.token_;
      verifyCode_ = other.verifyCode_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountAuthentication Clone() {
      return new AccountAuthentication(this);
    }

    /// <summary>Field number for the "authType" field.</summary>
    public const int AuthTypeFieldNumber = 1;
    private int authType_;
    /// <summary>
    ///*
    ///  认证类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private string account_ = "";
    /// <summary>
    ///*
    ///  认证账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    /// <summary>
    ///*
    ///  认证token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 5;
    private string verifyCode_ = "";
    /// <summary>
    ///*
    ///  验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private long createTime_;
    /// <summary>
    ///*
    ///  创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private long updateTime_;
    /// <summary>
    ///*
    ///  更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountAuthentication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountAuthentication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthType != other.AuthType) return false;
      if (AccountId != other.AccountId) return false;
      if (Account != other.Account) return false;
      if (Token != other.Token) return false;
      if (VerifyCode != other.VerifyCode) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AuthType);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VerifyCode);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreateTime);
      }
      if (UpdateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthType);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (UpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountAuthentication other) {
      if (other == null) {
        return;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime != 0L) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AuthType = input.ReadInt32();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 42: {
            VerifyCode = input.ReadString();
            break;
          }
          case 48: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 56: {
            UpdateTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加认证情况的请求参数
  /// </summary>
  public sealed partial class AddAuthenticationRequest : pb::IMessage<AddAuthenticationRequest> {
    private static readonly pb::MessageParser<AddAuthenticationRequest> _parser = new pb::MessageParser<AddAuthenticationRequest>(() => new AddAuthenticationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAuthenticationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAuthenticationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAuthenticationRequest(AddAuthenticationRequest other) : this() {
      AccountAuth = other.accountAuth_ != null ? other.AccountAuth.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAuthenticationRequest Clone() {
      return new AddAuthenticationRequest(this);
    }

    /// <summary>Field number for the "accountAuth" field.</summary>
    public const int AccountAuthFieldNumber = 1;
    private global::SP.Service.AccountAuthentication accountAuth_;
    /// <summary>
    ///*
    ///  购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AccountAuthentication AccountAuth {
      get { return accountAuth_; }
      set {
        accountAuth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAuthenticationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAuthenticationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountAuth, other.AccountAuth)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accountAuth_ != null) hash ^= AccountAuth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accountAuth_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountAuth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accountAuth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountAuth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAuthenticationRequest other) {
      if (other == null) {
        return;
      }
      if (other.accountAuth_ != null) {
        if (accountAuth_ == null) {
          accountAuth_ = new global::SP.Service.AccountAuthentication();
        }
        AccountAuth.MergeFrom(other.AccountAuth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (accountAuth_ == null) {
              accountAuth_ = new global::SP.Service.AccountAuthentication();
            }
            input.ReadMessage(accountAuth_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取验证码的请求参数
  /// </summary>
  public sealed partial class GetVerifyCodeRequest : pb::IMessage<GetVerifyCodeRequest> {
    private static readonly pb::MessageParser<GetVerifyCodeRequest> _parser = new pb::MessageParser<GetVerifyCodeRequest>(() => new GetVerifyCodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVerifyCodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVerifyCodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVerifyCodeRequest(GetVerifyCodeRequest other) : this() {
      account_ = other.account_;
      authType_ = other.authType_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVerifyCodeRequest Clone() {
      return new GetVerifyCodeRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///*
    ///  账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authType" field.</summary>
    public const int AuthTypeFieldNumber = 2;
    private int authType_;
    /// <summary>
    ///*
    ///  认证类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVerifyCodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVerifyCodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (AuthType != other.AuthType) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (AuthType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AuthType);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthType);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVerifyCodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            AuthType = input.ReadInt32();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取到的验证码
  /// </summary>
  public sealed partial class VerifyCodeResponse : pb::IMessage<VerifyCodeResponse> {
    private static readonly pb::MessageParser<VerifyCodeResponse> _parser = new pb::MessageParser<VerifyCodeResponse>(() => new VerifyCodeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyCodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyCodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyCodeResponse(VerifyCodeResponse other) : this() {
      status_ = other.status_;
      verifyCode_ = other.verifyCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyCodeResponse Clone() {
      return new VerifyCodeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "verifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 2;
    private string verifyCode_ = "";
    /// <summary>
    ///*
    ///  认证类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyCodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyCodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VerifyCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyCodeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新认证情况的请求参数
  /// </summary>
  public sealed partial class UpdateAuthenticationRequest : pb::IMessage<UpdateAuthenticationRequest> {
    private static readonly pb::MessageParser<UpdateAuthenticationRequest> _parser = new pb::MessageParser<UpdateAuthenticationRequest>(() => new UpdateAuthenticationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAuthenticationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAuthenticationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAuthenticationRequest(UpdateAuthenticationRequest other) : this() {
      account_ = other.account_;
      accountId_ = other.accountId_;
      authType_ = other.authType_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAuthenticationRequest Clone() {
      return new UpdateAuthenticationRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///*
    ///  账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authType" field.</summary>
    public const int AuthTypeFieldNumber = 3;
    private int authType_;
    /// <summary>
    ///*
    ///  认证类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    ///*
    ///  认证的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAuthenticationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAuthenticationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (AccountId != other.AccountId) return false;
      if (AuthType != other.AuthType) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (AuthType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthType);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthType);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAuthenticationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 24: {
            AuthType = input.ReadInt32();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 会员情况
  /// </summary>
  public sealed partial class Associator : pb::IMessage<Associator> {
    private static readonly pb::MessageParser<Associator> _parser = new pb::MessageParser<Associator>(() => new Associator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Associator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Associator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Associator(Associator other) : this() {
      associatorId_ = other.associatorId_;
      accountId_ = other.accountId_;
      kindId_ = other.kindId_;
      quantity_ = other.quantity_;
      amount_ = other.amount_;
      payOrderCode_ = other.payOrderCode_;
      payType_ = other.payType_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      status_ = other.status_;
      description_ = other.description_;
      discountValue_ = other.discountValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Associator Clone() {
      return new Associator(this);
    }

    /// <summary>Field number for the "associatorId" field.</summary>
    public const int AssociatorIdFieldNumber = 1;
    private string associatorId_ = "";
    /// <summary>
    ///*
    ///  会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssociatorId {
      get { return associatorId_; }
      set {
        associatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kindId" field.</summary>
    public const int KindIdFieldNumber = 3;
    private string kindId_ = "";
    /// <summary>
    ///*
    ///  系统种类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KindId {
      get { return kindId_; }
      set {
        kindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private int quantity_;
    /// <summary>
    ///*
    ///  订购的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private double amount_;
    /// <summary>
    ///*
    ///  已支付的金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "payOrderCode" field.</summary>
    public const int PayOrderCodeFieldNumber = 6;
    private string payOrderCode_ = "";
    /// <summary>
    ///*
    ///  支付订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayOrderCode {
      get { return payOrderCode_; }
      set {
        payOrderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payType" field.</summary>
    public const int PayTypeFieldNumber = 7;
    private int payType_;
    /// <summary>
    ///*
    ///  支付类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayType {
      get { return payType_; }
      set {
        payType_ = value;
      }
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 8;
    private long startDate_;
    /// <summary>
    ///*
    ///  创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "endDate" field.</summary>
    public const int EndDateFieldNumber = 9;
    private long endDate_;
    /// <summary>
    ///*
    ///  更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private int status_;
    /// <summary>
    ///*
    ///  有效状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 11;
    private string description_ = "";
    /// <summary>
    ///*
    ///  描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discountValue" field.</summary>
    public const int DiscountValueFieldNumber = 12;
    private double discountValue_;
    /// <summary>
    ///*
    ///  优惠的钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DiscountValue {
      get { return discountValue_; }
      set {
        discountValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Associator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Associator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssociatorId != other.AssociatorId) return false;
      if (AccountId != other.AccountId) return false;
      if (KindId != other.KindId) return false;
      if (Quantity != other.Quantity) return false;
      if (Amount != other.Amount) return false;
      if (PayOrderCode != other.PayOrderCode) return false;
      if (PayType != other.PayType) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Status != other.Status) return false;
      if (Description != other.Description) return false;
      if (DiscountValue != other.DiscountValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssociatorId.Length != 0) hash ^= AssociatorId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (KindId.Length != 0) hash ^= KindId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (PayOrderCode.Length != 0) hash ^= PayOrderCode.GetHashCode();
      if (PayType != 0) hash ^= PayType.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DiscountValue != 0D) hash ^= DiscountValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssociatorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssociatorId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (KindId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KindId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quantity);
      }
      if (Amount != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Amount);
      }
      if (PayOrderCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PayOrderCode);
      }
      if (PayType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PayType);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(EndDate);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Description);
      }
      if (DiscountValue != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(DiscountValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssociatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssociatorId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (KindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KindId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (PayOrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayOrderCode);
      }
      if (PayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayType);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DiscountValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Associator other) {
      if (other == null) {
        return;
      }
      if (other.AssociatorId.Length != 0) {
        AssociatorId = other.AssociatorId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.KindId.Length != 0) {
        KindId = other.KindId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.PayOrderCode.Length != 0) {
        PayOrderCode = other.PayOrderCode;
      }
      if (other.PayType != 0) {
        PayType = other.PayType;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DiscountValue != 0D) {
        DiscountValue = other.DiscountValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssociatorId = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            KindId = input.ReadString();
            break;
          }
          case 32: {
            Quantity = input.ReadInt32();
            break;
          }
          case 41: {
            Amount = input.ReadDouble();
            break;
          }
          case 50: {
            PayOrderCode = input.ReadString();
            break;
          }
          case 56: {
            PayType = input.ReadInt32();
            break;
          }
          case 64: {
            StartDate = input.ReadInt64();
            break;
          }
          case 72: {
            EndDate = input.ReadInt64();
            break;
          }
          case 80: {
            Status = input.ReadInt32();
            break;
          }
          case 90: {
            Description = input.ReadString();
            break;
          }
          case 97: {
            DiscountValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加会员的请求参数
  /// </summary>
  public sealed partial class AddAssociatorRequest : pb::IMessage<AddAssociatorRequest> {
    private static readonly pb::MessageParser<AddAssociatorRequest> _parser = new pb::MessageParser<AddAssociatorRequest>(() => new AddAssociatorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAssociatorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssociatorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssociatorRequest(AddAssociatorRequest other) : this() {
      accountId_ = other.accountId_;
      kindId_ = other.kindId_;
      quantity_ = other.quantity_;
      amount_ = other.amount_;
      payOrderCode_ = other.payOrderCode_;
      payType_ = other.payType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssociatorRequest Clone() {
      return new AddAssociatorRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kindId" field.</summary>
    public const int KindIdFieldNumber = 3;
    private string kindId_ = "";
    /// <summary>
    ///*
    ///  系统种类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KindId {
      get { return kindId_; }
      set {
        kindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private int quantity_;
    /// <summary>
    ///*
    ///  订购的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private double amount_;
    /// <summary>
    ///*
    ///  已支付的金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "payOrderCode" field.</summary>
    public const int PayOrderCodeFieldNumber = 6;
    private string payOrderCode_ = "";
    /// <summary>
    ///*
    ///  支付订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayOrderCode {
      get { return payOrderCode_; }
      set {
        payOrderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payType" field.</summary>
    public const int PayTypeFieldNumber = 7;
    private int payType_;
    /// <summary>
    ///*
    ///  支付类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayType {
      get { return payType_; }
      set {
        payType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAssociatorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAssociatorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (KindId != other.KindId) return false;
      if (Quantity != other.Quantity) return false;
      if (Amount != other.Amount) return false;
      if (PayOrderCode != other.PayOrderCode) return false;
      if (PayType != other.PayType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (KindId.Length != 0) hash ^= KindId.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (PayOrderCode.Length != 0) hash ^= PayOrderCode.GetHashCode();
      if (PayType != 0) hash ^= PayType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (KindId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KindId);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quantity);
      }
      if (Amount != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Amount);
      }
      if (PayOrderCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PayOrderCode);
      }
      if (PayType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (KindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KindId);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (PayOrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayOrderCode);
      }
      if (PayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAssociatorRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.KindId.Length != 0) {
        KindId = other.KindId;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.PayOrderCode.Length != 0) {
        PayOrderCode = other.PayOrderCode;
      }
      if (other.PayType != 0) {
        PayType = other.PayType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            KindId = input.ReadString();
            break;
          }
          case 32: {
            Quantity = input.ReadInt32();
            break;
          }
          case 41: {
            Amount = input.ReadDouble();
            break;
          }
          case 50: {
            PayOrderCode = input.ReadString();
            break;
          }
          case 56: {
            PayType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户的会员一览
  /// </summary>
  public sealed partial class AssociatorListResponse : pb::IMessage<AssociatorListResponse> {
    private static readonly pb::MessageParser<AssociatorListResponse> _parser = new pb::MessageParser<AssociatorListResponse>(() => new AssociatorListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssociatorListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorListResponse(AssociatorListResponse other) : this() {
      status_ = other.status_;
      associatorList_ = other.associatorList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorListResponse Clone() {
      return new AssociatorListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "associatorList" field.</summary>
    public const int AssociatorListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Associator> _repeated_associatorList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Associator.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Associator> associatorList_ = new pbc::RepeatedField<global::SP.Service.Associator>();
    /// <summary>
    ///*
    ///  会员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Associator> AssociatorList {
      get { return associatorList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssociatorListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssociatorListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!associatorList_.Equals(other.associatorList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= associatorList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      associatorList_.WriteTo(output, _repeated_associatorList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += associatorList_.CalculateSize(_repeated_associatorList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssociatorListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      associatorList_.Add(other.associatorList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            associatorList_.AddEntriesFrom(input, _repeated_associatorList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取优惠种类的请求参数
  /// </summary>
  public sealed partial class GetSysKindRequest : pb::IMessage<GetSysKindRequest> {
    private static readonly pb::MessageParser<GetSysKindRequest> _parser = new pb::MessageParser<GetSysKindRequest>(() => new GetSysKindRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSysKindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSysKindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSysKindRequest(GetSysKindRequest other) : this() {
      kind_ = other.kind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSysKindRequest Clone() {
      return new GetSysKindRequest(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private int kind_;
    /// <summary>
    ///*
    ///  优惠种类类别（100：会员 200：优惠券）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSysKindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSysKindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Kind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSysKindRequest other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Kind = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 系统优惠种类情况
  /// </summary>
  public sealed partial class SysKind : pb::IMessage<SysKind> {
    private static readonly pb::MessageParser<SysKind> _parser = new pb::MessageParser<SysKind>(() => new SysKind());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysKind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKind(SysKind other) : this() {
      kindId_ = other.kindId_;
      kind_ = other.kind_;
      quantity_ = other.quantity_;
      unit_ = other.unit_;
      price_ = other.price_;
      description_ = other.description_;
      discountValue_ = other.discountValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKind Clone() {
      return new SysKind(this);
    }

    /// <summary>Field number for the "kindId" field.</summary>
    public const int KindIdFieldNumber = 1;
    private string kindId_ = "";
    /// <summary>
    ///*
    ///  系统优惠种类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KindId {
      get { return kindId_; }
      set {
        kindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private int kind_;
    /// <summary>
    ///*
    ///  优惠种类类别（100：会员 200：优惠券）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private int quantity_;
    /// <summary>
    ///*
    ///  系统优惠种类时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 4;
    private int unit_;
    /// <summary>
    ///*
    ///  单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private double price_;
    /// <summary>
    ///*
    ///  周期内价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    ///*
    ///  优惠种类描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discountValue" field.</summary>
    public const int DiscountValueFieldNumber = 7;
    private double discountValue_;
    /// <summary>
    ///*
    ///  优惠种类的折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DiscountValue {
      get { return discountValue_; }
      set {
        discountValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SysKind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SysKind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KindId != other.KindId) return false;
      if (Kind != other.Kind) return false;
      if (Quantity != other.Quantity) return false;
      if (Unit != other.Unit) return false;
      if (Price != other.Price) return false;
      if (Description != other.Description) return false;
      if (DiscountValue != other.DiscountValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KindId.Length != 0) hash ^= KindId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DiscountValue != 0D) hash ^= DiscountValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KindId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KindId);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Kind);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quantity);
      }
      if (Unit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Unit);
      }
      if (Price != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Price);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (DiscountValue != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(DiscountValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KindId);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unit);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DiscountValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SysKind other) {
      if (other == null) {
        return;
      }
      if (other.KindId.Length != 0) {
        KindId = other.KindId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DiscountValue != 0D) {
        DiscountValue = other.DiscountValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KindId = input.ReadString();
            break;
          }
          case 16: {
            Kind = input.ReadInt32();
            break;
          }
          case 24: {
            Quantity = input.ReadInt32();
            break;
          }
          case 32: {
            Unit = input.ReadInt32();
            break;
          }
          case 41: {
            Price = input.ReadDouble();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 57: {
            DiscountValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 优惠种类一览
  /// </summary>
  public sealed partial class SysKindListResponse : pb::IMessage<SysKindListResponse> {
    private static readonly pb::MessageParser<SysKindListResponse> _parser = new pb::MessageParser<SysKindListResponse>(() => new SysKindListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysKindListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKindListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKindListResponse(SysKindListResponse other) : this() {
      status_ = other.status_;
      kindList_ = other.kindList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysKindListResponse Clone() {
      return new SysKindListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "kindList" field.</summary>
    public const int KindListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.SysKind> _repeated_kindList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.SysKind.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.SysKind> kindList_ = new pbc::RepeatedField<global::SP.Service.SysKind>();
    /// <summary>
    ///*
    ///  优惠种类列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.SysKind> KindList {
      get { return kindList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SysKindListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SysKindListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!kindList_.Equals(other.kindList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= kindList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      kindList_.WriteTo(output, _repeated_kindList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += kindList_.CalculateSize(_repeated_kindList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SysKindListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      kindList_.Add(other.kindList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            kindList_.AddEntriesFrom(input, _repeated_kindList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 个人信息的响应信息
  /// </summary>
  public sealed partial class AccountFullInfoResponse : pb::IMessage<AccountFullInfoResponse> {
    private static readonly pb::MessageParser<AccountFullInfoResponse> _parser = new pb::MessageParser<AccountFullInfoResponse>(() => new AccountFullInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountFullInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoResponse(AccountFullInfoResponse other) : this() {
      status_ = other.status_;
      avatar_ = other.avatar_;
      fullName_ = other.fullName_;
      gender_ = other.gender_;
      payPassWord_ = other.payPassWord_;
      userType_ = other.userType_;
      associatorDate_ = other.associatorDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoResponse Clone() {
      return new AccountFullInfoResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 2;
    private string avatar_ = "";
    /// <summary>
    ///*
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 3;
    private string fullName_ = "";
    /// <summary>
    ///*
    ///  昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private bool gender_;
    /// <summary>
    ///*
    ///  性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "payPassWord" field.</summary>
    public const int PayPassWordFieldNumber = 5;
    private string payPassWord_ = "";
    /// <summary>
    ///*
    ///  支付密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayPassWord {
      get { return payPassWord_; }
      set {
        payPassWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 6;
    private int userType_;
    /// <summary>
    ///*
    ///  用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "associatorDate" field.</summary>
    public const int AssociatorDateFieldNumber = 7;
    private long associatorDate_;
    /// <summary>
    ///*
    ///  会员到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AssociatorDate {
      get { return associatorDate_; }
      set {
        associatorDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountFullInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountFullInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Avatar != other.Avatar) return false;
      if (FullName != other.FullName) return false;
      if (Gender != other.Gender) return false;
      if (PayPassWord != other.PayPassWord) return false;
      if (UserType != other.UserType) return false;
      if (AssociatorDate != other.AssociatorDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Gender != false) hash ^= Gender.GetHashCode();
      if (PayPassWord.Length != 0) hash ^= PayPassWord.GetHashCode();
      if (UserType != 0) hash ^= UserType.GetHashCode();
      if (AssociatorDate != 0L) hash ^= AssociatorDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Avatar);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FullName);
      }
      if (Gender != false) {
        output.WriteRawTag(32);
        output.WriteBool(Gender);
      }
      if (PayPassWord.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PayPassWord);
      }
      if (UserType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UserType);
      }
      if (AssociatorDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AssociatorDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Gender != false) {
        size += 1 + 1;
      }
      if (PayPassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayPassWord);
      }
      if (UserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserType);
      }
      if (AssociatorDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssociatorDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountFullInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Gender != false) {
        Gender = other.Gender;
      }
      if (other.PayPassWord.Length != 0) {
        PayPassWord = other.PayPassWord;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
      if (other.AssociatorDate != 0L) {
        AssociatorDate = other.AssociatorDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            Avatar = input.ReadString();
            break;
          }
          case 26: {
            FullName = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadBool();
            break;
          }
          case 42: {
            PayPassWord = input.ReadString();
            break;
          }
          case 48: {
            UserType = input.ReadInt32();
            break;
          }
          case 56: {
            AssociatorDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 个人信息的请求信息
  /// </summary>
  public sealed partial class AccountFullInfoRequest : pb::IMessage<AccountFullInfoRequest> {
    private static readonly pb::MessageParser<AccountFullInfoRequest> _parser = new pb::MessageParser<AccountFullInfoRequest>(() => new AccountFullInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountFullInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoRequest(AccountFullInfoRequest other) : this() {
      accountId_ = other.accountId_;
      avatar_ = other.avatar_;
      fullName_ = other.fullName_;
      gender_ = other.gender_;
      userType_ = other.userType_;
      dormId_ = other.dormId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFullInfoRequest Clone() {
      return new AccountFullInfoRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 2;
    private string avatar_ = "";
    /// <summary>
    ///*
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 3;
    private string fullName_ = "";
    /// <summary>
    ///*
    ///  昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private bool gender_;
    /// <summary>
    ///*
    ///  性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 5;
    private int userType_;
    /// <summary>
    ///*
    ///  用户类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "dormId" field.</summary>
    public const int DormIdFieldNumber = 6;
    private int dormId_;
    /// <summary>
    ///*
    ///  宿舍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DormId {
      get { return dormId_; }
      set {
        dormId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountFullInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountFullInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Avatar != other.Avatar) return false;
      if (FullName != other.FullName) return false;
      if (Gender != other.Gender) return false;
      if (UserType != other.UserType) return false;
      if (DormId != other.DormId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Gender != false) hash ^= Gender.GetHashCode();
      if (UserType != 0) hash ^= UserType.GetHashCode();
      if (DormId != 0) hash ^= DormId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Avatar);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FullName);
      }
      if (Gender != false) {
        output.WriteRawTag(32);
        output.WriteBool(Gender);
      }
      if (UserType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UserType);
      }
      if (DormId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DormId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Gender != false) {
        size += 1 + 1;
      }
      if (UserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserType);
      }
      if (DormId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DormId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountFullInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Gender != false) {
        Gender = other.Gender;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
      if (other.DormId != 0) {
        DormId = other.DormId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            Avatar = input.ReadString();
            break;
          }
          case 26: {
            FullName = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadBool();
            break;
          }
          case 40: {
            UserType = input.ReadInt32();
            break;
          }
          case 48: {
            DormId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取优惠种类的请求参数
  /// </summary>
  public sealed partial class DiscountRequest : pb::IMessage<DiscountRequest> {
    private static readonly pb::MessageParser<DiscountRequest> _parser = new pb::MessageParser<DiscountRequest>(() => new DiscountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscountRequest(DiscountRequest other) : this() {
      accountId_ = other.accountId_;
      kind_ = other.kind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscountRequest Clone() {
      return new DiscountRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private int kind_;
    /// <summary>
    ///*
    ///  优惠种类类别（100：会员 200：优惠券）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Kind != other.Kind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Kind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscountRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            Kind = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取会员的请求参数
  /// </summary>
  public sealed partial class AssociatorIdRequest : pb::IMessage<AssociatorIdRequest> {
    private static readonly pb::MessageParser<AssociatorIdRequest> _parser = new pb::MessageParser<AssociatorIdRequest>(() => new AssociatorIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssociatorIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorIdRequest(AssociatorIdRequest other) : this() {
      associatorId_ = other.associatorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorIdRequest Clone() {
      return new AssociatorIdRequest(this);
    }

    /// <summary>Field number for the "associatorId" field.</summary>
    public const int AssociatorIdFieldNumber = 1;
    private string associatorId_ = "";
    /// <summary>
    ///*
    ///  会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssociatorId {
      get { return associatorId_; }
      set {
        associatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssociatorIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssociatorIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssociatorId != other.AssociatorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssociatorId.Length != 0) hash ^= AssociatorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssociatorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssociatorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssociatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssociatorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssociatorIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.AssociatorId.Length != 0) {
        AssociatorId = other.AssociatorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssociatorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 会员
  /// </summary>
  public sealed partial class AssociatorResponse : pb::IMessage<AssociatorResponse> {
    private static readonly pb::MessageParser<AssociatorResponse> _parser = new pb::MessageParser<AssociatorResponse>(() => new AssociatorResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssociatorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorResponse(AssociatorResponse other) : this() {
      status_ = other.status_;
      Associator = other.associator_ != null ? other.Associator.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssociatorResponse Clone() {
      return new AssociatorResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "associator" field.</summary>
    public const int AssociatorFieldNumber = 2;
    private global::SP.Service.Associator associator_;
    /// <summary>
    ///*
    ///  会员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Associator Associator {
      get { return associator_; }
      set {
        associator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssociatorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssociatorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Associator, other.Associator)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (associator_ != null) hash ^= Associator.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (associator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Associator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (associator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Associator);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssociatorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.associator_ != null) {
        if (associator_ == null) {
          associator_ = new global::SP.Service.Associator();
        }
        Associator.MergeFrom(other.Associator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (associator_ == null) {
              associator_ = new global::SP.Service.Associator();
            }
            input.ReadMessage(associator_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAssociatorStatusRequest : pb::IMessage<UpdateAssociatorStatusRequest> {
    private static readonly pb::MessageParser<UpdateAssociatorStatusRequest> _parser = new pb::MessageParser<UpdateAssociatorStatusRequest>(() => new UpdateAssociatorStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAssociatorStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssociatorStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssociatorStatusRequest(UpdateAssociatorStatusRequest other) : this() {
      associatorId_ = other.associatorId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAssociatorStatusRequest Clone() {
      return new UpdateAssociatorStatusRequest(this);
    }

    /// <summary>Field number for the "associatorId" field.</summary>
    public const int AssociatorIdFieldNumber = 1;
    private string associatorId_ = "";
    /// <summary>
    ///*
    ///  会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssociatorId {
      get { return associatorId_; }
      set {
        associatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///*
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAssociatorStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAssociatorStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssociatorId != other.AssociatorId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssociatorId.Length != 0) hash ^= AssociatorId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssociatorId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssociatorId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssociatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssociatorId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAssociatorStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.AssociatorId.Length != 0) {
        AssociatorId = other.AssociatorId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssociatorId = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyShoppingCartRequest : pb::IMessage<MyShoppingCartRequest> {
    private static readonly pb::MessageParser<MyShoppingCartRequest> _parser = new pb::MessageParser<MyShoppingCartRequest>(() => new MyShoppingCartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyShoppingCartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyShoppingCartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyShoppingCartRequest(MyShoppingCartRequest other) : this() {
      accountId_ = other.accountId_;
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyShoppingCartRequest Clone() {
      return new MyShoppingCartRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///*
    ///  订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyShoppingCartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyShoppingCartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyShoppingCartRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 支付密码的请求参数
  /// </summary>
  public sealed partial class AccountPayPwdRequest : pb::IMessage<AccountPayPwdRequest> {
    private static readonly pb::MessageParser<AccountPayPwdRequest> _parser = new pb::MessageParser<AccountPayPwdRequest>(() => new AccountPayPwdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountPayPwdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPayPwdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPayPwdRequest(AccountPayPwdRequest other) : this() {
      accountId_ = other.accountId_;
      payPwd_ = other.payPwd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPayPwdRequest Clone() {
      return new AccountPayPwdRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  会员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payPwd" field.</summary>
    public const int PayPwdFieldNumber = 2;
    private string payPwd_ = "";
    /// <summary>
    ///*
    ///  支付密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayPwd {
      get { return payPwd_; }
      set {
        payPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountPayPwdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountPayPwdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PayPwd != other.PayPwd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PayPwd.Length != 0) hash ^= PayPwd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (PayPwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PayPwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PayPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayPwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountPayPwdRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PayPwd.Length != 0) {
        PayPwd = other.PayPwd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            PayPwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 绑定账号的请求参数
  /// </summary>
  public sealed partial class BingAccountRequest : pb::IMessage<BingAccountRequest> {
    private static readonly pb::MessageParser<BingAccountRequest> _parser = new pb::MessageParser<BingAccountRequest>(() => new BingAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BingAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BingAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BingAccountRequest(BingAccountRequest other) : this() {
      accountId_ = other.accountId_;
      otherType_ = other.otherType_;
      otherAccount_ = other.otherAccount_;
      avatar_ = other.avatar_;
      fullName_ = other.fullName_;
      gender_ = other.gender_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BingAccountRequest Clone() {
      return new BingAccountRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherType" field.</summary>
    public const int OtherTypeFieldNumber = 2;
    private int otherType_;
    /// <summary>
    ///*
    /// 第三方账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherType {
      get { return otherType_; }
      set {
        otherType_ = value;
      }
    }

    /// <summary>Field number for the "otherAccount" field.</summary>
    public const int OtherAccountFieldNumber = 3;
    private string otherAccount_ = "";
    /// <summary>
    ///*
    ///  第三方账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherAccount {
      get { return otherAccount_; }
      set {
        otherAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    /// <summary>
    ///*
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 5;
    private string fullName_ = "";
    /// <summary>
    ///*
    ///  昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private bool gender_;
    /// <summary>
    ///*
    ///  性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BingAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BingAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OtherType != other.OtherType) return false;
      if (OtherAccount != other.OtherAccount) return false;
      if (Avatar != other.Avatar) return false;
      if (FullName != other.FullName) return false;
      if (Gender != other.Gender) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OtherType != 0) hash ^= OtherType.GetHashCode();
      if (OtherAccount.Length != 0) hash ^= OtherAccount.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Gender != false) hash ^= Gender.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OtherType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OtherType);
      }
      if (OtherAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OtherAccount);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FullName);
      }
      if (Gender != false) {
        output.WriteRawTag(48);
        output.WriteBool(Gender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OtherType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherType);
      }
      if (OtherAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherAccount);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Gender != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BingAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OtherType != 0) {
        OtherType = other.OtherType;
      }
      if (other.OtherAccount.Length != 0) {
        OtherAccount = other.OtherAccount;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Gender != false) {
        Gender = other.Gender;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            OtherType = input.ReadInt32();
            break;
          }
          case 26: {
            OtherAccount = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 42: {
            FullName = input.ReadString();
            break;
          }
          case 48: {
            Gender = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 创建第三方账号的请求参数
  /// </summary>
  public sealed partial class OtherAccountRequest : pb::IMessage<OtherAccountRequest> {
    private static readonly pb::MessageParser<OtherAccountRequest> _parser = new pb::MessageParser<OtherAccountRequest>(() => new OtherAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherAccountRequest(OtherAccountRequest other) : this() {
      mobilePhone_ = other.mobilePhone_;
      otherType_ = other.otherType_;
      otherAccount_ = other.otherAccount_;
      avatar_ = other.avatar_;
      fullName_ = other.fullName_;
      gender_ = other.gender_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherAccountRequest Clone() {
      return new OtherAccountRequest(this);
    }

    /// <summary>Field number for the "mobilePhone" field.</summary>
    public const int MobilePhoneFieldNumber = 1;
    private string mobilePhone_ = "";
    /// <summary>
    ///*
    ///  注册电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MobilePhone {
      get { return mobilePhone_; }
      set {
        mobilePhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherType" field.</summary>
    public const int OtherTypeFieldNumber = 2;
    private int otherType_;
    /// <summary>
    ///*
    /// 第三方账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherType {
      get { return otherType_; }
      set {
        otherType_ = value;
      }
    }

    /// <summary>Field number for the "otherAccount" field.</summary>
    public const int OtherAccountFieldNumber = 3;
    private string otherAccount_ = "";
    /// <summary>
    ///*
    ///  第三方账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherAccount {
      get { return otherAccount_; }
      set {
        otherAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    /// <summary>
    ///*
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 5;
    private string fullName_ = "";
    /// <summary>
    ///*
    ///  昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private bool gender_;
    /// <summary>
    ///*
    ///  性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MobilePhone != other.MobilePhone) return false;
      if (OtherType != other.OtherType) return false;
      if (OtherAccount != other.OtherAccount) return false;
      if (Avatar != other.Avatar) return false;
      if (FullName != other.FullName) return false;
      if (Gender != other.Gender) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MobilePhone.Length != 0) hash ^= MobilePhone.GetHashCode();
      if (OtherType != 0) hash ^= OtherType.GetHashCode();
      if (OtherAccount.Length != 0) hash ^= OtherAccount.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Gender != false) hash ^= Gender.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MobilePhone.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MobilePhone);
      }
      if (OtherType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OtherType);
      }
      if (OtherAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OtherAccount);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FullName);
      }
      if (Gender != false) {
        output.WriteRawTag(48);
        output.WriteBool(Gender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MobilePhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MobilePhone);
      }
      if (OtherType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherType);
      }
      if (OtherAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherAccount);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Gender != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.MobilePhone.Length != 0) {
        MobilePhone = other.MobilePhone;
      }
      if (other.OtherType != 0) {
        OtherType = other.OtherType;
      }
      if (other.OtherAccount.Length != 0) {
        OtherAccount = other.OtherAccount;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Gender != false) {
        Gender = other.Gender;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MobilePhone = input.ReadString();
            break;
          }
          case 16: {
            OtherType = input.ReadInt32();
            break;
          }
          case 26: {
            OtherAccount = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 42: {
            FullName = input.ReadString();
            break;
          }
          case 48: {
            Gender = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 根据第三方账号获取账户信息的请求参数
  /// </summary>
  public sealed partial class GetOtherAccountRequest : pb::IMessage<GetOtherAccountRequest> {
    private static readonly pb::MessageParser<GetOtherAccountRequest> _parser = new pb::MessageParser<GetOtherAccountRequest>(() => new GetOtherAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOtherAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOtherAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOtherAccountRequest(GetOtherAccountRequest other) : this() {
      otherType_ = other.otherType_;
      otherAccount_ = other.otherAccount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOtherAccountRequest Clone() {
      return new GetOtherAccountRequest(this);
    }

    /// <summary>Field number for the "otherType" field.</summary>
    public const int OtherTypeFieldNumber = 2;
    private int otherType_;
    /// <summary>
    ///*
    /// 第三方账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherType {
      get { return otherType_; }
      set {
        otherType_ = value;
      }
    }

    /// <summary>Field number for the "otherAccount" field.</summary>
    public const int OtherAccountFieldNumber = 3;
    private string otherAccount_ = "";
    /// <summary>
    ///*
    ///  第三方账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherAccount {
      get { return otherAccount_; }
      set {
        otherAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOtherAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOtherAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OtherType != other.OtherType) return false;
      if (OtherAccount != other.OtherAccount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OtherType != 0) hash ^= OtherType.GetHashCode();
      if (OtherAccount.Length != 0) hash ^= OtherAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OtherType);
      }
      if (OtherAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OtherAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherType);
      }
      if (OtherAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOtherAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.OtherType != 0) {
        OtherType = other.OtherType;
      }
      if (other.OtherAccount.Length != 0) {
        OtherAccount = other.OtherAccount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            OtherType = input.ReadInt32();
            break;
          }
          case 26: {
            OtherAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更换的请求参数
  /// </summary>
  public sealed partial class AccountMobileRequest : pb::IMessage<AccountMobileRequest> {
    private static readonly pb::MessageParser<AccountMobileRequest> _parser = new pb::MessageParser<AccountMobileRequest>(() => new AccountMobileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountMobileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMobileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMobileRequest(AccountMobileRequest other) : this() {
      accountId_ = other.accountId_;
      mobilePhone_ = other.mobilePhone_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMobileRequest Clone() {
      return new AccountMobileRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobilePhone" field.</summary>
    public const int MobilePhoneFieldNumber = 2;
    private string mobilePhone_ = "";
    /// <summary>
    ///*
    ///  注册电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MobilePhone {
      get { return mobilePhone_; }
      set {
        mobilePhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountMobileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountMobileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (MobilePhone != other.MobilePhone) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (MobilePhone.Length != 0) hash ^= MobilePhone.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (MobilePhone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MobilePhone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (MobilePhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MobilePhone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountMobileRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.MobilePhone.Length != 0) {
        MobilePhone = other.MobilePhone;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            MobilePhone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新用户身份的请求参数
  /// </summary>
  public sealed partial class AccountIDRequest : pb::IMessage<AccountIDRequest> {
    private static readonly pb::MessageParser<AccountIDRequest> _parser = new pb::MessageParser<AccountIDRequest>(() => new AccountIDRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountIDRequest(AccountIDRequest other) : this() {
      userType_ = other.userType_;
      dormId_ = other.dormId_;
      accountId_ = other.accountId_;
      fullName_ = other.fullName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountIDRequest Clone() {
      return new AccountIDRequest(this);
    }

    /// <summary>Field number for the "userType" field.</summary>
    public const int UserTypeFieldNumber = 1;
    private int userType_;
    /// <summary>
    ///*
    ///  用户身份类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "dormId" field.</summary>
    public const int DormIdFieldNumber = 2;
    private int dormId_;
    /// <summary>
    ///*
    /// 用户宿舍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DormId {
      get { return dormId_; }
      set {
        dormId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullName" field.</summary>
    public const int FullNameFieldNumber = 4;
    private string fullName_ = "";
    /// <summary>
    ///*
    ///  用户昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserType != other.UserType) return false;
      if (DormId != other.DormId) return false;
      if (AccountId != other.AccountId) return false;
      if (FullName != other.FullName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserType != 0) hash ^= UserType.GetHashCode();
      if (DormId != 0) hash ^= DormId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserType);
      }
      if (DormId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DormId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FullName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserType);
      }
      if (DormId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DormId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountIDRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
      if (other.DormId != 0) {
        DormId = other.DormId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserType = input.ReadInt32();
            break;
          }
          case 16: {
            DormId = input.ReadInt32();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
          case 34: {
            FullName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 用户ID的请求参数
  /// </summary>
  public sealed partial class ApplyPartnerRequest : pb::IMessage<ApplyPartnerRequest> {
    private static readonly pb::MessageParser<ApplyPartnerRequest> _parser = new pb::MessageParser<ApplyPartnerRequest>(() => new ApplyPartnerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyPartnerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.AccountModelReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPartnerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPartnerRequest(ApplyPartnerRequest other) : this() {
      accountId_ = other.accountId_;
      dormId_ = other.dormId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPartnerRequest Clone() {
      return new ApplyPartnerRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    ///  AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dormId" field.</summary>
    public const int DormIdFieldNumber = 2;
    private int dormId_;
    /// <summary>
    ///*
    /// 用户宿舍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DormId {
      get { return dormId_; }
      set {
        dormId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyPartnerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyPartnerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (DormId != other.DormId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (DormId != 0) hash ^= DormId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (DormId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DormId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (DormId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DormId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyPartnerRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.DormId != 0) {
        DormId = other.DormId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            DormId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
