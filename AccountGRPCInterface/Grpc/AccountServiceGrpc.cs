// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SP.Service {
  public static partial class AccountService
  {
    static readonly string __ServiceName = "SP.Service.AccountService";

    static readonly grpc::Marshaller<global::SP.Service.RegistRequest> __Marshaller_RegistRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.RegistRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountResultResponse> __Marshaller_AccountResultResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountResultResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.UpdateAccountRequest> __Marshaller_UpdateAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.UpdateAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.LoginRequest> __Marshaller_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountIdRequest> __Marshaller_AccountIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountResponse> __Marshaller_AccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountRequest> __Marshaller_AccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddressRequest> __Marshaller_AddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddressStatusRequest> __Marshaller_AddressStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddressStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddressDormRequest> __Marshaller_AddressDormRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddressDormRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddressListResponse> __Marshaller_AddressListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddressListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.DelAddressRequest> __Marshaller_DelAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.DelAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TokenKeyRequest> __Marshaller_TokenKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TokenKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccessTokenResponse> __Marshaller_AccessTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccessTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccessTokenRequest> __Marshaller_AccessTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccessTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TokenIdRequest> __Marshaller_TokenIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TokenIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.RegionDataRequest> __Marshaller_RegionDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.RegionDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.RegionListResponse> __Marshaller_RegionListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.RegionListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.RegionIDRequest> __Marshaller_RegionIDRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.RegionIDRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.RegionDataResponse> __Marshaller_RegionDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.RegionDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartRequest> __Marshaller_ShoppingCartRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartResultResponse> __Marshaller_ShoppingCartResultResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartResultResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.GetShoppingCartRequest> __Marshaller_GetShoppingCartRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.GetShoppingCartRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartListResponse> __Marshaller_ShoppingCartListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.MyShoppingCartRequest> __Marshaller_MyShoppingCartRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.MyShoppingCartRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartCountResponse> __Marshaller_ShoppingCartCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartQuantityRequest> __Marshaller_ShoppingCartQuantityRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartQuantityRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShoppingCartOrderIdRequest> __Marshaller_ShoppingCartOrderIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShoppingCartOrderIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddressResponse> __Marshaller_AddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddAuthenticationRequest> __Marshaller_AddAuthenticationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddAuthenticationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.GetVerifyCodeRequest> __Marshaller_GetVerifyCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.GetVerifyCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.VerifyCodeResponse> __Marshaller_VerifyCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.VerifyCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.UpdateAuthenticationRequest> __Marshaller_UpdateAuthenticationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.UpdateAuthenticationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddAssociatorRequest> __Marshaller_AddAssociatorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddAssociatorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AssociatorResponse> __Marshaller_AssociatorResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AssociatorResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.UpdateAssociatorStatusRequest> __Marshaller_UpdateAssociatorStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.UpdateAssociatorStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AssociatorListResponse> __Marshaller_AssociatorListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AssociatorListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AssociatorIdRequest> __Marshaller_AssociatorIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AssociatorIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.GetSysKindRequest> __Marshaller_GetSysKindRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.GetSysKindRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SysKindListResponse> __Marshaller_SysKindListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SysKindListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountFullInfoResponse> __Marshaller_AccountFullInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountFullInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountFullInfoRequest> __Marshaller_AccountFullInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountFullInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.DiscountRequest> __Marshaller_DiscountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.DiscountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountPayPwdRequest> __Marshaller_AccountPayPwdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountPayPwdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountMobileRequest> __Marshaller_AccountMobileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountMobileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.BingAccountRequest> __Marshaller_BingAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.BingAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OtherAccountRequest> __Marshaller_OtherAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OtherAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.GetOtherAccountRequest> __Marshaller_GetOtherAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.GetOtherAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountIDRequest> __Marshaller_AccountIDRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountIDRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ApplyPartnerRequest> __Marshaller_ApplyPartnerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ApplyPartnerRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::SP.Service.RegistRequest, global::SP.Service.AccountResultResponse> __Method_RegistAccount = new grpc::Method<global::SP.Service.RegistRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegistAccount",
        __Marshaller_RegistRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.UpdateAccountRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccount = new grpc::Method<global::SP.Service.UpdateAccountRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccount",
        __Marshaller_UpdateAccountRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.LoginRequest, global::SP.Service.AccountResultResponse> __Method_ValidateLogin = new grpc::Method<global::SP.Service.LoginRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateLogin",
        __Marshaller_LoginRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AccountResponse> __Method_GetAccountDetail = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountDetail",
        __Marshaller_AccountIdRequest,
        __Marshaller_AccountResponse);

    static readonly grpc::Method<global::SP.Service.AccountRequest, global::SP.Service.AccountResponse> __Method_GetAccount = new grpc::Method<global::SP.Service.AccountRequest, global::SP.Service.AccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_AccountRequest,
        __Marshaller_AccountResponse);

    static readonly grpc::Method<global::SP.Service.AddressRequest, global::SP.Service.AccountResultResponse> __Method_AddAccountAddress = new grpc::Method<global::SP.Service.AddressRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccountAddress",
        __Marshaller_AddressRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AddressRequest, global::SP.Service.AccountResultResponse> __Method_EditAccountAddress = new grpc::Method<global::SP.Service.AddressRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditAccountAddress",
        __Marshaller_AddressRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AddressStatusRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAddressStatus = new grpc::Method<global::SP.Service.AddressStatusRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAddressStatus",
        __Marshaller_AddressStatusRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AddressDormRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAddressDorm = new grpc::Method<global::SP.Service.AddressDormRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAddressDorm",
        __Marshaller_AddressDormRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AddressListResponse> __Method_GetAddressList = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AddressListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAddressList",
        __Marshaller_AccountIdRequest,
        __Marshaller_AddressListResponse);

    static readonly grpc::Method<global::SP.Service.DelAddressRequest, global::SP.Service.AccountResultResponse> __Method_DelAddress = new grpc::Method<global::SP.Service.DelAddressRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelAddress",
        __Marshaller_DelAddressRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.TokenKeyRequest, global::SP.Service.AccessTokenResponse> __Method_GetAccessToken = new grpc::Method<global::SP.Service.TokenKeyRequest, global::SP.Service.AccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessToken",
        __Marshaller_TokenKeyRequest,
        __Marshaller_AccessTokenResponse);

    static readonly grpc::Method<global::SP.Service.TokenKeyRequest, global::SP.Service.AccessTokenResponse> __Method_GetAccessTokenByRefreshToken = new grpc::Method<global::SP.Service.TokenKeyRequest, global::SP.Service.AccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccessTokenByRefreshToken",
        __Marshaller_TokenKeyRequest,
        __Marshaller_AccessTokenResponse);

    static readonly grpc::Method<global::SP.Service.AccessTokenRequest, global::SP.Service.AccessTokenResponse> __Method_AddAccessToken = new grpc::Method<global::SP.Service.AccessTokenRequest, global::SP.Service.AccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccessToken",
        __Marshaller_AccessTokenRequest,
        __Marshaller_AccessTokenResponse);

    static readonly grpc::Method<global::SP.Service.TokenIdRequest, global::SP.Service.AccessTokenResponse> __Method_RemoveAccessToken = new grpc::Method<global::SP.Service.TokenIdRequest, global::SP.Service.AccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAccessToken",
        __Marshaller_TokenIdRequest,
        __Marshaller_AccessTokenResponse);

    static readonly grpc::Method<global::SP.Service.RegionDataRequest, global::SP.Service.RegionListResponse> __Method_GetRegionDataList = new grpc::Method<global::SP.Service.RegionDataRequest, global::SP.Service.RegionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegionDataList",
        __Marshaller_RegionDataRequest,
        __Marshaller_RegionListResponse);

    static readonly grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionDataResponse> __Method_GetRegionData = new grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegionData",
        __Marshaller_RegionIDRequest,
        __Marshaller_RegionDataResponse);

    static readonly grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionListResponse> __Method_GetChildRegionData = new grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChildRegionData",
        __Marshaller_RegionIDRequest,
        __Marshaller_RegionListResponse);

    static readonly grpc::Method<global::SP.Service.ShoppingCartRequest, global::SP.Service.ShoppingCartResultResponse> __Method_AddShoppingCart = new grpc::Method<global::SP.Service.ShoppingCartRequest, global::SP.Service.ShoppingCartResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddShoppingCart",
        __Marshaller_ShoppingCartRequest,
        __Marshaller_ShoppingCartResultResponse);

    static readonly grpc::Method<global::SP.Service.GetShoppingCartRequest, global::SP.Service.ShoppingCartListResponse> __Method_GetMyShoppingCartList = new grpc::Method<global::SP.Service.GetShoppingCartRequest, global::SP.Service.ShoppingCartListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMyShoppingCartList",
        __Marshaller_GetShoppingCartRequest,
        __Marshaller_ShoppingCartListResponse);

    static readonly grpc::Method<global::SP.Service.MyShoppingCartRequest, global::SP.Service.ShoppingCartListResponse> __Method_GetMyShoppingCartListByOrderId = new grpc::Method<global::SP.Service.MyShoppingCartRequest, global::SP.Service.ShoppingCartListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMyShoppingCartListByOrderId",
        __Marshaller_MyShoppingCartRequest,
        __Marshaller_ShoppingCartListResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShoppingCartCountResponse> __Method_GetMyShoppingCartCount = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShoppingCartCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMyShoppingCartCount",
        __Marshaller_AccountIdRequest,
        __Marshaller_ShoppingCartCountResponse);

    static readonly grpc::Method<global::SP.Service.ShoppingCartQuantityRequest, global::SP.Service.ShoppingCartResultResponse> __Method_UpdateShoppingCartQuantity = new grpc::Method<global::SP.Service.ShoppingCartQuantityRequest, global::SP.Service.ShoppingCartResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateShoppingCartQuantity",
        __Marshaller_ShoppingCartQuantityRequest,
        __Marshaller_ShoppingCartResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShoppingCartResultResponse> __Method_UpdateShoppingCartEnabled = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShoppingCartResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateShoppingCartEnabled",
        __Marshaller_AccountIdRequest,
        __Marshaller_ShoppingCartResultResponse);

    static readonly grpc::Method<global::SP.Service.ShoppingCartOrderIdRequest, global::SP.Service.ShoppingCartResultResponse> __Method_UpdateShoppingCartOrderId = new grpc::Method<global::SP.Service.ShoppingCartOrderIdRequest, global::SP.Service.ShoppingCartResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateShoppingCartOrderId",
        __Marshaller_ShoppingCartOrderIdRequest,
        __Marshaller_ShoppingCartResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.RegionListResponse> __Method_GetSelectedRegionDataList = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.RegionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSelectedRegionDataList",
        __Marshaller_AccountIdRequest,
        __Marshaller_RegionListResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AddressResponse> __Method_GetDefaultSelectedAddress = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDefaultSelectedAddress",
        __Marshaller_AccountIdRequest,
        __Marshaller_AddressResponse);

    static readonly grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionListResponse> __Method_GetChildRegionDataList = new grpc::Method<global::SP.Service.RegionIDRequest, global::SP.Service.RegionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChildRegionDataList",
        __Marshaller_RegionIDRequest,
        __Marshaller_RegionListResponse);

    static readonly grpc::Method<global::SP.Service.AddAuthenticationRequest, global::SP.Service.AccountResultResponse> __Method_AddAccountAuthentication = new grpc::Method<global::SP.Service.AddAuthenticationRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccountAuthentication",
        __Marshaller_AddAuthenticationRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.GetVerifyCodeRequest, global::SP.Service.VerifyCodeResponse> __Method_GetValidVerifyCodeByAccount = new grpc::Method<global::SP.Service.GetVerifyCodeRequest, global::SP.Service.VerifyCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetValidVerifyCodeByAccount",
        __Marshaller_GetVerifyCodeRequest,
        __Marshaller_VerifyCodeResponse);

    static readonly grpc::Method<global::SP.Service.UpdateAuthenticationRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAuthStatusByAccount = new grpc::Method<global::SP.Service.UpdateAuthenticationRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAuthStatusByAccount",
        __Marshaller_UpdateAuthenticationRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AddAssociatorRequest, global::SP.Service.AssociatorResponse> __Method_AddAssociator = new grpc::Method<global::SP.Service.AddAssociatorRequest, global::SP.Service.AssociatorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAssociator",
        __Marshaller_AddAssociatorRequest,
        __Marshaller_AssociatorResponse);

    static readonly grpc::Method<global::SP.Service.UpdateAssociatorStatusRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAssociatorStatus = new grpc::Method<global::SP.Service.UpdateAssociatorStatusRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAssociatorStatus",
        __Marshaller_UpdateAssociatorStatusRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AssociatorListResponse> __Method_GetAssociatorByAccountId = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AssociatorListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssociatorByAccountId",
        __Marshaller_AccountIdRequest,
        __Marshaller_AssociatorListResponse);

    static readonly grpc::Method<global::SP.Service.AssociatorIdRequest, global::SP.Service.AssociatorResponse> __Method_GetAssociatorById = new grpc::Method<global::SP.Service.AssociatorIdRequest, global::SP.Service.AssociatorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssociatorById",
        __Marshaller_AssociatorIdRequest,
        __Marshaller_AssociatorResponse);

    static readonly grpc::Method<global::SP.Service.GetSysKindRequest, global::SP.Service.SysKindListResponse> __Method_GetSysKindList = new grpc::Method<global::SP.Service.GetSysKindRequest, global::SP.Service.SysKindListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSysKindList",
        __Marshaller_GetSysKindRequest,
        __Marshaller_SysKindListResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AccountFullInfoResponse> __Method_GetAccountFullInfo = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.AccountFullInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountFullInfo",
        __Marshaller_AccountIdRequest,
        __Marshaller_AccountFullInfoResponse);

    static readonly grpc::Method<global::SP.Service.AccountFullInfoRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccountFullInfo = new grpc::Method<global::SP.Service.AccountFullInfoRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountFullInfo",
        __Marshaller_AccountFullInfoRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.DiscountRequest, global::SP.Service.AssociatorListResponse> __Method_GetDiscountByAccountId = new grpc::Method<global::SP.Service.DiscountRequest, global::SP.Service.AssociatorListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDiscountByAccountId",
        __Marshaller_DiscountRequest,
        __Marshaller_AssociatorListResponse);

    static readonly grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse> __Method_SetAccountPayPwd = new grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAccountPayPwd",
        __Marshaller_AccountPayPwdRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccountPayPwd = new grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountPayPwd",
        __Marshaller_AccountPayPwdRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccountLoginPwd = new grpc::Method<global::SP.Service.AccountPayPwdRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountLoginPwd",
        __Marshaller_AccountPayPwdRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountMobileRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccountMobile = new grpc::Method<global::SP.Service.AccountMobileRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountMobile",
        __Marshaller_AccountMobileRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.BingAccountRequest, global::SP.Service.AccountResultResponse> __Method_BindOtherAccount = new grpc::Method<global::SP.Service.BingAccountRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BindOtherAccount",
        __Marshaller_BingAccountRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.OtherAccountRequest, global::SP.Service.AccountResultResponse> __Method_CreateOtherAccount = new grpc::Method<global::SP.Service.OtherAccountRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOtherAccount",
        __Marshaller_OtherAccountRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.GetOtherAccountRequest, global::SP.Service.AccountResponse> __Method_GetOtherAccount = new grpc::Method<global::SP.Service.GetOtherAccountRequest, global::SP.Service.AccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOtherAccount",
        __Marshaller_GetOtherAccountRequest,
        __Marshaller_AccountResponse);

    static readonly grpc::Method<global::SP.Service.AccountIDRequest, global::SP.Service.AccountResultResponse> __Method_UpdateAccountIDInfo = new grpc::Method<global::SP.Service.AccountIDRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountIDInfo",
        __Marshaller_AccountIDRequest,
        __Marshaller_AccountResultResponse);

    static readonly grpc::Method<global::SP.Service.ApplyPartnerRequest, global::SP.Service.AccountResultResponse> __Method_ApplyPartner = new grpc::Method<global::SP.Service.ApplyPartnerRequest, global::SP.Service.AccountResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApplyPartner",
        __Marshaller_ApplyPartnerRequest,
        __Marshaller_AccountResultResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SP.Service.AccountServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AccountService</summary>
    public abstract partial class AccountServiceBase
    {
      /// <summary>
      ///*
      /// 注册账户
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> RegistAccount(global::SP.Service.RegistRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新注册账户
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccount(global::SP.Service.UpdateAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 验证登陆密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> ValidateLogin(global::SP.Service.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResponse> GetAccountDetail(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResponse> GetAccount(global::SP.Service.AccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加用户地址
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> AddAccountAddress(global::SP.Service.AddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 编辑用户地址
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> EditAccountAddress(global::SP.Service.AddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新用户地址状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAddressStatus(global::SP.Service.AddressStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新用户地址
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAddressDorm(global::SP.Service.AddressDormRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取用户地址列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AddressListResponse> GetAddressList(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 删除用户地址
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> DelAddress(global::SP.Service.DelAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取AccessToken
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccessTokenResponse> GetAccessToken(global::SP.Service.TokenKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取刷新Token
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccessTokenResponse> GetAccessTokenByRefreshToken(global::SP.Service.TokenKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加AccessToken
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccessTokenResponse> AddAccessToken(global::SP.Service.AccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 删除AccessToken
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccessTokenResponse> RemoveAccessToken(global::SP.Service.TokenIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取区域
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.RegionListResponse> GetRegionDataList(global::SP.Service.RegionDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.RegionDataResponse> GetRegionData(global::SP.Service.RegionIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.RegionListResponse> GetChildRegionData(global::SP.Service.RegionIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加购物车
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartResultResponse> AddShoppingCart(global::SP.Service.ShoppingCartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartList(global::SP.Service.GetShoppingCartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartListByOrderId(global::SP.Service.MyShoppingCartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartCountResponse> GetMyShoppingCartCount(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新购物数量
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartQuantity(global::SP.Service.ShoppingCartQuantityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新购物车的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartEnabled(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新购物车的订单ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartOrderId(global::SP.Service.ShoppingCartOrderIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取表头可选择的区域
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.RegionListResponse> GetSelectedRegionDataList(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取用户默认的地址列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AddressResponse> GetDefaultSelectedAddress(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取下级区域的列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.RegionListResponse> GetChildRegionDataList(global::SP.Service.RegionIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加认证方式
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> AddAccountAuthentication(global::SP.Service.AddAuthenticationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取验证码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.VerifyCodeResponse> GetValidVerifyCodeByAccount(global::SP.Service.GetVerifyCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新认证方式的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAuthStatusByAccount(global::SP.Service.UpdateAuthenticationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加会员
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AssociatorResponse> AddAssociator(global::SP.Service.AddAssociatorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新会员的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAssociatorStatus(global::SP.Service.UpdateAssociatorStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定账户的会员
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AssociatorListResponse> GetAssociatorByAccountId(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定的会员
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AssociatorResponse> GetAssociatorById(global::SP.Service.AssociatorIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定的系统种类
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SysKindListResponse> GetSysKindList(global::SP.Service.GetSysKindRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取个人信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountFullInfoResponse> GetAccountFullInfo(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新个人信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccountFullInfo(global::SP.Service.AccountFullInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取指定账户的优惠
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AssociatorListResponse> GetDiscountByAccountId(global::SP.Service.DiscountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 设置支付密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> SetAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 修改支付密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccountLoginPwd(global::SP.Service.AccountPayPwdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccountMobile(global::SP.Service.AccountMobileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 绑定第三方账号
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> BindOtherAccount(global::SP.Service.BingAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 创建第三方账号
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> CreateOtherAccount(global::SP.Service.OtherAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取第三方账号
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResponse> GetOtherAccount(global::SP.Service.GetOtherAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新用户身份
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> UpdateAccountIDInfo(global::SP.Service.AccountIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 成为合伙人
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AccountResultResponse> ApplyPartner(global::SP.Service.ApplyPartnerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AccountService</summary>
    public partial class AccountServiceClient : grpc::ClientBase<AccountServiceClient>
    {
      /// <summary>Creates a new client for AccountService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AccountServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AccountService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AccountServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AccountServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AccountServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse RegistAccount(global::SP.Service.RegistRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RegistAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse RegistAccount(global::SP.Service.RegistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegistAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> RegistAccountAsync(global::SP.Service.RegistRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RegistAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> RegistAccountAsync(global::SP.Service.RegistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegistAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccount(global::SP.Service.UpdateAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccount(global::SP.Service.UpdateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountAsync(global::SP.Service.UpdateAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新注册账户
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountAsync(global::SP.Service.UpdateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse ValidateLogin(global::SP.Service.LoginRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse ValidateLogin(global::SP.Service.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateLogin, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> ValidateLoginAsync(global::SP.Service.LoginRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> ValidateLoginAsync(global::SP.Service.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateLogin, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetAccountDetail(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetAccountDetail(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetAccountDetailAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetAccountDetailAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetAccount(global::SP.Service.AccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetAccount(global::SP.Service.AccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetAccountAsync(global::SP.Service.AccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetAccountAsync(global::SP.Service.AccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse AddAccountAddress(global::SP.Service.AddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccountAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse AddAccountAddress(global::SP.Service.AddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccountAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> AddAccountAddressAsync(global::SP.Service.AddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccountAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> AddAccountAddressAsync(global::SP.Service.AddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccountAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 编辑用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse EditAccountAddress(global::SP.Service.AddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EditAccountAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 编辑用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse EditAccountAddress(global::SP.Service.AddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditAccountAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 编辑用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> EditAccountAddressAsync(global::SP.Service.AddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EditAccountAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 编辑用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> EditAccountAddressAsync(global::SP.Service.AddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditAccountAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户地址状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAddressStatus(global::SP.Service.AddressStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAddressStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户地址状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAddressStatus(global::SP.Service.AddressStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAddressStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户地址状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAddressStatusAsync(global::SP.Service.AddressStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAddressStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户地址状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAddressStatusAsync(global::SP.Service.AddressStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAddressStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAddressDorm(global::SP.Service.AddressDormRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAddressDorm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAddressDorm(global::SP.Service.AddressDormRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAddressDorm, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAddressDormAsync(global::SP.Service.AddressDormRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAddressDormAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAddressDormAsync(global::SP.Service.AddressDormRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAddressDorm, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddressListResponse GetAddressList(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAddressList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddressListResponse GetAddressList(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAddressList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddressListResponse> GetAddressListAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAddressListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddressListResponse> GetAddressListAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAddressList, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse DelAddress(global::SP.Service.DelAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse DelAddress(global::SP.Service.DelAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> DelAddressAsync(global::SP.Service.DelAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除用户地址
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> DelAddressAsync(global::SP.Service.DelAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse GetAccessToken(global::SP.Service.TokenKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse GetAccessToken(global::SP.Service.TokenKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> GetAccessTokenAsync(global::SP.Service.TokenKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> GetAccessTokenAsync(global::SP.Service.TokenKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取刷新Token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse GetAccessTokenByRefreshToken(global::SP.Service.TokenKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccessTokenByRefreshToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取刷新Token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse GetAccessTokenByRefreshToken(global::SP.Service.TokenKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccessTokenByRefreshToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取刷新Token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> GetAccessTokenByRefreshTokenAsync(global::SP.Service.TokenKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccessTokenByRefreshTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取刷新Token
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> GetAccessTokenByRefreshTokenAsync(global::SP.Service.TokenKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccessTokenByRefreshToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse AddAccessToken(global::SP.Service.AccessTokenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse AddAccessToken(global::SP.Service.AccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> AddAccessTokenAsync(global::SP.Service.AccessTokenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> AddAccessTokenAsync(global::SP.Service.AccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse RemoveAccessToken(global::SP.Service.TokenIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccessTokenResponse RemoveAccessToken(global::SP.Service.TokenIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> RemoveAccessTokenAsync(global::SP.Service.TokenIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除AccessToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccessTokenResponse> RemoveAccessTokenAsync(global::SP.Service.TokenIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAccessToken, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetRegionDataList(global::SP.Service.RegionDataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRegionDataList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetRegionDataList(global::SP.Service.RegionDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetRegionDataListAsync(global::SP.Service.RegionDataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRegionDataListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetRegionDataListAsync(global::SP.Service.RegionDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionDataResponse GetRegionData(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRegionData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionDataResponse GetRegionData(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegionData, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionDataResponse> GetRegionDataAsync(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetRegionDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionDataResponse> GetRegionDataAsync(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegionData, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetChildRegionData(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetChildRegionData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetChildRegionData(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChildRegionData, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetChildRegionDataAsync(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetChildRegionDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetChildRegionDataAsync(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChildRegionData, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加购物车
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse AddShoppingCart(global::SP.Service.ShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShoppingCart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加购物车
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse AddShoppingCart(global::SP.Service.ShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddShoppingCart, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加购物车
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> AddShoppingCartAsync(global::SP.Service.ShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShoppingCartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加购物车
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> AddShoppingCartAsync(global::SP.Service.ShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddShoppingCart, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartListResponse GetMyShoppingCartList(global::SP.Service.GetShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartListResponse GetMyShoppingCartList(global::SP.Service.GetShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMyShoppingCartList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartListAsync(global::SP.Service.GetShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartListAsync(global::SP.Service.GetShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMyShoppingCartList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartListResponse GetMyShoppingCartListByOrderId(global::SP.Service.MyShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartListByOrderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartListResponse GetMyShoppingCartListByOrderId(global::SP.Service.MyShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMyShoppingCartListByOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartListByOrderIdAsync(global::SP.Service.MyShoppingCartRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartListByOrderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartListResponse> GetMyShoppingCartListByOrderIdAsync(global::SP.Service.MyShoppingCartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMyShoppingCartListByOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartCountResponse GetMyShoppingCartCount(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartCountResponse GetMyShoppingCartCount(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMyShoppingCartCount, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartCountResponse> GetMyShoppingCartCountAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyShoppingCartCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取购物车一览
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartCountResponse> GetMyShoppingCartCountAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMyShoppingCartCount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物数量
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartQuantity(global::SP.Service.ShoppingCartQuantityRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartQuantity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物数量
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartQuantity(global::SP.Service.ShoppingCartQuantityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateShoppingCartQuantity, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物数量
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartQuantityAsync(global::SP.Service.ShoppingCartQuantityRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartQuantityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物数量
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartQuantityAsync(global::SP.Service.ShoppingCartQuantityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateShoppingCartQuantity, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物车的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartEnabled(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartEnabled(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物车的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartEnabled(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateShoppingCartEnabled, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物车的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartEnabledAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartEnabledAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物车的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartEnabledAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateShoppingCartEnabled, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物车的订单ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartOrderId(global::SP.Service.ShoppingCartOrderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartOrderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物车的订单ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShoppingCartResultResponse UpdateShoppingCartOrderId(global::SP.Service.ShoppingCartOrderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateShoppingCartOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新购物车的订单ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartOrderIdAsync(global::SP.Service.ShoppingCartOrderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateShoppingCartOrderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新购物车的订单ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShoppingCartResultResponse> UpdateShoppingCartOrderIdAsync(global::SP.Service.ShoppingCartOrderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateShoppingCartOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头可选择的区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetSelectedRegionDataList(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSelectedRegionDataList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头可选择的区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetSelectedRegionDataList(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSelectedRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头可选择的区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetSelectedRegionDataListAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSelectedRegionDataListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头可选择的区域
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetSelectedRegionDataListAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSelectedRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户默认的地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddressResponse GetDefaultSelectedAddress(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDefaultSelectedAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户默认的地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddressResponse GetDefaultSelectedAddress(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDefaultSelectedAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取用户默认的地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddressResponse> GetDefaultSelectedAddressAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDefaultSelectedAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取用户默认的地址列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddressResponse> GetDefaultSelectedAddressAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDefaultSelectedAddress, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取下级区域的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetChildRegionDataList(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetChildRegionDataList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取下级区域的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.RegionListResponse GetChildRegionDataList(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChildRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取下级区域的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetChildRegionDataListAsync(global::SP.Service.RegionIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetChildRegionDataListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取下级区域的列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.RegionListResponse> GetChildRegionDataListAsync(global::SP.Service.RegionIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChildRegionDataList, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加认证方式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse AddAccountAuthentication(global::SP.Service.AddAuthenticationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccountAuthentication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加认证方式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse AddAccountAuthentication(global::SP.Service.AddAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccountAuthentication, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加认证方式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> AddAccountAuthenticationAsync(global::SP.Service.AddAuthenticationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAccountAuthenticationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加认证方式
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> AddAccountAuthenticationAsync(global::SP.Service.AddAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccountAuthentication, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取验证码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.VerifyCodeResponse GetValidVerifyCodeByAccount(global::SP.Service.GetVerifyCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetValidVerifyCodeByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取验证码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.VerifyCodeResponse GetValidVerifyCodeByAccount(global::SP.Service.GetVerifyCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetValidVerifyCodeByAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取验证码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.VerifyCodeResponse> GetValidVerifyCodeByAccountAsync(global::SP.Service.GetVerifyCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetValidVerifyCodeByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取验证码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.VerifyCodeResponse> GetValidVerifyCodeByAccountAsync(global::SP.Service.GetVerifyCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetValidVerifyCodeByAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新认证方式的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAuthStatusByAccount(global::SP.Service.UpdateAuthenticationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAuthStatusByAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新认证方式的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAuthStatusByAccount(global::SP.Service.UpdateAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAuthStatusByAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新认证方式的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAuthStatusByAccountAsync(global::SP.Service.UpdateAuthenticationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAuthStatusByAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新认证方式的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAuthStatusByAccountAsync(global::SP.Service.UpdateAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAuthStatusByAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorResponse AddAssociator(global::SP.Service.AddAssociatorRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAssociator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorResponse AddAssociator(global::SP.Service.AddAssociatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAssociator, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorResponse> AddAssociatorAsync(global::SP.Service.AddAssociatorRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAssociatorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorResponse> AddAssociatorAsync(global::SP.Service.AddAssociatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAssociator, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新会员的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAssociatorStatus(global::SP.Service.UpdateAssociatorStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAssociatorStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新会员的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAssociatorStatus(global::SP.Service.UpdateAssociatorStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAssociatorStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新会员的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAssociatorStatusAsync(global::SP.Service.UpdateAssociatorStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAssociatorStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新会员的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAssociatorStatusAsync(global::SP.Service.UpdateAssociatorStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAssociatorStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定账户的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorListResponse GetAssociatorByAccountId(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAssociatorByAccountId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定账户的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorListResponse GetAssociatorByAccountId(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssociatorByAccountId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定账户的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorListResponse> GetAssociatorByAccountIdAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAssociatorByAccountIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定账户的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorListResponse> GetAssociatorByAccountIdAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssociatorByAccountId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorResponse GetAssociatorById(global::SP.Service.AssociatorIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAssociatorById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorResponse GetAssociatorById(global::SP.Service.AssociatorIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssociatorById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorResponse> GetAssociatorByIdAsync(global::SP.Service.AssociatorIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAssociatorByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定的会员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorResponse> GetAssociatorByIdAsync(global::SP.Service.AssociatorIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssociatorById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定的系统种类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SysKindListResponse GetSysKindList(global::SP.Service.GetSysKindRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSysKindList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定的系统种类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SysKindListResponse GetSysKindList(global::SP.Service.GetSysKindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSysKindList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定的系统种类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SysKindListResponse> GetSysKindListAsync(global::SP.Service.GetSysKindRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSysKindListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定的系统种类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SysKindListResponse> GetSysKindListAsync(global::SP.Service.GetSysKindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSysKindList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountFullInfoResponse GetAccountFullInfo(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountFullInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountFullInfoResponse GetAccountFullInfo(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountFullInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountFullInfoResponse> GetAccountFullInfoAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountFullInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountFullInfoResponse> GetAccountFullInfoAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountFullInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountFullInfo(global::SP.Service.AccountFullInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountFullInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountFullInfo(global::SP.Service.AccountFullInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountFullInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountFullInfoAsync(global::SP.Service.AccountFullInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountFullInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新个人信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountFullInfoAsync(global::SP.Service.AccountFullInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountFullInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定账户的优惠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorListResponse GetDiscountByAccountId(global::SP.Service.DiscountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDiscountByAccountId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定账户的优惠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AssociatorListResponse GetDiscountByAccountId(global::SP.Service.DiscountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDiscountByAccountId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取指定账户的优惠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorListResponse> GetDiscountByAccountIdAsync(global::SP.Service.DiscountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDiscountByAccountIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取指定账户的优惠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AssociatorListResponse> GetDiscountByAccountIdAsync(global::SP.Service.DiscountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDiscountByAccountId, null, options, request);
      }
      /// <summary>
      ///*
      /// 设置支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse SetAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAccountPayPwd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 设置支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse SetAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAccountPayPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 设置支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> SetAccountPayPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAccountPayPwdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 设置支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> SetAccountPayPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAccountPayPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountPayPwd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountPayPwd(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountPayPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountPayPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountPayPwdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改支付密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountPayPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountPayPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountLoginPwd(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountLoginPwd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountLoginPwd(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountLoginPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountLoginPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountLoginPwdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountLoginPwdAsync(global::SP.Service.AccountPayPwdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountLoginPwd, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountMobile(global::SP.Service.AccountMobileRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountMobile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountMobile(global::SP.Service.AccountMobileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountMobile, null, options, request);
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountMobileAsync(global::SP.Service.AccountMobileRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountMobileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 修改登陆密码
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountMobileAsync(global::SP.Service.AccountMobileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountMobile, null, options, request);
      }
      /// <summary>
      ///*
      /// 绑定第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse BindOtherAccount(global::SP.Service.BingAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BindOtherAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 绑定第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse BindOtherAccount(global::SP.Service.BingAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BindOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 绑定第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> BindOtherAccountAsync(global::SP.Service.BingAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BindOtherAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 绑定第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> BindOtherAccountAsync(global::SP.Service.BingAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BindOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 创建第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse CreateOtherAccount(global::SP.Service.OtherAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOtherAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 创建第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse CreateOtherAccount(global::SP.Service.OtherAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 创建第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> CreateOtherAccountAsync(global::SP.Service.OtherAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOtherAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 创建第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> CreateOtherAccountAsync(global::SP.Service.OtherAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetOtherAccount(global::SP.Service.GetOtherAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOtherAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResponse GetOtherAccount(global::SP.Service.GetOtherAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetOtherAccountAsync(global::SP.Service.GetOtherAccountRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOtherAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取第三方账号
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResponse> GetOtherAccountAsync(global::SP.Service.GetOtherAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOtherAccount, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户身份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountIDInfo(global::SP.Service.AccountIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountIDInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户身份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse UpdateAccountIDInfo(global::SP.Service.AccountIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountIDInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新用户身份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountIDInfoAsync(global::SP.Service.AccountIDRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAccountIDInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新用户身份
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> UpdateAccountIDInfoAsync(global::SP.Service.AccountIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountIDInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 成为合伙人
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse ApplyPartner(global::SP.Service.ApplyPartnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ApplyPartner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 成为合伙人
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AccountResultResponse ApplyPartner(global::SP.Service.ApplyPartnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApplyPartner, null, options, request);
      }
      /// <summary>
      ///*
      /// 成为合伙人
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> ApplyPartnerAsync(global::SP.Service.ApplyPartnerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ApplyPartnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 成为合伙人
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AccountResultResponse> ApplyPartnerAsync(global::SP.Service.ApplyPartnerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApplyPartner, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AccountServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccountServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AccountServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegistAccount, serviceImpl.RegistAccount)
          .AddMethod(__Method_UpdateAccount, serviceImpl.UpdateAccount)
          .AddMethod(__Method_ValidateLogin, serviceImpl.ValidateLogin)
          .AddMethod(__Method_GetAccountDetail, serviceImpl.GetAccountDetail)
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_AddAccountAddress, serviceImpl.AddAccountAddress)
          .AddMethod(__Method_EditAccountAddress, serviceImpl.EditAccountAddress)
          .AddMethod(__Method_UpdateAddressStatus, serviceImpl.UpdateAddressStatus)
          .AddMethod(__Method_UpdateAddressDorm, serviceImpl.UpdateAddressDorm)
          .AddMethod(__Method_GetAddressList, serviceImpl.GetAddressList)
          .AddMethod(__Method_DelAddress, serviceImpl.DelAddress)
          .AddMethod(__Method_GetAccessToken, serviceImpl.GetAccessToken)
          .AddMethod(__Method_GetAccessTokenByRefreshToken, serviceImpl.GetAccessTokenByRefreshToken)
          .AddMethod(__Method_AddAccessToken, serviceImpl.AddAccessToken)
          .AddMethod(__Method_RemoveAccessToken, serviceImpl.RemoveAccessToken)
          .AddMethod(__Method_GetRegionDataList, serviceImpl.GetRegionDataList)
          .AddMethod(__Method_GetRegionData, serviceImpl.GetRegionData)
          .AddMethod(__Method_GetChildRegionData, serviceImpl.GetChildRegionData)
          .AddMethod(__Method_AddShoppingCart, serviceImpl.AddShoppingCart)
          .AddMethod(__Method_GetMyShoppingCartList, serviceImpl.GetMyShoppingCartList)
          .AddMethod(__Method_GetMyShoppingCartListByOrderId, serviceImpl.GetMyShoppingCartListByOrderId)
          .AddMethod(__Method_GetMyShoppingCartCount, serviceImpl.GetMyShoppingCartCount)
          .AddMethod(__Method_UpdateShoppingCartQuantity, serviceImpl.UpdateShoppingCartQuantity)
          .AddMethod(__Method_UpdateShoppingCartEnabled, serviceImpl.UpdateShoppingCartEnabled)
          .AddMethod(__Method_UpdateShoppingCartOrderId, serviceImpl.UpdateShoppingCartOrderId)
          .AddMethod(__Method_GetSelectedRegionDataList, serviceImpl.GetSelectedRegionDataList)
          .AddMethod(__Method_GetDefaultSelectedAddress, serviceImpl.GetDefaultSelectedAddress)
          .AddMethod(__Method_GetChildRegionDataList, serviceImpl.GetChildRegionDataList)
          .AddMethod(__Method_AddAccountAuthentication, serviceImpl.AddAccountAuthentication)
          .AddMethod(__Method_GetValidVerifyCodeByAccount, serviceImpl.GetValidVerifyCodeByAccount)
          .AddMethod(__Method_UpdateAuthStatusByAccount, serviceImpl.UpdateAuthStatusByAccount)
          .AddMethod(__Method_AddAssociator, serviceImpl.AddAssociator)
          .AddMethod(__Method_UpdateAssociatorStatus, serviceImpl.UpdateAssociatorStatus)
          .AddMethod(__Method_GetAssociatorByAccountId, serviceImpl.GetAssociatorByAccountId)
          .AddMethod(__Method_GetAssociatorById, serviceImpl.GetAssociatorById)
          .AddMethod(__Method_GetSysKindList, serviceImpl.GetSysKindList)
          .AddMethod(__Method_GetAccountFullInfo, serviceImpl.GetAccountFullInfo)
          .AddMethod(__Method_UpdateAccountFullInfo, serviceImpl.UpdateAccountFullInfo)
          .AddMethod(__Method_GetDiscountByAccountId, serviceImpl.GetDiscountByAccountId)
          .AddMethod(__Method_SetAccountPayPwd, serviceImpl.SetAccountPayPwd)
          .AddMethod(__Method_UpdateAccountPayPwd, serviceImpl.UpdateAccountPayPwd)
          .AddMethod(__Method_UpdateAccountLoginPwd, serviceImpl.UpdateAccountLoginPwd)
          .AddMethod(__Method_UpdateAccountMobile, serviceImpl.UpdateAccountMobile)
          .AddMethod(__Method_BindOtherAccount, serviceImpl.BindOtherAccount)
          .AddMethod(__Method_CreateOtherAccount, serviceImpl.CreateOtherAccount)
          .AddMethod(__Method_GetOtherAccount, serviceImpl.GetOtherAccount)
          .AddMethod(__Method_UpdateAccountIDInfo, serviceImpl.UpdateAccountIDInfo)
          .AddMethod(__Method_ApplyPartner, serviceImpl.ApplyPartner).Build();
    }

  }
}
#endregion
