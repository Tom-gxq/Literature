// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SP.Service {
  public static partial class StockService
  {
    static readonly string __ServiceName = "SP.Service.StockService";

    static readonly grpc::Marshaller<global::SP.Service.ProductSkuRequest> __Marshaller_ProductSkuRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductSkuRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductSkuResponse> __Marshaller_ProductSkuResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductSkuResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountProductSkuRequest> __Marshaller_AccountProductSkuRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountProductSkuRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OperationSkuRequest> __Marshaller_OperationSkuRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OperationSkuRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SkuStatusResponse> __Marshaller_SkuStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SkuStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.InvSkuRequest> __Marshaller_InvSkuRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.InvSkuRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SkuListRequest> __Marshaller_SkuListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SkuListRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::SP.Service.ProductSkuRequest, global::SP.Service.ProductSkuResponse> __Method_GetProductSku = new grpc::Method<global::SP.Service.ProductSkuRequest, global::SP.Service.ProductSkuResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductSku",
        __Marshaller_ProductSkuRequest,
        __Marshaller_ProductSkuResponse);

    static readonly grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.ProductSkuResponse> __Method_GetAccountProductSku = new grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.ProductSkuResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountProductSku",
        __Marshaller_AccountProductSkuRequest,
        __Marshaller_ProductSkuResponse);

    static readonly grpc::Method<global::SP.Service.OperationSkuRequest, global::SP.Service.SkuStatusResponse> __Method_DecreaseProductSku = new grpc::Method<global::SP.Service.OperationSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecreaseProductSku",
        __Marshaller_OperationSkuRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.OperationSkuRequest, global::SP.Service.SkuStatusResponse> __Method_RedoProductSku = new grpc::Method<global::SP.Service.OperationSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RedoProductSku",
        __Marshaller_OperationSkuRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.InvSkuRequest, global::SP.Service.SkuStatusResponse> __Method_AddInvProductSku = new grpc::Method<global::SP.Service.InvSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInvProductSku",
        __Marshaller_InvSkuRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.InvSkuRequest, global::SP.Service.SkuStatusResponse> __Method_DelInvProductSku = new grpc::Method<global::SP.Service.InvSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelInvProductSku",
        __Marshaller_InvSkuRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.SkuListRequest, global::SP.Service.SkuStatusResponse> __Method_UpdateProductSku = new grpc::Method<global::SP.Service.SkuListRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProductSku",
        __Marshaller_SkuListRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.SkuListRequest, global::SP.Service.SkuStatusResponse> __Method_DelProductSku = new grpc::Method<global::SP.Service.SkuListRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelProductSku",
        __Marshaller_SkuListRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.SkuStatusResponse> __Method_AddShopOwnerList = new grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddShopOwnerList",
        __Marshaller_AccountProductSkuRequest,
        __Marshaller_SkuStatusResponse);

    static readonly grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.SkuStatusResponse> __Method_DelShopOwnerList = new grpc::Method<global::SP.Service.AccountProductSkuRequest, global::SP.Service.SkuStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelShopOwnerList",
        __Marshaller_AccountProductSkuRequest,
        __Marshaller_SkuStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SP.Service.StockServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StockService</summary>
    public abstract partial class StockServiceBase
    {
      /// <summary>
      ///*
      /// 获取店铺产品库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductSkuResponse> GetProductSku(global::SP.Service.ProductSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取配送人的库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductSkuResponse> GetAccountProductSku(global::SP.Service.AccountProductSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 扣除下单的库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> DecreaseProductSku(global::SP.Service.OperationSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 返还未付款的库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> RedoProductSku(global::SP.Service.OperationSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加库存无效标志
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> AddInvProductSku(global::SP.Service.InvSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 删除库存无效标志
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> DelInvProductSku(global::SP.Service.InvSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新或者添加多个产品库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> UpdateProductSku(global::SP.Service.SkuListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 删除多个产品库存
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> DelProductSku(global::SP.Service.SkuListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加商铺配送员到配送产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> AddShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 从配送产品列表删除商品配送员
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SkuStatusResponse> DelShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StockService</summary>
    public partial class StockServiceClient : grpc::ClientBase<StockServiceClient>
    {
      /// <summary>Creates a new client for StockService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StockServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StockService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StockServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StockServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StockServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 获取店铺产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductSkuResponse GetProductSku(global::SP.Service.ProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductSkuResponse GetProductSku(global::SP.Service.ProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductSkuResponse> GetProductSkuAsync(global::SP.Service.ProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductSkuResponse> GetProductSkuAsync(global::SP.Service.ProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取配送人的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductSkuResponse GetAccountProductSku(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取配送人的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductSkuResponse GetAccountProductSku(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取配送人的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductSkuResponse> GetAccountProductSkuAsync(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAccountProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取配送人的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductSkuResponse> GetAccountProductSkuAsync(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 扣除下单的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DecreaseProductSku(global::SP.Service.OperationSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DecreaseProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 扣除下单的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DecreaseProductSku(global::SP.Service.OperationSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecreaseProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 扣除下单的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DecreaseProductSkuAsync(global::SP.Service.OperationSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DecreaseProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 扣除下单的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DecreaseProductSkuAsync(global::SP.Service.OperationSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecreaseProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 返还未付款的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse RedoProductSku(global::SP.Service.OperationSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RedoProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 返还未付款的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse RedoProductSku(global::SP.Service.OperationSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RedoProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 返还未付款的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> RedoProductSkuAsync(global::SP.Service.OperationSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RedoProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 返还未付款的库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> RedoProductSkuAsync(global::SP.Service.OperationSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RedoProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse AddInvProductSku(global::SP.Service.InvSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddInvProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse AddInvProductSku(global::SP.Service.InvSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInvProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> AddInvProductSkuAsync(global::SP.Service.InvSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddInvProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> AddInvProductSkuAsync(global::SP.Service.InvSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInvProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelInvProductSku(global::SP.Service.InvSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelInvProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelInvProductSku(global::SP.Service.InvSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelInvProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelInvProductSkuAsync(global::SP.Service.InvSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelInvProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除库存无效标志
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelInvProductSkuAsync(global::SP.Service.InvSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelInvProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新或者添加多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse UpdateProductSku(global::SP.Service.SkuListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新或者添加多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse UpdateProductSku(global::SP.Service.SkuListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新或者添加多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> UpdateProductSkuAsync(global::SP.Service.SkuListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新或者添加多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> UpdateProductSkuAsync(global::SP.Service.SkuListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelProductSku(global::SP.Service.SkuListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelProductSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelProductSku(global::SP.Service.SkuListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelProductSkuAsync(global::SP.Service.SkuListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelProductSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除多个产品库存
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelProductSkuAsync(global::SP.Service.SkuListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelProductSku, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加商铺配送员到配送产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse AddShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShopOwnerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加商铺配送员到配送产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse AddShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddShopOwnerList, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加商铺配送员到配送产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> AddShopOwnerListAsync(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShopOwnerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加商铺配送员到配送产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> AddShopOwnerListAsync(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddShopOwnerList, null, options, request);
      }
      /// <summary>
      ///*
      /// 从配送产品列表删除商品配送员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelShopOwnerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 从配送产品列表删除商品配送员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SkuStatusResponse DelShopOwnerList(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelShopOwnerList, null, options, request);
      }
      /// <summary>
      ///*
      /// 从配送产品列表删除商品配送员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelShopOwnerListAsync(global::SP.Service.AccountProductSkuRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelShopOwnerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 从配送产品列表删除商品配送员
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SkuStatusResponse> DelShopOwnerListAsync(global::SP.Service.AccountProductSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelShopOwnerList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StockServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StockServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StockServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetProductSku, serviceImpl.GetProductSku)
          .AddMethod(__Method_GetAccountProductSku, serviceImpl.GetAccountProductSku)
          .AddMethod(__Method_DecreaseProductSku, serviceImpl.DecreaseProductSku)
          .AddMethod(__Method_RedoProductSku, serviceImpl.RedoProductSku)
          .AddMethod(__Method_AddInvProductSku, serviceImpl.AddInvProductSku)
          .AddMethod(__Method_DelInvProductSku, serviceImpl.DelInvProductSku)
          .AddMethod(__Method_UpdateProductSku, serviceImpl.UpdateProductSku)
          .AddMethod(__Method_DelProductSku, serviceImpl.DelProductSku)
          .AddMethod(__Method_AddShopOwnerList, serviceImpl.AddShopOwnerList)
          .AddMethod(__Method_DelShopOwnerList, serviceImpl.DelShopOwnerList).Build();
    }

  }
}
#endregion
