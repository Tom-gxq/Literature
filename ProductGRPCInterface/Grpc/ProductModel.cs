// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SP.Service {

  /// <summary>Holder for reflection information generated from ProductModel.proto</summary>
  public static partial class ProductModelReflection {

    #region Descriptor
    /// <summary>File descriptor for ProductModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProductModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm9kdWN0TW9kZWwucHJvdG8SClNQLlNlcnZpY2UaEUNvbW1vbk1vZGVs",
            "LnByb3RvIrcDCgdQcm9kdWN0EhEKCXByb2R1Y3RJZBgBIAEoCRITCgtwcm9k",
            "dWN0TmFtZRgCIAEoCRITCgtwcm9kdWN0Q29kZRgDIAEoCRIYChBzaG9ydERl",
            "c2NyaXB0aW9uGAQgASgJEgwKBHVuaXQYBSABKAkSEwoLZGVzY3JpcHRpb24Y",
            "BiABKAkSEgoKc2FsZVN0YXR1cxgHIAEoBRIRCglhZGRlZERhdGUYCCABKAMS",
            "EwoLbWFya2V0UHJpY2UYCSABKAESIAoFYnJhbmQYCiABKAsyES5TUC5TZXJ2",
            "aWNlLkJyYW5kEhMKC3N1cHBsaWVyc0lkGAsgASgJEiwKC3Byb2R1Y3RUeXBl",
            "GAwgASgLMhcuU1AuU2VydmljZS5Qcm9kdWN0VHlwZRI2ChBwcm9kdWN0QXR0",
            "cmlidXRlGA0gASgLMhwuU1AuU2VydmljZS5Qcm9kdWN0QXR0cmlidXRlEicK",
            "BWltYWdlGA4gAygLMhguU1AuU2VydmljZS5Qcm9kdWN0SW1hZ2USEAoIdmlw",
            "UHJpY2UYDyABKAESDgoGc2t1TnVtGBAgASgFEg4KBnNob3BJZBgRIAEoBSJi",
            "CgVCcmFuZBIPCgdicmFuZElkGAEgASgFEhEKCWJyYW5kTmFtZRgCIAEoCRIM",
            "CgRsb2dvGAMgASgJEhIKCmNvbXBhbnlVcmwYBCABKAkSEwoLZGVzY3JpcHRp",
            "b24YBSABKAkicQoLUHJvZHVjdFR5cGUSDgoGdHlwZUlkGAEgASgDEhAKCHR5",
            "cGVOYW1lGAIgASgJEgwKBGtpbmQYAyABKAUSDgoGcmVtYXJrGAQgASgJEhAK",
            "CHR5cGVQYXRoGAUgASgJEhAKCHR5cGVMb2dvGAYgASgJIjwKDFByb2R1Y3RJ",
            "bWFnZRIKCgJJZBgBIAEoAxIPCgdJbWdQYXRoGAIgASgJEg8KB1Bvc3Rpb24Y",
            "AyABKAUiZwoQUHJvZHVjdEF0dHJpYnV0ZRIoCglhdHRyaWJ1dGUYASABKAsy",
            "FS5TUC5TZXJ2aWNlLkF0dHJpYnV0ZRIpCgV2YWx1ZRgCIAEoCzIaLlNQLlNl",
            "cnZpY2UuQXR0cmlidXRlVmFsdWUiOQoSUHJvZHVjdExpc3RSZXF1ZXN0EhEK",
            "CXBhZ2VJbmRleBgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBSIlChBQcm9kdWN0",
            "SWRSZXF1ZXN0EhEKCXByb2R1Y3RJZBgBIAEoCSJGCg5CcmFuZElkUmVxdWVz",
            "dBIPCgdicmFuZElkGAEgASgFEhEKCXBhZ2VJbmRleBgCIAEoBRIQCghwYWdl",
            "U2l6ZRgDIAEoBSJECg1UeXBlSWRSZXF1ZXN0Eg4KBnR5cGVJZBgBIAEoAxIR",
            "CglwYWdlSW5kZXgYAiABKAUSEAoIcGFnZVNpemUYAyABKAUiTgoSQXR0cmli",
            "dXRlSWRSZXF1ZXN0EhMKC2F0dHJpYnV0ZUlkGAEgASgDEhEKCXBhZ2VJbmRl",
            "eBgCIAEoBRIQCghwYWdlU2l6ZRgDIAEoBSJMChRTZWFyY2hQcm9kdWN0UmVx",
            "dWVzdBIPCgdrZXlXb3JkGAEgASgJEhEKCXBhZ2VJbmRleBgCIAEoBRIQCghw",
            "YWdlU2l6ZRgDIAEoBSJeChNQcm9kdWN0TGlzdFJlc3BvbnNlEg4KBnN0YXR1",
            "cxgBIAEoBRIoCgtwcm9kdWN0TGlzdBgCIAMoCzITLlNQLlNlcnZpY2UuUHJv",
            "ZHVjdBINCgV0b3RhbBgEIAEoAyJSChRQcm9kY3REZXRhaWxSZXNwb25zZRIO",
            "CgZzdGF0dXMYASABKAUSKgoNcHJvZHVjdERldGFpbBgCIAEoCzITLlNQLlNl",
            "cnZpY2UuUHJvZHVjdCIsChlUaXRsZUF0dHJpYnV0ZUxpc3RSZXF1ZXN0Eg8K",
            "B2F0dFR5cGUYASABKAUiXwoaVGl0bGVBdHRyaWJ1dGVMaXN0UmVzcG9uc2US",
            "DgoGc3RhdHVzGAEgASgFEjEKEnRpdGxlQXR0cmlidXRlTGlzdBgCIAMoCzIV",
            "LlNQLlNlcnZpY2UuQXR0cmlidXRlIlwKD1Nob3BMaXN0UmVxdWVzdBIRCglw",
            "YWdlSW5kZXgYASABKAUSEAoIcGFnZVNpemUYAiABKAUSEAoIc2hvcFR5cGUY",
            "AyABKAUSEgoKZGlzdHJpY3RJZBgFIAEoBSJVChBTaG9wTGlzdFJlc3BvbnNl",
            "Eg4KBnN0YXR1cxgBIAEoBRIiCghzaG9wTGlzdBgCIAMoCzIQLlNQLlNlcnZp",
            "Y2UuU2hvcBINCgV0b3RhbBgDIAEoBSJxChZTaG9wUHJvZHVjdExpc3RSZXF1",
            "ZXN0EhEKCXBhZ2VJbmRleBgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIOCgZ0",
            "eXBlSWQYAyABKAMSDgoGc2hvcElkGAQgASgFEhIKCmRpc3RyaWN0SWQYBSAB",
            "KAUiHwoNU2hvcElkUmVxdWVzdBIOCgZzaG9wSWQYASABKAUiPgoMU2hvcFJl",
            "c3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIeCgRzaG9wGAIgASgLMhAuU1AuU2Vy",
            "dmljZS5TaG9wIkAKCENhcm91c2VsEgsKA3VybBgBIAEoCRIRCglpbWFnZVBh",
            "dGgYAiABKAkSFAoMZGlzcGxheUluZGV4GAMgASgFIlIKFENhcm91c2VsTGlz",
            "dFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIqCgxjYXJvdXNlbExpc3QYAiAD",
            "KAsyFC5TUC5TZXJ2aWNlLkNhcm91c2VsIlcKFVRpdGxlVHlwZUxpc3RSZXNw",
            "b25zZRIOCgZzdGF0dXMYASABKAUSLgoNdGl0bGVUeXBlTGlzdBgCIAMoCzIX",
            "LlNQLlNlcnZpY2UuUHJvZHVjdFR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SP.Service.CommonModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Product), global::SP.Service.Product.Parser, new[]{ "ProductId", "ProductName", "ProductCode", "ShortDescription", "Unit", "Description", "SaleStatus", "AddedDate", "MarketPrice", "Brand", "SuppliersId", "ProductType", "ProductAttribute", "Image", "VipPrice", "SkuNum", "ShopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Brand), global::SP.Service.Brand.Parser, new[]{ "BrandId", "BrandName", "Logo", "CompanyUrl", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductType), global::SP.Service.ProductType.Parser, new[]{ "TypeId", "TypeName", "Kind", "Remark", "TypePath", "TypeLogo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductImage), global::SP.Service.ProductImage.Parser, new[]{ "Id", "ImgPath", "Postion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductAttribute), global::SP.Service.ProductAttribute.Parser, new[]{ "Attribute", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductListRequest), global::SP.Service.ProductListRequest.Parser, new[]{ "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductIdRequest), global::SP.Service.ProductIdRequest.Parser, new[]{ "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.BrandIdRequest), global::SP.Service.BrandIdRequest.Parser, new[]{ "BrandId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TypeIdRequest), global::SP.Service.TypeIdRequest.Parser, new[]{ "TypeId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AttributeIdRequest), global::SP.Service.AttributeIdRequest.Parser, new[]{ "AttributeId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SearchProductRequest), global::SP.Service.SearchProductRequest.Parser, new[]{ "KeyWord", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductListResponse), global::SP.Service.ProductListResponse.Parser, new[]{ "Status", "ProductList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProdctDetailResponse), global::SP.Service.ProdctDetailResponse.Parser, new[]{ "Status", "ProductDetail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleAttributeListRequest), global::SP.Service.TitleAttributeListRequest.Parser, new[]{ "AttType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleAttributeListResponse), global::SP.Service.TitleAttributeListResponse.Parser, new[]{ "Status", "TitleAttributeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopListRequest), global::SP.Service.ShopListRequest.Parser, new[]{ "PageIndex", "PageSize", "ShopType", "DistrictId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopListResponse), global::SP.Service.ShopListResponse.Parser, new[]{ "Status", "ShopList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopProductListRequest), global::SP.Service.ShopProductListRequest.Parser, new[]{ "PageIndex", "PageSize", "TypeId", "ShopId", "DistrictId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopIdRequest), global::SP.Service.ShopIdRequest.Parser, new[]{ "ShopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopResponse), global::SP.Service.ShopResponse.Parser, new[]{ "Status", "Shop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Carousel), global::SP.Service.Carousel.Parser, new[]{ "Url", "ImagePath", "DisplayIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.CarouselListResponse), global::SP.Service.CarouselListResponse.Parser, new[]{ "Status", "CarouselList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleTypeListResponse), global::SP.Service.TitleTypeListResponse.Parser, new[]{ "Status", "TitleTypeList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// 商品的返回信息
  /// </summary>
  public sealed partial class Product : pb::IMessage<Product> {
    private static readonly pb::MessageParser<Product> _parser = new pb::MessageParser<Product>(() => new Product());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Product> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product(Product other) : this() {
      productId_ = other.productId_;
      productName_ = other.productName_;
      productCode_ = other.productCode_;
      shortDescription_ = other.shortDescription_;
      unit_ = other.unit_;
      description_ = other.description_;
      saleStatus_ = other.saleStatus_;
      addedDate_ = other.addedDate_;
      marketPrice_ = other.marketPrice_;
      Brand = other.brand_ != null ? other.Brand.Clone() : null;
      suppliersId_ = other.suppliersId_;
      ProductType = other.productType_ != null ? other.ProductType.Clone() : null;
      ProductAttribute = other.productAttribute_ != null ? other.ProductAttribute.Clone() : null;
      image_ = other.image_.Clone();
      vipPrice_ = other.vipPrice_;
      skuNum_ = other.skuNum_;
      shopId_ = other.shopId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product Clone() {
      return new Product(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 2;
    private string productName_ = "";
    /// <summary>
    ///*
    /// 商品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productCode" field.</summary>
    public const int ProductCodeFieldNumber = 3;
    private string productCode_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductCode {
      get { return productCode_; }
      set {
        productCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 4;
    private string shortDescription_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 5;
    private string unit_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saleStatus" field.</summary>
    public const int SaleStatusFieldNumber = 7;
    private int saleStatus_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleStatus {
      get { return saleStatus_; }
      set {
        saleStatus_ = value;
      }
    }

    /// <summary>Field number for the "addedDate" field.</summary>
    public const int AddedDateFieldNumber = 8;
    private long addedDate_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddedDate {
      get { return addedDate_; }
      set {
        addedDate_ = value;
      }
    }

    /// <summary>Field number for the "marketPrice" field.</summary>
    public const int MarketPriceFieldNumber = 9;
    private double marketPrice_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarketPrice {
      get { return marketPrice_; }
      set {
        marketPrice_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 10;
    private global::SP.Service.Brand brand_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Brand Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 11;
    private string suppliersId_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productType" field.</summary>
    public const int ProductTypeFieldNumber = 12;
    private global::SP.Service.ProductType productType_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.ProductType ProductType {
      get { return productType_; }
      set {
        productType_ = value;
      }
    }

    /// <summary>Field number for the "productAttribute" field.</summary>
    public const int ProductAttributeFieldNumber = 13;
    private global::SP.Service.ProductAttribute productAttribute_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.ProductAttribute ProductAttribute {
      get { return productAttribute_; }
      set {
        productAttribute_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SP.Service.ProductImage> _repeated_image_codec
        = pb::FieldCodec.ForMessage(114, global::SP.Service.ProductImage.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductImage> image_ = new pbc::RepeatedField<global::SP.Service.ProductImage>();
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductImage> Image {
      get { return image_; }
    }

    /// <summary>Field number for the "vipPrice" field.</summary>
    public const int VipPriceFieldNumber = 15;
    private double vipPrice_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VipPrice {
      get { return vipPrice_; }
      set {
        vipPrice_ = value;
      }
    }

    /// <summary>Field number for the "skuNum" field.</summary>
    public const int SkuNumFieldNumber = 16;
    private int skuNum_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkuNum {
      get { return skuNum_; }
      set {
        skuNum_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 17;
    private int shopId_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Product);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Product other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (ProductName != other.ProductName) return false;
      if (ProductCode != other.ProductCode) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (Unit != other.Unit) return false;
      if (Description != other.Description) return false;
      if (SaleStatus != other.SaleStatus) return false;
      if (AddedDate != other.AddedDate) return false;
      if (MarketPrice != other.MarketPrice) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (!object.Equals(ProductType, other.ProductType)) return false;
      if (!object.Equals(ProductAttribute, other.ProductAttribute)) return false;
      if(!image_.Equals(other.image_)) return false;
      if (VipPrice != other.VipPrice) return false;
      if (SkuNum != other.SkuNum) return false;
      if (ShopId != other.ShopId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ProductCode.Length != 0) hash ^= ProductCode.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (SaleStatus != 0) hash ^= SaleStatus.GetHashCode();
      if (AddedDate != 0L) hash ^= AddedDate.GetHashCode();
      if (MarketPrice != 0D) hash ^= MarketPrice.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (SuppliersId.Length != 0) hash ^= SuppliersId.GetHashCode();
      if (productType_ != null) hash ^= ProductType.GetHashCode();
      if (productAttribute_ != null) hash ^= ProductAttribute.GetHashCode();
      hash ^= image_.GetHashCode();
      if (VipPrice != 0D) hash ^= VipPrice.GetHashCode();
      if (SkuNum != 0) hash ^= SkuNum.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductName);
      }
      if (ProductCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductCode);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShortDescription);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Unit);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (SaleStatus != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SaleStatus);
      }
      if (AddedDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(AddedDate);
      }
      if (MarketPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MarketPrice);
      }
      if (brand_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Brand);
      }
      if (SuppliersId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SuppliersId);
      }
      if (productType_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ProductType);
      }
      if (productAttribute_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ProductAttribute);
      }
      image_.WriteTo(output, _repeated_image_codec);
      if (VipPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VipPrice);
      }
      if (SkuNum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SkuNum);
      }
      if (ShopId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ProductCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductCode);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (SaleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleStatus);
      }
      if (AddedDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddedDate);
      }
      if (MarketPrice != 0D) {
        size += 1 + 8;
      }
      if (brand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (SuppliersId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SuppliersId);
      }
      if (productType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductType);
      }
      if (productAttribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductAttribute);
      }
      size += image_.CalculateSize(_repeated_image_codec);
      if (VipPrice != 0D) {
        size += 1 + 8;
      }
      if (SkuNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkuNum);
      }
      if (ShopId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Product other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ProductCode.Length != 0) {
        ProductCode = other.ProductCode;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.SaleStatus != 0) {
        SaleStatus = other.SaleStatus;
      }
      if (other.AddedDate != 0L) {
        AddedDate = other.AddedDate;
      }
      if (other.MarketPrice != 0D) {
        MarketPrice = other.MarketPrice;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          brand_ = new global::SP.Service.Brand();
        }
        Brand.MergeFrom(other.Brand);
      }
      if (other.SuppliersId.Length != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.productType_ != null) {
        if (productType_ == null) {
          productType_ = new global::SP.Service.ProductType();
        }
        ProductType.MergeFrom(other.ProductType);
      }
      if (other.productAttribute_ != null) {
        if (productAttribute_ == null) {
          productAttribute_ = new global::SP.Service.ProductAttribute();
        }
        ProductAttribute.MergeFrom(other.ProductAttribute);
      }
      image_.Add(other.image_);
      if (other.VipPrice != 0D) {
        VipPrice = other.VipPrice;
      }
      if (other.SkuNum != 0) {
        SkuNum = other.SkuNum;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
          case 18: {
            ProductName = input.ReadString();
            break;
          }
          case 26: {
            ProductCode = input.ReadString();
            break;
          }
          case 34: {
            ShortDescription = input.ReadString();
            break;
          }
          case 42: {
            Unit = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 56: {
            SaleStatus = input.ReadInt32();
            break;
          }
          case 64: {
            AddedDate = input.ReadInt64();
            break;
          }
          case 73: {
            MarketPrice = input.ReadDouble();
            break;
          }
          case 82: {
            if (brand_ == null) {
              brand_ = new global::SP.Service.Brand();
            }
            input.ReadMessage(brand_);
            break;
          }
          case 90: {
            SuppliersId = input.ReadString();
            break;
          }
          case 98: {
            if (productType_ == null) {
              productType_ = new global::SP.Service.ProductType();
            }
            input.ReadMessage(productType_);
            break;
          }
          case 106: {
            if (productAttribute_ == null) {
              productAttribute_ = new global::SP.Service.ProductAttribute();
            }
            input.ReadMessage(productAttribute_);
            break;
          }
          case 114: {
            image_.AddEntriesFrom(input, _repeated_image_codec);
            break;
          }
          case 121: {
            VipPrice = input.ReadDouble();
            break;
          }
          case 128: {
            SkuNum = input.ReadInt32();
            break;
          }
          case 136: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 品牌的返回信息
  /// </summary>
  public sealed partial class Brand : pb::IMessage<Brand> {
    private static readonly pb::MessageParser<Brand> _parser = new pb::MessageParser<Brand>(() => new Brand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand(Brand other) : this() {
      brandId_ = other.brandId_;
      brandName_ = other.brandName_;
      logo_ = other.logo_;
      companyUrl_ = other.companyUrl_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand Clone() {
      return new Brand(this);
    }

    /// <summary>Field number for the "brandId" field.</summary>
    public const int BrandIdFieldNumber = 1;
    private int brandId_;
    /// <summary>
    ///*
    /// 品牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrandId {
      get { return brandId_; }
      set {
        brandId_ = value;
      }
    }

    /// <summary>Field number for the "brandName" field.</summary>
    public const int BrandNameFieldNumber = 2;
    private string brandName_ = "";
    /// <summary>
    ///*
    /// 品牌名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrandName {
      get { return brandName_; }
      set {
        brandName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 3;
    private string logo_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "companyUrl" field.</summary>
    public const int CompanyUrlFieldNumber = 4;
    private string companyUrl_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyUrl {
      get { return companyUrl_; }
      set {
        companyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrandId != other.BrandId) return false;
      if (BrandName != other.BrandName) return false;
      if (Logo != other.Logo) return false;
      if (CompanyUrl != other.CompanyUrl) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrandId != 0) hash ^= BrandId.GetHashCode();
      if (BrandName.Length != 0) hash ^= BrandName.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      if (CompanyUrl.Length != 0) hash ^= CompanyUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BrandId);
      }
      if (BrandName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrandName);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Logo);
      }
      if (CompanyUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CompanyUrl);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrandId);
      }
      if (BrandName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrandName);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
      }
      if (CompanyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brand other) {
      if (other == null) {
        return;
      }
      if (other.BrandId != 0) {
        BrandId = other.BrandId;
      }
      if (other.BrandName.Length != 0) {
        BrandName = other.BrandName;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      if (other.CompanyUrl.Length != 0) {
        CompanyUrl = other.CompanyUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrandId = input.ReadInt32();
            break;
          }
          case 18: {
            BrandName = input.ReadString();
            break;
          }
          case 26: {
            Logo = input.ReadString();
            break;
          }
          case 34: {
            CompanyUrl = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型的返回信息
  /// </summary>
  public sealed partial class ProductType : pb::IMessage<ProductType> {
    private static readonly pb::MessageParser<ProductType> _parser = new pb::MessageParser<ProductType>(() => new ProductType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType(ProductType other) : this() {
      typeId_ = other.typeId_;
      typeName_ = other.typeName_;
      kind_ = other.kind_;
      remark_ = other.remark_;
      typePath_ = other.typePath_;
      typeLogo_ = other.typeLogo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType Clone() {
      return new ProductType(this);
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 2;
    private string typeName_ = "";
    /// <summary>
    ///*
    /// 商品类型名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private int kind_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typePath" field.</summary>
    public const int TypePathFieldNumber = 5;
    private string typePath_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypePath {
      get { return typePath_; }
      set {
        typePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeLogo" field.</summary>
    public const int TypeLogoFieldNumber = 6;
    private string typeLogo_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeLogo {
      get { return typeLogo_; }
      set {
        typeLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (TypeName != other.TypeName) return false;
      if (Kind != other.Kind) return false;
      if (Remark != other.Remark) return false;
      if (TypePath != other.TypePath) return false;
      if (TypeLogo != other.TypeLogo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (TypePath.Length != 0) hash ^= TypePath.GetHashCode();
      if (TypeLogo.Length != 0) hash ^= TypeLogo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TypeId);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TypeName);
      }
      if (Kind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Kind);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
      if (TypePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypePath);
      }
      if (TypeLogo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TypeLogo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (TypePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypePath);
      }
      if (TypeLogo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeLogo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductType other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.TypePath.Length != 0) {
        TypePath = other.TypePath;
      }
      if (other.TypeLogo.Length != 0) {
        TypeLogo = other.TypeLogo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TypeId = input.ReadInt64();
            break;
          }
          case 18: {
            TypeName = input.ReadString();
            break;
          }
          case 24: {
            Kind = input.ReadInt32();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
          case 42: {
            TypePath = input.ReadString();
            break;
          }
          case 50: {
            TypeLogo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品的图片返回信息
  /// </summary>
  public sealed partial class ProductImage : pb::IMessage<ProductImage> {
    private static readonly pb::MessageParser<ProductImage> _parser = new pb::MessageParser<ProductImage>(() => new ProductImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage(ProductImage other) : this() {
      id_ = other.id_;
      imgPath_ = other.imgPath_;
      postion_ = other.postion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage Clone() {
      return new ProductImage(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///*
    /// 商品图片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ImgPath" field.</summary>
    public const int ImgPathFieldNumber = 2;
    private string imgPath_ = "";
    /// <summary>
    ///*
    /// 商品图片路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgPath {
      get { return imgPath_; }
      set {
        imgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Postion" field.</summary>
    public const int PostionFieldNumber = 3;
    private int postion_;
    /// <summary>
    ///*
    /// 商品图片路径位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Postion {
      get { return postion_; }
      set {
        postion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ImgPath != other.ImgPath) return false;
      if (Postion != other.Postion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ImgPath.Length != 0) hash ^= ImgPath.GetHashCode();
      if (Postion != 0) hash ^= Postion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ImgPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImgPath);
      }
      if (Postion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Postion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ImgPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgPath);
      }
      if (Postion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Postion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductImage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ImgPath.Length != 0) {
        ImgPath = other.ImgPath;
      }
      if (other.Postion != 0) {
        Postion = other.Postion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            ImgPath = input.ReadString();
            break;
          }
          case 24: {
            Postion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型属性的返回信息
  /// </summary>
  public sealed partial class ProductAttribute : pb::IMessage<ProductAttribute> {
    private static readonly pb::MessageParser<ProductAttribute> _parser = new pb::MessageParser<ProductAttribute>(() => new ProductAttribute());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute(ProductAttribute other) : this() {
      Attribute = other.attribute_ != null ? other.Attribute.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute Clone() {
      return new ProductAttribute(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private global::SP.Service.Attribute attribute_;
    /// <summary>
    ///*
    /// 商品类型属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Attribute Attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::SP.Service.AttributeValue value_;
    /// <summary>
    ///*
    /// 商品类型属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AttributeValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attribute_ != null) hash ^= Attribute.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attribute_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attribute);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductAttribute other) {
      if (other == null) {
        return;
      }
      if (other.attribute_ != null) {
        if (attribute_ == null) {
          attribute_ = new global::SP.Service.Attribute();
        }
        Attribute.MergeFrom(other.Attribute);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::SP.Service.AttributeValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (attribute_ == null) {
              attribute_ = new global::SP.Service.Attribute();
            }
            input.ReadMessage(attribute_);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::SP.Service.AttributeValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品链表的请求信息
  /// </summary>
  public sealed partial class ProductListRequest : pb::IMessage<ProductListRequest> {
    private static readonly pb::MessageParser<ProductListRequest> _parser = new pb::MessageParser<ProductListRequest>(() => new ProductListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest(ProductListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest Clone() {
      return new ProductListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品ID的请求参数
  /// </summary>
  public sealed partial class ProductIdRequest : pb::IMessage<ProductIdRequest> {
    private static readonly pb::MessageParser<ProductIdRequest> _parser = new pb::MessageParser<ProductIdRequest>(() => new ProductIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest(ProductIdRequest other) : this() {
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest Clone() {
      return new ProductIdRequest(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 品牌ID的请求参数
  /// </summary>
  public sealed partial class BrandIdRequest : pb::IMessage<BrandIdRequest> {
    private static readonly pb::MessageParser<BrandIdRequest> _parser = new pb::MessageParser<BrandIdRequest>(() => new BrandIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrandIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest(BrandIdRequest other) : this() {
      brandId_ = other.brandId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest Clone() {
      return new BrandIdRequest(this);
    }

    /// <summary>Field number for the "brandId" field.</summary>
    public const int BrandIdFieldNumber = 1;
    private int brandId_;
    /// <summary>
    ///*
    /// 品牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrandId {
      get { return brandId_; }
      set {
        brandId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrandIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrandIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrandId != other.BrandId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrandId != 0) hash ^= BrandId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BrandId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrandId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrandIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.BrandId != 0) {
        BrandId = other.BrandId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrandId = input.ReadInt32();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型ID的请求参数
  /// </summary>
  public sealed partial class TypeIdRequest : pb::IMessage<TypeIdRequest> {
    private static readonly pb::MessageParser<TypeIdRequest> _parser = new pb::MessageParser<TypeIdRequest>(() => new TypeIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest(TypeIdRequest other) : this() {
      typeId_ = other.typeId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest Clone() {
      return new TypeIdRequest(this);
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TypeId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TypeId = input.ReadInt64();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品属性ID的请求参数
  /// </summary>
  public sealed partial class AttributeIdRequest : pb::IMessage<AttributeIdRequest> {
    private static readonly pb::MessageParser<AttributeIdRequest> _parser = new pb::MessageParser<AttributeIdRequest>(() => new AttributeIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest(AttributeIdRequest other) : this() {
      attributeId_ = other.attributeId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest Clone() {
      return new AttributeIdRequest(this);
    }

    /// <summary>Field number for the "attributeId" field.</summary>
    public const int AttributeIdFieldNumber = 1;
    private long attributeId_;
    /// <summary>
    ///*
    /// 商品属性ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttributeId {
      get { return attributeId_; }
      set {
        attributeId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttributeId != other.AttributeId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttributeId != 0L) hash ^= AttributeId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttributeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AttributeId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttributeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttributeId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.AttributeId != 0L) {
        AttributeId = other.AttributeId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttributeId = input.ReadInt64();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 搜索产品的请求参数
  /// </summary>
  public sealed partial class SearchProductRequest : pb::IMessage<SearchProductRequest> {
    private static readonly pb::MessageParser<SearchProductRequest> _parser = new pb::MessageParser<SearchProductRequest>(() => new SearchProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest(SearchProductRequest other) : this() {
      keyWord_ = other.keyWord_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest Clone() {
      return new SearchProductRequest(this);
    }

    /// <summary>Field number for the "keyWord" field.</summary>
    public const int KeyWordFieldNumber = 1;
    private string keyWord_ = "";
    /// <summary>
    ///*
    /// 产品中关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyWord {
      get { return keyWord_; }
      set {
        keyWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyWord != other.KeyWord) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyWord.Length != 0) hash ^= KeyWord.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyWord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyWord);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyWord);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyWord.Length != 0) {
        KeyWord = other.KeyWord;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KeyWord = input.ReadString();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品链表的返回信息
  /// </summary>
  public sealed partial class ProductListResponse : pb::IMessage<ProductListResponse> {
    private static readonly pb::MessageParser<ProductListResponse> _parser = new pb::MessageParser<ProductListResponse>(() => new ProductListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse(ProductListResponse other) : this() {
      status_ = other.status_;
      productList_ = other.productList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse Clone() {
      return new ProductListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Product> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Product.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Product> productList_ = new pbc::RepeatedField<global::SP.Service.Product>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Product> ProductList {
      get { return productList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 4;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productList_.Equals(other.productList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
      if (Total != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productList_.Add(other.productList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
          case 32: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品详情的返回信息
  /// </summary>
  public sealed partial class ProdctDetailResponse : pb::IMessage<ProdctDetailResponse> {
    private static readonly pb::MessageParser<ProdctDetailResponse> _parser = new pb::MessageParser<ProdctDetailResponse>(() => new ProdctDetailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProdctDetailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse(ProdctDetailResponse other) : this() {
      status_ = other.status_;
      ProductDetail = other.productDetail_ != null ? other.ProductDetail.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse Clone() {
      return new ProdctDetailResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productDetail" field.</summary>
    public const int ProductDetailFieldNumber = 2;
    private global::SP.Service.Product productDetail_;
    /// <summary>
    ///*
    /// 产品内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Product ProductDetail {
      get { return productDetail_; }
      set {
        productDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProdctDetailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProdctDetailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(ProductDetail, other.ProductDetail)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (productDetail_ != null) hash ^= ProductDetail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (productDetail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProductDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (productDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductDetail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProdctDetailResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.productDetail_ != null) {
        if (productDetail_ == null) {
          productDetail_ = new global::SP.Service.Product();
        }
        ProductDetail.MergeFrom(other.ProductDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (productDetail_ == null) {
              productDetail_ = new global::SP.Service.Product();
            }
            input.ReadMessage(productDetail_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 表头属性的请求参数
  /// </summary>
  public sealed partial class TitleAttributeListRequest : pb::IMessage<TitleAttributeListRequest> {
    private static readonly pb::MessageParser<TitleAttributeListRequest> _parser = new pb::MessageParser<TitleAttributeListRequest>(() => new TitleAttributeListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleAttributeListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest(TitleAttributeListRequest other) : this() {
      attType_ = other.attType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest Clone() {
      return new TitleAttributeListRequest(this);
    }

    /// <summary>Field number for the "attType" field.</summary>
    public const int AttTypeFieldNumber = 1;
    private int attType_;
    /// <summary>
    ///*
    /// 属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttType {
      get { return attType_; }
      set {
        attType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleAttributeListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleAttributeListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttType != other.AttType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttType != 0) hash ^= AttType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleAttributeListRequest other) {
      if (other == null) {
        return;
      }
      if (other.AttType != 0) {
        AttType = other.AttType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 表头属性的返回信息
  /// </summary>
  public sealed partial class TitleAttributeListResponse : pb::IMessage<TitleAttributeListResponse> {
    private static readonly pb::MessageParser<TitleAttributeListResponse> _parser = new pb::MessageParser<TitleAttributeListResponse>(() => new TitleAttributeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleAttributeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse(TitleAttributeListResponse other) : this() {
      status_ = other.status_;
      titleAttributeList_ = other.titleAttributeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse Clone() {
      return new TitleAttributeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "titleAttributeList" field.</summary>
    public const int TitleAttributeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Attribute> _repeated_titleAttributeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Attribute.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Attribute> titleAttributeList_ = new pbc::RepeatedField<global::SP.Service.Attribute>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Attribute> TitleAttributeList {
      get { return titleAttributeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleAttributeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleAttributeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!titleAttributeList_.Equals(other.titleAttributeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= titleAttributeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      titleAttributeList_.WriteTo(output, _repeated_titleAttributeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += titleAttributeList_.CalculateSize(_repeated_titleAttributeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleAttributeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      titleAttributeList_.Add(other.titleAttributeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            titleAttributeList_.AddEntriesFrom(input, _repeated_titleAttributeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 搜索产品的请求参数
  /// </summary>
  public sealed partial class ShopListRequest : pb::IMessage<ShopListRequest> {
    private static readonly pb::MessageParser<ShopListRequest> _parser = new pb::MessageParser<ShopListRequest>(() => new ShopListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest(ShopListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      shopType_ = other.shopType_;
      districtId_ = other.districtId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest Clone() {
      return new ShopListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "shopType" field.</summary>
    public const int ShopTypeFieldNumber = 3;
    private int shopType_;
    /// <summary>
    ///*
    /// 店铺分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopType {
      get { return shopType_; }
      set {
        shopType_ = value;
      }
    }

    /// <summary>Field number for the "districtId" field.</summary>
    public const int DistrictIdFieldNumber = 5;
    private int districtId_;
    /// <summary>
    ///*
    /// 区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistrictId {
      get { return districtId_; }
      set {
        districtId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (ShopType != other.ShopType) return false;
      if (DistrictId != other.DistrictId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (ShopType != 0) hash ^= ShopType.GetHashCode();
      if (DistrictId != 0) hash ^= DistrictId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (ShopType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShopType);
      }
      if (DistrictId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DistrictId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (ShopType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopType);
      }
      if (DistrictId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistrictId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.ShopType != 0) {
        ShopType = other.ShopType;
      }
      if (other.DistrictId != 0) {
        DistrictId = other.DistrictId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            ShopType = input.ReadInt32();
            break;
          }
          case 40: {
            DistrictId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的返回信息
  /// </summary>
  public sealed partial class ShopListResponse : pb::IMessage<ShopListResponse> {
    private static readonly pb::MessageParser<ShopListResponse> _parser = new pb::MessageParser<ShopListResponse>(() => new ShopListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse(ShopListResponse other) : this() {
      status_ = other.status_;
      shopList_ = other.shopList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse Clone() {
      return new ShopListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shopList" field.</summary>
    public const int ShopListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Shop> _repeated_shopList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Shop.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Shop> shopList_ = new pbc::RepeatedField<global::SP.Service.Shop>();
    /// <summary>
    ///*
    /// 店铺列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Shop> ShopList {
      get { return shopList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!shopList_.Equals(other.shopList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= shopList_.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      shopList_.WriteTo(output, _repeated_shopList_codec);
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += shopList_.CalculateSize(_repeated_shopList_codec);
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      shopList_.Add(other.shopList_);
      if (other.Total != 0) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            shopList_.AddEntriesFrom(input, _repeated_shopList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺产品的请求参数
  /// </summary>
  public sealed partial class ShopProductListRequest : pb::IMessage<ShopProductListRequest> {
    private static readonly pb::MessageParser<ShopProductListRequest> _parser = new pb::MessageParser<ShopProductListRequest>(() => new ShopProductListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopProductListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest(ShopProductListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      typeId_ = other.typeId_;
      shopId_ = other.shopId_;
      districtId_ = other.districtId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest Clone() {
      return new ShopProductListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品属性ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 4;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "districtId" field.</summary>
    public const int DistrictIdFieldNumber = 5;
    private int districtId_;
    /// <summary>
    ///*
    /// 区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistrictId {
      get { return districtId_; }
      set {
        districtId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopProductListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopProductListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (TypeId != other.TypeId) return false;
      if (ShopId != other.ShopId) return false;
      if (DistrictId != other.DistrictId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (DistrictId != 0) hash ^= DistrictId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TypeId);
      }
      if (ShopId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShopId);
      }
      if (DistrictId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DistrictId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (DistrictId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistrictId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopProductListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.DistrictId != 0) {
        DistrictId = other.DistrictId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TypeId = input.ReadInt64();
            break;
          }
          case 32: {
            ShopId = input.ReadInt32();
            break;
          }
          case 40: {
            DistrictId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的请求参数
  /// </summary>
  public sealed partial class ShopIdRequest : pb::IMessage<ShopIdRequest> {
    private static readonly pb::MessageParser<ShopIdRequest> _parser = new pb::MessageParser<ShopIdRequest>(() => new ShopIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest(ShopIdRequest other) : this() {
      shopId_ = other.shopId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest Clone() {
      return new ShopIdRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的返回信息
  /// </summary>
  public sealed partial class ShopResponse : pb::IMessage<ShopResponse> {
    private static readonly pb::MessageParser<ShopResponse> _parser = new pb::MessageParser<ShopResponse>(() => new ShopResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse(ShopResponse other) : this() {
      status_ = other.status_;
      Shop = other.shop_ != null ? other.Shop.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse Clone() {
      return new ShopResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 2;
    private global::SP.Service.Shop shop_;
    /// <summary>
    ///*
    /// 店铺列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Shop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Shop, other.Shop)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (shop_ != null) hash ^= Shop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (shop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.shop_ != null) {
        if (shop_ == null) {
          shop_ = new global::SP.Service.Shop();
        }
        Shop.MergeFrom(other.Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (shop_ == null) {
              shop_ = new global::SP.Service.Shop();
            }
            input.ReadMessage(shop_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 轮播图的信息
  /// </summary>
  public sealed partial class Carousel : pb::IMessage<Carousel> {
    private static readonly pb::MessageParser<Carousel> _parser = new pb::MessageParser<Carousel>(() => new Carousel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Carousel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel(Carousel other) : this() {
      url_ = other.url_;
      imagePath_ = other.imagePath_;
      displayIndex_ = other.displayIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel Clone() {
      return new Carousel(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    ///*
    /// 轮播图的跳转地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagePath" field.</summary>
    public const int ImagePathFieldNumber = 2;
    private string imagePath_ = "";
    /// <summary>
    ///*
    /// 轮播图的地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayIndex" field.</summary>
    public const int DisplayIndexFieldNumber = 3;
    private int displayIndex_;
    /// <summary>
    ///*
    /// 显示顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayIndex {
      get { return displayIndex_; }
      set {
        displayIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Carousel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Carousel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (ImagePath != other.ImagePath) return false;
      if (DisplayIndex != other.DisplayIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      if (DisplayIndex != 0) hash ^= DisplayIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImagePath);
      }
      if (DisplayIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DisplayIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (ImagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      if (DisplayIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Carousel other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
      if (other.DisplayIndex != 0) {
        DisplayIndex = other.DisplayIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            ImagePath = input.ReadString();
            break;
          }
          case 24: {
            DisplayIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取轮播图的返回信息
  /// </summary>
  public sealed partial class CarouselListResponse : pb::IMessage<CarouselListResponse> {
    private static readonly pb::MessageParser<CarouselListResponse> _parser = new pb::MessageParser<CarouselListResponse>(() => new CarouselListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CarouselListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse(CarouselListResponse other) : this() {
      status_ = other.status_;
      carouselList_ = other.carouselList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse Clone() {
      return new CarouselListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "carouselList" field.</summary>
    public const int CarouselListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Carousel> _repeated_carouselList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Carousel.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Carousel> carouselList_ = new pbc::RepeatedField<global::SP.Service.Carousel>();
    /// <summary>
    ///*
    /// 轮播图列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Carousel> CarouselList {
      get { return carouselList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CarouselListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CarouselListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!carouselList_.Equals(other.carouselList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= carouselList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      carouselList_.WriteTo(output, _repeated_carouselList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += carouselList_.CalculateSize(_repeated_carouselList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CarouselListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      carouselList_.Add(other.carouselList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            carouselList_.AddEntriesFrom(input, _repeated_carouselList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺种类列表的返回信息
  /// </summary>
  public sealed partial class TitleTypeListResponse : pb::IMessage<TitleTypeListResponse> {
    private static readonly pb::MessageParser<TitleTypeListResponse> _parser = new pb::MessageParser<TitleTypeListResponse>(() => new TitleTypeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleTypeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse(TitleTypeListResponse other) : this() {
      status_ = other.status_;
      titleTypeList_ = other.titleTypeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse Clone() {
      return new TitleTypeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "titleTypeList" field.</summary>
    public const int TitleTypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.ProductType> _repeated_titleTypeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.ProductType.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductType> titleTypeList_ = new pbc::RepeatedField<global::SP.Service.ProductType>();
    /// <summary>
    ///*
    /// 店铺种类列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductType> TitleTypeList {
      get { return titleTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleTypeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleTypeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!titleTypeList_.Equals(other.titleTypeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= titleTypeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      titleTypeList_.WriteTo(output, _repeated_titleTypeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += titleTypeList_.CalculateSize(_repeated_titleTypeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleTypeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      titleTypeList_.Add(other.titleTypeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            titleTypeList_.AddEntriesFrom(input, _repeated_titleTypeList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
