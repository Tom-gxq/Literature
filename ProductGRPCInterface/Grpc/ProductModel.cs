// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SP.Service {

  /// <summary>Holder for reflection information generated from ProductModel.proto</summary>
  public static partial class ProductModelReflection {

    #region Descriptor
    /// <summary>File descriptor for ProductModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProductModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm9kdWN0TW9kZWwucHJvdG8SClNQLlNlcnZpY2UaEUNvbW1vbk1vZGVs",
            "LnByb3RvIrcDCgdQcm9kdWN0EhEKCXByb2R1Y3RJZBgBIAEoCRITCgtwcm9k",
            "dWN0TmFtZRgCIAEoCRITCgtwcm9kdWN0Q29kZRgDIAEoCRIYChBzaG9ydERl",
            "c2NyaXB0aW9uGAQgASgJEgwKBHVuaXQYBSABKAkSEwoLZGVzY3JpcHRpb24Y",
            "BiABKAkSEgoKc2FsZVN0YXR1cxgHIAEoBRIRCglhZGRlZERhdGUYCCABKAMS",
            "EwoLbWFya2V0UHJpY2UYCSABKAESIAoFYnJhbmQYCiABKAsyES5TUC5TZXJ2",
            "aWNlLkJyYW5kEhMKC3N1cHBsaWVyc0lkGAsgASgJEiwKC3Byb2R1Y3RUeXBl",
            "GAwgASgLMhcuU1AuU2VydmljZS5Qcm9kdWN0VHlwZRI2ChBwcm9kdWN0QXR0",
            "cmlidXRlGA0gASgLMhwuU1AuU2VydmljZS5Qcm9kdWN0QXR0cmlidXRlEicK",
            "BWltYWdlGA4gAygLMhguU1AuU2VydmljZS5Qcm9kdWN0SW1hZ2USEAoIdmlw",
            "UHJpY2UYDyABKAESDgoGc2t1TnVtGBAgASgFEg4KBnNob3BJZBgRIAEoBSJi",
            "CgVCcmFuZBIPCgdicmFuZElkGAEgASgFEhEKCWJyYW5kTmFtZRgCIAEoCRIM",
            "CgRsb2dvGAMgASgJEhIKCmNvbXBhbnlVcmwYBCABKAkSEwoLZGVzY3JpcHRp",
            "b24YBSABKAkicQoLUHJvZHVjdFR5cGUSDgoGdHlwZUlkGAEgASgDEhAKCHR5",
            "cGVOYW1lGAIgASgJEgwKBGtpbmQYAyABKAUSDgoGcmVtYXJrGAQgASgJEhAK",
            "CHR5cGVQYXRoGAUgASgJEhAKCHR5cGVMb2dvGAYgASgJIjwKDFByb2R1Y3RJ",
            "bWFnZRIKCgJJZBgBIAEoAxIPCgdJbWdQYXRoGAIgASgJEg8KB1Bvc3Rpb24Y",
            "AyABKAUiZwoQUHJvZHVjdEF0dHJpYnV0ZRIoCglhdHRyaWJ1dGUYASABKAsy",
            "FS5TUC5TZXJ2aWNlLkF0dHJpYnV0ZRIpCgV2YWx1ZRgCIAEoCzIaLlNQLlNl",
            "cnZpY2UuQXR0cmlidXRlVmFsdWUiOQoSUHJvZHVjdExpc3RSZXF1ZXN0EhEK",
            "CXBhZ2VJbmRleBgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBSIlChBQcm9kdWN0",
            "SWRSZXF1ZXN0EhEKCXByb2R1Y3RJZBgBIAEoCSJGCg5CcmFuZElkUmVxdWVz",
            "dBIPCgdicmFuZElkGAEgASgFEhEKCXBhZ2VJbmRleBgCIAEoBRIQCghwYWdl",
            "U2l6ZRgDIAEoBSJECg1UeXBlSWRSZXF1ZXN0Eg4KBnR5cGVJZBgBIAEoAxIR",
            "CglwYWdlSW5kZXgYAiABKAUSEAoIcGFnZVNpemUYAyABKAUiTgoSQXR0cmli",
            "dXRlSWRSZXF1ZXN0EhMKC2F0dHJpYnV0ZUlkGAEgASgDEhEKCXBhZ2VJbmRl",
            "eBgCIAEoBRIQCghwYWdlU2l6ZRgDIAEoBSJMChRTZWFyY2hQcm9kdWN0UmVx",
            "dWVzdBIPCgdrZXlXb3JkGAEgASgJEhEKCXBhZ2VJbmRleBgCIAEoBRIQCghw",
            "YWdlU2l6ZRgDIAEoBSJeChNQcm9kdWN0TGlzdFJlc3BvbnNlEg4KBnN0YXR1",
            "cxgBIAEoBRIoCgtwcm9kdWN0TGlzdBgCIAMoCzITLlNQLlNlcnZpY2UuUHJv",
            "ZHVjdBINCgV0b3RhbBgEIAEoAyJSChRQcm9kY3REZXRhaWxSZXNwb25zZRIO",
            "CgZzdGF0dXMYASABKAUSKgoNcHJvZHVjdERldGFpbBgCIAEoCzITLlNQLlNl",
            "cnZpY2UuUHJvZHVjdCIsChlUaXRsZUF0dHJpYnV0ZUxpc3RSZXF1ZXN0Eg8K",
            "B2F0dFR5cGUYASABKAUiXwoaVGl0bGVBdHRyaWJ1dGVMaXN0UmVzcG9uc2US",
            "DgoGc3RhdHVzGAEgASgFEjEKEnRpdGxlQXR0cmlidXRlTGlzdBgCIAMoCzIV",
            "LlNQLlNlcnZpY2UuQXR0cmlidXRlIlwKD1Nob3BMaXN0UmVxdWVzdBIRCglw",
            "YWdlSW5kZXgYASABKAUSEAoIcGFnZVNpemUYAiABKAUSEAoIc2hvcFR5cGUY",
            "AyABKAUSEgoKZGlzdHJpY3RJZBgFIAEoBSJVChBTaG9wTGlzdFJlc3BvbnNl",
            "Eg4KBnN0YXR1cxgBIAEoBRIiCghzaG9wTGlzdBgCIAMoCzIQLlNQLlNlcnZp",
            "Y2UuU2hvcBINCgV0b3RhbBgDIAEoBSJxChZTaG9wUHJvZHVjdExpc3RSZXF1",
            "ZXN0EhEKCXBhZ2VJbmRleBgBIAEoBRIQCghwYWdlU2l6ZRgCIAEoBRIOCgZ0",
            "eXBlSWQYAyABKAMSDgoGc2hvcElkGAQgASgFEhIKCmRpc3RyaWN0SWQYBSAB",
            "KAUiHwoNU2hvcElkUmVxdWVzdBIOCgZzaG9wSWQYASABKAUiPgoMU2hvcFJl",
            "c3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIeCgRzaG9wGAIgASgLMhAuU1AuU2Vy",
            "dmljZS5TaG9wIkAKCENhcm91c2VsEgsKA3VybBgBIAEoCRIRCglpbWFnZVBh",
            "dGgYAiABKAkSFAoMZGlzcGxheUluZGV4GAMgASgFIlIKFENhcm91c2VsTGlz",
            "dFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIqCgxjYXJvdXNlbExpc3QYAiAD",
            "KAsyFC5TUC5TZXJ2aWNlLkNhcm91c2VsIlcKFVRpdGxlVHlwZUxpc3RSZXNw",
            "b25zZRIOCgZzdGF0dXMYASABKAUSLgoNdGl0bGVUeXBlTGlzdBgCIAMoCzIX",
            "LlNQLlNlcnZpY2UuUHJvZHVjdFR5cGUiIAoOUmVzdWx0UmVzcG9uc2USDgoG",
            "c3RhdHVzGAEgASgFIl8KElNob3BQcm9kdWN0UmVxdWVzdBIRCglwYWdlSW5k",
            "ZXgYASABKAUSEAoIcGFnZVNpemUYAiABKAUSDgoGdHlwZUlkGAMgASgDEhQK",
            "DHNlY29uZFR5cGVJZBgEIAEoAyIbCgtLaW5kUmVxdWVzdBIMCgRraW5kGAEg",
            "ASgFIlsKF1Byb2R1Y3RUeXBlTGlzdFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEo",
            "BRIwCg9wcm9kdWN0VHlwZUxpc3QYAiADKAsyFy5TUC5TZXJ2aWNlLlByb2R1",
            "Y3RUeXBlIsUBCg1TZWxsZXJQcm9kdWN0EhAKCG1haW5UeXBlGAEgASgDEhIK",
            "CnNlY29uZFR5cGUYAiABKAMSEwoLcHJvZHVjdE5hbWUYAyABKAkSEQoJaW1h",
            "Z2VQYXRoGAQgASgJEhMKC21hcmtldFByaWNlGAUgASgBEhUKDXB1cmNoYXNl",
            "UHJpY2UYBiABKAESEQoJcHJvZHVjdElkGAcgASgJEhIKCnNhbGVTdGF0dXMY",
            "CCABKAUSEwoLc3VwcGxpZXJzSWQYCSABKAkiUwoVUHJvZHVjdERldGFpbFJl",
            "c3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIqCgdwcm9kdWN0GAIgASgLMhkuU1Au",
            "U2VydmljZS5TZWxsZXJQcm9kdWN0IogBCg5Qcm9kdWN0UmVxdWVzdBIQCght",
            "YWluVHlwZRgBIAEoAxISCgpzZWNvbmRUeXBlGAIgASgDEhMKC3N1cHBsaWVy",
            "c0lkGAMgASgFEhUKDXB1cmNoYXNlUHJpY2UYBiABKAESEQoJYWNjb3VudElk",
            "GAcgASgJEhEKCXByb2R1Y3RJZBgIIAEoCSJqChlTZWxsZXJQcm9kdWN0TGlz",
            "dFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIuCgtwcm9kdWN0TGlzdBgCIAMo",
            "CzIZLlNQLlNlcnZpY2UuU2VsbGVyUHJvZHVjdBINCgV0b3RhbBgEIAEoAyJ4",
            "ChhTZWxsZXJTaG9wUHJvZHVjdFJlcXVlc3QSEQoJcGFnZUluZGV4GAEgASgF",
            "EhAKCHBhZ2VTaXplGAIgASgFEg4KBnR5cGVJZBgDIAEoAxIUCgxzZWNvbmRU",
            "eXBlSWQYBCABKAMSEQoJYWNjb3VudElkGAUgASgJIj0KGFByb2R1Y3RTYWxl",
            "U3RhdHVzUmVxdWVzdBIRCglwcm9kdWN0SWQYBSABKAkSDgoGc3RhdHVzGAEg",
            "ASgFIjgKElNob3BTdGF0dXNSZXNwb25zZRIOCgZzdGF0dXMYASABKAUSEgoK",
            "c2hvcFN0YXR1cxgCIAEoCCI6ChVPcGVuU2hvcFN0YXR1c1JlcXVlc3QSEQoJ",
            "YWNjb3VudElkGAEgASgJEg4KBnN0YXR1cxgCIAEoCCKUAQoaQWRkU3VwcGxp",
            "ZXJzUHJvZHVjdFJlcXVlc3QSEAoIbWFpblR5cGUYASABKAMSEgoKc2Vjb25k",
            "VHlwZRgCIAEoAxITCgtzdXBwbGllcnNJZBgDIAEoBRIVCg1wdXJjaGFzZVBy",
            "aWNlGAYgASgBEhEKCWFjY291bnRJZBgHIAEoCRIRCglwcm9kdWN0SWQYCCAB",
            "KAkiQQoZQWRkU3VwcGxpZXJzUmVnaW9uUmVxdWVzdBISCgpzdXBwbGllcklk",
            "GAEgASgFEhAKCHJlZ2lvbklkGAIgASgFIlkKG1N1cHBsaWVyc1JlZ2lvbkxp",
            "c3RSZXNwb25zZRIOCgZzdGF0dXMYASABKAUSKgoKcmVnaW9uTGlzdBgCIAMo",
            "CzIWLlNQLlNlcnZpY2UuUmVnaW9uRGF0YSJVChVTdXBwbGllcnNUeXBlUmVz",
            "cG9uc2USDgoGc3RhdHVzGAEgASgFEiwKC3Byb2R1Y3RUeXBlGAIgASgLMhcu",
            "U1AuU2VydmljZS5Qcm9kdWN0VHlwZSJTChdTdXBwbGllcnNQcm9kdWN0UmVx",
            "dWVzdBISCgpzdXBwbGllcklkGAEgASgFEhAKCG1haW5UeXBlGAIgASgFEhIK",
            "CnNlY29uZFR5cGUYAyABKAUioQEKEFN1cHBsaWVyc1Byb2R1Y3QSEwoLc3Vw",
            "cGxpZXJzSWQYASABKAUSEwoLcHJvZHVjdE5hbWUYAiABKAkSFQoNcHVyY2hh",
            "c2VQcmljZRgGIAEoARIRCglwcm9kdWN0SWQYByABKAkSEgoKc2FsZVN0YXR1",
            "cxgIIAEoBRISCgphbGVydFN0b2NrGAkgASgFEhEKCWltYWdlUGF0aBgKIAEo",
            "CSJhChxTdXBwbGllcnNQcm9kdWN0TGlzdFJlc3BvbnNlEg4KBnN0YXR1cxgB",
            "IAEoBRIxCgtwcm9kdWN0TGlzdBgCIAMoCzIcLlNQLlNlcnZpY2UuU3VwcGxp",
            "ZXJzUHJvZHVjdCJ4ChhTZWxsZXJGb29kUHJvZHVjdFJlcXVlc3QSEQoJcGFn",
            "ZUluZGV4GAEgASgFEhIKCmlzU2VsZWN0ZWQYAiABKAgSEQoJYWNjb3VudElk",
            "GAMgASgJEhAKCHBhZ2VTaXplGAQgASgFEhAKCHJlZ2lvbklkGAUgASgFIq0B",
            "ChFTZWxsZXJGb29kUHJvZHVjdBITCgtwcm9kdWN0TmFtZRgDIAEoCRIRCglp",
            "bWFnZVBhdGgYBCABKAkSFQoNcHVyY2hhc2VQcmljZRgGIAEoARIRCglwcm9k",
            "dWN0SWQYByABKAkSFgoOc2VsZWN0ZWRTdGF0dXMYCCABKAUSEwoLc3VwcGxp",
            "ZXJzSWQYCSABKAUSGQoRc3VwcGxpZXJQcm9kdWN0SWQYCiABKAUicgodU2Vs",
            "bGVyRm9vZFByb2R1Y3RMaXN0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEjIK",
            "C3Byb2R1Y3RMaXN0GAIgAygLMh0uU1AuU2VydmljZS5TZWxsZXJGb29kUHJv",
            "ZHVjdBINCgV0b3RhbBgEIAEoAyJeCiBTdXBwbGllclByb2R1Y3RTYWxlU3Rh",
            "dHVzUmVxdWVzdBITCgtzdXBwbGllcnNJZBgBIAEoBRIRCglwcm9kdWN0SWQY",
            "AiABKAkSEgoKc2FsZVN0YXR1cxgDIAEoBSJeChpTZWxlY3RTZWxsZXJQcm9k",
            "dWN0UmVxdWVzdBIZChFzdXBwbGllclByb2R1Y3RJZBgBIAEoBRIRCglhY2Nv",
            "dW50SWQYAiABKAkSEgoKaXNTZWxlY3RlZBgDIAEoCCKaAQoUU3VwcGxpZXJJ",
            "bmZvUmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEhMKC3N1cHBsaWVyc0lkGAIg",
            "ASgFEhUKDXN1cHBsaWVyc05hbWUYAyABKAkSEQoJYWNjb3VudElkGAQgASgJ",
            "EhAKCGFsaXBheU5vGAUgASgJEhEKCWNlbGxQaG9uZRgGIAEoCRIOCgZ0eXBl",
            "SWQYByABKAUiWQoYU3VwcGxpZXJzUHJvZHVjdFJlc3BvbnNlEg4KBnN0YXR1",
            "cxgBIAEoBRItCgdwcm9kdWN0GAIgASgLMhwuU1AuU2VydmljZS5TdXBwbGll",
            "cnNQcm9kdWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SP.Service.CommonModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Product), global::SP.Service.Product.Parser, new[]{ "ProductId", "ProductName", "ProductCode", "ShortDescription", "Unit", "Description", "SaleStatus", "AddedDate", "MarketPrice", "Brand", "SuppliersId", "ProductType", "ProductAttribute", "Image", "VipPrice", "SkuNum", "ShopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Brand), global::SP.Service.Brand.Parser, new[]{ "BrandId", "BrandName", "Logo", "CompanyUrl", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductType), global::SP.Service.ProductType.Parser, new[]{ "TypeId", "TypeName", "Kind", "Remark", "TypePath", "TypeLogo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductImage), global::SP.Service.ProductImage.Parser, new[]{ "Id", "ImgPath", "Postion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductAttribute), global::SP.Service.ProductAttribute.Parser, new[]{ "Attribute", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductListRequest), global::SP.Service.ProductListRequest.Parser, new[]{ "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductIdRequest), global::SP.Service.ProductIdRequest.Parser, new[]{ "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.BrandIdRequest), global::SP.Service.BrandIdRequest.Parser, new[]{ "BrandId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TypeIdRequest), global::SP.Service.TypeIdRequest.Parser, new[]{ "TypeId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AttributeIdRequest), global::SP.Service.AttributeIdRequest.Parser, new[]{ "AttributeId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SearchProductRequest), global::SP.Service.SearchProductRequest.Parser, new[]{ "KeyWord", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductListResponse), global::SP.Service.ProductListResponse.Parser, new[]{ "Status", "ProductList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProdctDetailResponse), global::SP.Service.ProdctDetailResponse.Parser, new[]{ "Status", "ProductDetail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleAttributeListRequest), global::SP.Service.TitleAttributeListRequest.Parser, new[]{ "AttType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleAttributeListResponse), global::SP.Service.TitleAttributeListResponse.Parser, new[]{ "Status", "TitleAttributeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopListRequest), global::SP.Service.ShopListRequest.Parser, new[]{ "PageIndex", "PageSize", "ShopType", "DistrictId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopListResponse), global::SP.Service.ShopListResponse.Parser, new[]{ "Status", "ShopList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopProductListRequest), global::SP.Service.ShopProductListRequest.Parser, new[]{ "PageIndex", "PageSize", "TypeId", "ShopId", "DistrictId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopIdRequest), global::SP.Service.ShopIdRequest.Parser, new[]{ "ShopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopResponse), global::SP.Service.ShopResponse.Parser, new[]{ "Status", "Shop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Carousel), global::SP.Service.Carousel.Parser, new[]{ "Url", "ImagePath", "DisplayIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.CarouselListResponse), global::SP.Service.CarouselListResponse.Parser, new[]{ "Status", "CarouselList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TitleTypeListResponse), global::SP.Service.TitleTypeListResponse.Parser, new[]{ "Status", "TitleTypeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ResultResponse), global::SP.Service.ResultResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopProductRequest), global::SP.Service.ShopProductRequest.Parser, new[]{ "PageIndex", "PageSize", "TypeId", "SecondTypeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.KindRequest), global::SP.Service.KindRequest.Parser, new[]{ "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductTypeListResponse), global::SP.Service.ProductTypeListResponse.Parser, new[]{ "Status", "ProductTypeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerProduct), global::SP.Service.SellerProduct.Parser, new[]{ "MainType", "SecondType", "ProductName", "ImagePath", "MarketPrice", "PurchasePrice", "ProductId", "SaleStatus", "SuppliersId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductDetailResponse), global::SP.Service.ProductDetailResponse.Parser, new[]{ "Status", "Product" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductRequest), global::SP.Service.ProductRequest.Parser, new[]{ "MainType", "SecondType", "SuppliersId", "PurchasePrice", "AccountId", "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerProductListResponse), global::SP.Service.SellerProductListResponse.Parser, new[]{ "Status", "ProductList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerShopProductRequest), global::SP.Service.SellerShopProductRequest.Parser, new[]{ "PageIndex", "PageSize", "TypeId", "SecondTypeId", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductSaleStatusRequest), global::SP.Service.ProductSaleStatusRequest.Parser, new[]{ "ProductId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShopStatusResponse), global::SP.Service.ShopStatusResponse.Parser, new[]{ "Status", "ShopStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OpenShopStatusRequest), global::SP.Service.OpenShopStatusRequest.Parser, new[]{ "AccountId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddSuppliersProductRequest), global::SP.Service.AddSuppliersProductRequest.Parser, new[]{ "MainType", "SecondType", "SuppliersId", "PurchasePrice", "AccountId", "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddSuppliersRegionRequest), global::SP.Service.AddSuppliersRegionRequest.Parser, new[]{ "SupplierId", "RegionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersRegionListResponse), global::SP.Service.SuppliersRegionListResponse.Parser, new[]{ "Status", "RegionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersTypeResponse), global::SP.Service.SuppliersTypeResponse.Parser, new[]{ "Status", "ProductType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersProductRequest), global::SP.Service.SuppliersProductRequest.Parser, new[]{ "SupplierId", "MainType", "SecondType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersProduct), global::SP.Service.SuppliersProduct.Parser, new[]{ "SuppliersId", "ProductName", "PurchasePrice", "ProductId", "SaleStatus", "AlertStock", "ImagePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersProductListResponse), global::SP.Service.SuppliersProductListResponse.Parser, new[]{ "Status", "ProductList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerFoodProductRequest), global::SP.Service.SellerFoodProductRequest.Parser, new[]{ "PageIndex", "IsSelected", "AccountId", "PageSize", "RegionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerFoodProduct), global::SP.Service.SellerFoodProduct.Parser, new[]{ "ProductName", "ImagePath", "PurchasePrice", "ProductId", "SelectedStatus", "SuppliersId", "SupplierProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SellerFoodProductListResponse), global::SP.Service.SellerFoodProductListResponse.Parser, new[]{ "Status", "ProductList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SupplierProductSaleStatusRequest), global::SP.Service.SupplierProductSaleStatusRequest.Parser, new[]{ "SuppliersId", "ProductId", "SaleStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SelectSellerProductRequest), global::SP.Service.SelectSellerProductRequest.Parser, new[]{ "SupplierProductId", "AccountId", "IsSelected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SupplierInfoResponse), global::SP.Service.SupplierInfoResponse.Parser, new[]{ "Status", "SuppliersId", "SuppliersName", "AccountId", "AlipayNo", "CellPhone", "TypeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SuppliersProductResponse), global::SP.Service.SuppliersProductResponse.Parser, new[]{ "Status", "Product" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// 商品的返回信息
  /// </summary>
  public sealed partial class Product : pb::IMessage<Product> {
    private static readonly pb::MessageParser<Product> _parser = new pb::MessageParser<Product>(() => new Product());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Product> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product(Product other) : this() {
      productId_ = other.productId_;
      productName_ = other.productName_;
      productCode_ = other.productCode_;
      shortDescription_ = other.shortDescription_;
      unit_ = other.unit_;
      description_ = other.description_;
      saleStatus_ = other.saleStatus_;
      addedDate_ = other.addedDate_;
      marketPrice_ = other.marketPrice_;
      Brand = other.brand_ != null ? other.Brand.Clone() : null;
      suppliersId_ = other.suppliersId_;
      ProductType = other.productType_ != null ? other.ProductType.Clone() : null;
      ProductAttribute = other.productAttribute_ != null ? other.ProductAttribute.Clone() : null;
      image_ = other.image_.Clone();
      vipPrice_ = other.vipPrice_;
      skuNum_ = other.skuNum_;
      shopId_ = other.shopId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product Clone() {
      return new Product(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 2;
    private string productName_ = "";
    /// <summary>
    ///*
    /// 商品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productCode" field.</summary>
    public const int ProductCodeFieldNumber = 3;
    private string productCode_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductCode {
      get { return productCode_; }
      set {
        productCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortDescription" field.</summary>
    public const int ShortDescriptionFieldNumber = 4;
    private string shortDescription_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 5;
    private string unit_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saleStatus" field.</summary>
    public const int SaleStatusFieldNumber = 7;
    private int saleStatus_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleStatus {
      get { return saleStatus_; }
      set {
        saleStatus_ = value;
      }
    }

    /// <summary>Field number for the "addedDate" field.</summary>
    public const int AddedDateFieldNumber = 8;
    private long addedDate_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddedDate {
      get { return addedDate_; }
      set {
        addedDate_ = value;
      }
    }

    /// <summary>Field number for the "marketPrice" field.</summary>
    public const int MarketPriceFieldNumber = 9;
    private double marketPrice_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarketPrice {
      get { return marketPrice_; }
      set {
        marketPrice_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 10;
    private global::SP.Service.Brand brand_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Brand Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 11;
    private string suppliersId_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productType" field.</summary>
    public const int ProductTypeFieldNumber = 12;
    private global::SP.Service.ProductType productType_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.ProductType ProductType {
      get { return productType_; }
      set {
        productType_ = value;
      }
    }

    /// <summary>Field number for the "productAttribute" field.</summary>
    public const int ProductAttributeFieldNumber = 13;
    private global::SP.Service.ProductAttribute productAttribute_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.ProductAttribute ProductAttribute {
      get { return productAttribute_; }
      set {
        productAttribute_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SP.Service.ProductImage> _repeated_image_codec
        = pb::FieldCodec.ForMessage(114, global::SP.Service.ProductImage.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductImage> image_ = new pbc::RepeatedField<global::SP.Service.ProductImage>();
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductImage> Image {
      get { return image_; }
    }

    /// <summary>Field number for the "vipPrice" field.</summary>
    public const int VipPriceFieldNumber = 15;
    private double vipPrice_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VipPrice {
      get { return vipPrice_; }
      set {
        vipPrice_ = value;
      }
    }

    /// <summary>Field number for the "skuNum" field.</summary>
    public const int SkuNumFieldNumber = 16;
    private int skuNum_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkuNum {
      get { return skuNum_; }
      set {
        skuNum_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 17;
    private int shopId_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Product);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Product other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (ProductName != other.ProductName) return false;
      if (ProductCode != other.ProductCode) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (Unit != other.Unit) return false;
      if (Description != other.Description) return false;
      if (SaleStatus != other.SaleStatus) return false;
      if (AddedDate != other.AddedDate) return false;
      if (MarketPrice != other.MarketPrice) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (!object.Equals(ProductType, other.ProductType)) return false;
      if (!object.Equals(ProductAttribute, other.ProductAttribute)) return false;
      if(!image_.Equals(other.image_)) return false;
      if (VipPrice != other.VipPrice) return false;
      if (SkuNum != other.SkuNum) return false;
      if (ShopId != other.ShopId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ProductCode.Length != 0) hash ^= ProductCode.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (SaleStatus != 0) hash ^= SaleStatus.GetHashCode();
      if (AddedDate != 0L) hash ^= AddedDate.GetHashCode();
      if (MarketPrice != 0D) hash ^= MarketPrice.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (SuppliersId.Length != 0) hash ^= SuppliersId.GetHashCode();
      if (productType_ != null) hash ^= ProductType.GetHashCode();
      if (productAttribute_ != null) hash ^= ProductAttribute.GetHashCode();
      hash ^= image_.GetHashCode();
      if (VipPrice != 0D) hash ^= VipPrice.GetHashCode();
      if (SkuNum != 0) hash ^= SkuNum.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductName);
      }
      if (ProductCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductCode);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShortDescription);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Unit);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (SaleStatus != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SaleStatus);
      }
      if (AddedDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(AddedDate);
      }
      if (MarketPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MarketPrice);
      }
      if (brand_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Brand);
      }
      if (SuppliersId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SuppliersId);
      }
      if (productType_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ProductType);
      }
      if (productAttribute_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ProductAttribute);
      }
      image_.WriteTo(output, _repeated_image_codec);
      if (VipPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VipPrice);
      }
      if (SkuNum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SkuNum);
      }
      if (ShopId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ProductCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductCode);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (SaleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleStatus);
      }
      if (AddedDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddedDate);
      }
      if (MarketPrice != 0D) {
        size += 1 + 8;
      }
      if (brand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (SuppliersId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SuppliersId);
      }
      if (productType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductType);
      }
      if (productAttribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductAttribute);
      }
      size += image_.CalculateSize(_repeated_image_codec);
      if (VipPrice != 0D) {
        size += 1 + 8;
      }
      if (SkuNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkuNum);
      }
      if (ShopId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Product other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ProductCode.Length != 0) {
        ProductCode = other.ProductCode;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.SaleStatus != 0) {
        SaleStatus = other.SaleStatus;
      }
      if (other.AddedDate != 0L) {
        AddedDate = other.AddedDate;
      }
      if (other.MarketPrice != 0D) {
        MarketPrice = other.MarketPrice;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          brand_ = new global::SP.Service.Brand();
        }
        Brand.MergeFrom(other.Brand);
      }
      if (other.SuppliersId.Length != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.productType_ != null) {
        if (productType_ == null) {
          productType_ = new global::SP.Service.ProductType();
        }
        ProductType.MergeFrom(other.ProductType);
      }
      if (other.productAttribute_ != null) {
        if (productAttribute_ == null) {
          productAttribute_ = new global::SP.Service.ProductAttribute();
        }
        ProductAttribute.MergeFrom(other.ProductAttribute);
      }
      image_.Add(other.image_);
      if (other.VipPrice != 0D) {
        VipPrice = other.VipPrice;
      }
      if (other.SkuNum != 0) {
        SkuNum = other.SkuNum;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
          case 18: {
            ProductName = input.ReadString();
            break;
          }
          case 26: {
            ProductCode = input.ReadString();
            break;
          }
          case 34: {
            ShortDescription = input.ReadString();
            break;
          }
          case 42: {
            Unit = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 56: {
            SaleStatus = input.ReadInt32();
            break;
          }
          case 64: {
            AddedDate = input.ReadInt64();
            break;
          }
          case 73: {
            MarketPrice = input.ReadDouble();
            break;
          }
          case 82: {
            if (brand_ == null) {
              brand_ = new global::SP.Service.Brand();
            }
            input.ReadMessage(brand_);
            break;
          }
          case 90: {
            SuppliersId = input.ReadString();
            break;
          }
          case 98: {
            if (productType_ == null) {
              productType_ = new global::SP.Service.ProductType();
            }
            input.ReadMessage(productType_);
            break;
          }
          case 106: {
            if (productAttribute_ == null) {
              productAttribute_ = new global::SP.Service.ProductAttribute();
            }
            input.ReadMessage(productAttribute_);
            break;
          }
          case 114: {
            image_.AddEntriesFrom(input, _repeated_image_codec);
            break;
          }
          case 121: {
            VipPrice = input.ReadDouble();
            break;
          }
          case 128: {
            SkuNum = input.ReadInt32();
            break;
          }
          case 136: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 品牌的返回信息
  /// </summary>
  public sealed partial class Brand : pb::IMessage<Brand> {
    private static readonly pb::MessageParser<Brand> _parser = new pb::MessageParser<Brand>(() => new Brand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Brand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand(Brand other) : this() {
      brandId_ = other.brandId_;
      brandName_ = other.brandName_;
      logo_ = other.logo_;
      companyUrl_ = other.companyUrl_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Brand Clone() {
      return new Brand(this);
    }

    /// <summary>Field number for the "brandId" field.</summary>
    public const int BrandIdFieldNumber = 1;
    private int brandId_;
    /// <summary>
    ///*
    /// 品牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrandId {
      get { return brandId_; }
      set {
        brandId_ = value;
      }
    }

    /// <summary>Field number for the "brandName" field.</summary>
    public const int BrandNameFieldNumber = 2;
    private string brandName_ = "";
    /// <summary>
    ///*
    /// 品牌名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrandName {
      get { return brandName_; }
      set {
        brandName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 3;
    private string logo_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "companyUrl" field.</summary>
    public const int CompanyUrlFieldNumber = 4;
    private string companyUrl_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompanyUrl {
      get { return companyUrl_; }
      set {
        companyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Brand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Brand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrandId != other.BrandId) return false;
      if (BrandName != other.BrandName) return false;
      if (Logo != other.Logo) return false;
      if (CompanyUrl != other.CompanyUrl) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrandId != 0) hash ^= BrandId.GetHashCode();
      if (BrandName.Length != 0) hash ^= BrandName.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      if (CompanyUrl.Length != 0) hash ^= CompanyUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BrandId);
      }
      if (BrandName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BrandName);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Logo);
      }
      if (CompanyUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CompanyUrl);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrandId);
      }
      if (BrandName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrandName);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
      }
      if (CompanyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Brand other) {
      if (other == null) {
        return;
      }
      if (other.BrandId != 0) {
        BrandId = other.BrandId;
      }
      if (other.BrandName.Length != 0) {
        BrandName = other.BrandName;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      if (other.CompanyUrl.Length != 0) {
        CompanyUrl = other.CompanyUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrandId = input.ReadInt32();
            break;
          }
          case 18: {
            BrandName = input.ReadString();
            break;
          }
          case 26: {
            Logo = input.ReadString();
            break;
          }
          case 34: {
            CompanyUrl = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型的返回信息
  /// </summary>
  public sealed partial class ProductType : pb::IMessage<ProductType> {
    private static readonly pb::MessageParser<ProductType> _parser = new pb::MessageParser<ProductType>(() => new ProductType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType(ProductType other) : this() {
      typeId_ = other.typeId_;
      typeName_ = other.typeName_;
      kind_ = other.kind_;
      remark_ = other.remark_;
      typePath_ = other.typePath_;
      typeLogo_ = other.typeLogo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductType Clone() {
      return new ProductType(this);
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "typeName" field.</summary>
    public const int TypeNameFieldNumber = 2;
    private string typeName_ = "";
    /// <summary>
    ///*
    /// 商品类型名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private int kind_;
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 4;
    private string remark_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typePath" field.</summary>
    public const int TypePathFieldNumber = 5;
    private string typePath_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypePath {
      get { return typePath_; }
      set {
        typePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeLogo" field.</summary>
    public const int TypeLogoFieldNumber = 6;
    private string typeLogo_ = "";
    /// <summary>
    ///*
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeLogo {
      get { return typeLogo_; }
      set {
        typeLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (TypeName != other.TypeName) return false;
      if (Kind != other.Kind) return false;
      if (Remark != other.Remark) return false;
      if (TypePath != other.TypePath) return false;
      if (TypeLogo != other.TypeLogo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (TypePath.Length != 0) hash ^= TypePath.GetHashCode();
      if (TypeLogo.Length != 0) hash ^= TypeLogo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TypeId);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TypeName);
      }
      if (Kind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Kind);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Remark);
      }
      if (TypePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TypePath);
      }
      if (TypeLogo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TypeLogo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (TypePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypePath);
      }
      if (TypeLogo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeLogo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductType other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.TypePath.Length != 0) {
        TypePath = other.TypePath;
      }
      if (other.TypeLogo.Length != 0) {
        TypeLogo = other.TypeLogo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TypeId = input.ReadInt64();
            break;
          }
          case 18: {
            TypeName = input.ReadString();
            break;
          }
          case 24: {
            Kind = input.ReadInt32();
            break;
          }
          case 34: {
            Remark = input.ReadString();
            break;
          }
          case 42: {
            TypePath = input.ReadString();
            break;
          }
          case 50: {
            TypeLogo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品的图片返回信息
  /// </summary>
  public sealed partial class ProductImage : pb::IMessage<ProductImage> {
    private static readonly pb::MessageParser<ProductImage> _parser = new pb::MessageParser<ProductImage>(() => new ProductImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage(ProductImage other) : this() {
      id_ = other.id_;
      imgPath_ = other.imgPath_;
      postion_ = other.postion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductImage Clone() {
      return new ProductImage(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///*
    /// 商品图片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ImgPath" field.</summary>
    public const int ImgPathFieldNumber = 2;
    private string imgPath_ = "";
    /// <summary>
    ///*
    /// 商品图片路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgPath {
      get { return imgPath_; }
      set {
        imgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Postion" field.</summary>
    public const int PostionFieldNumber = 3;
    private int postion_;
    /// <summary>
    ///*
    /// 商品图片路径位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Postion {
      get { return postion_; }
      set {
        postion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ImgPath != other.ImgPath) return false;
      if (Postion != other.Postion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ImgPath.Length != 0) hash ^= ImgPath.GetHashCode();
      if (Postion != 0) hash ^= Postion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ImgPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImgPath);
      }
      if (Postion != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Postion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ImgPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgPath);
      }
      if (Postion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Postion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductImage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ImgPath.Length != 0) {
        ImgPath = other.ImgPath;
      }
      if (other.Postion != 0) {
        Postion = other.Postion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            ImgPath = input.ReadString();
            break;
          }
          case 24: {
            Postion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型属性的返回信息
  /// </summary>
  public sealed partial class ProductAttribute : pb::IMessage<ProductAttribute> {
    private static readonly pb::MessageParser<ProductAttribute> _parser = new pb::MessageParser<ProductAttribute>(() => new ProductAttribute());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute(ProductAttribute other) : this() {
      Attribute = other.attribute_ != null ? other.Attribute.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductAttribute Clone() {
      return new ProductAttribute(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private global::SP.Service.Attribute attribute_;
    /// <summary>
    ///*
    /// 商品类型属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Attribute Attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::SP.Service.AttributeValue value_;
    /// <summary>
    ///*
    /// 商品类型属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AttributeValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attribute_ != null) hash ^= Attribute.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attribute_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attribute);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductAttribute other) {
      if (other == null) {
        return;
      }
      if (other.attribute_ != null) {
        if (attribute_ == null) {
          attribute_ = new global::SP.Service.Attribute();
        }
        Attribute.MergeFrom(other.Attribute);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::SP.Service.AttributeValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (attribute_ == null) {
              attribute_ = new global::SP.Service.Attribute();
            }
            input.ReadMessage(attribute_);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::SP.Service.AttributeValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品链表的请求信息
  /// </summary>
  public sealed partial class ProductListRequest : pb::IMessage<ProductListRequest> {
    private static readonly pb::MessageParser<ProductListRequest> _parser = new pb::MessageParser<ProductListRequest>(() => new ProductListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest(ProductListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListRequest Clone() {
      return new ProductListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品ID的请求参数
  /// </summary>
  public sealed partial class ProductIdRequest : pb::IMessage<ProductIdRequest> {
    private static readonly pb::MessageParser<ProductIdRequest> _parser = new pb::MessageParser<ProductIdRequest>(() => new ProductIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest(ProductIdRequest other) : this() {
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductIdRequest Clone() {
      return new ProductIdRequest(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 品牌ID的请求参数
  /// </summary>
  public sealed partial class BrandIdRequest : pb::IMessage<BrandIdRequest> {
    private static readonly pb::MessageParser<BrandIdRequest> _parser = new pb::MessageParser<BrandIdRequest>(() => new BrandIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrandIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest(BrandIdRequest other) : this() {
      brandId_ = other.brandId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrandIdRequest Clone() {
      return new BrandIdRequest(this);
    }

    /// <summary>Field number for the "brandId" field.</summary>
    public const int BrandIdFieldNumber = 1;
    private int brandId_;
    /// <summary>
    ///*
    /// 品牌ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrandId {
      get { return brandId_; }
      set {
        brandId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrandIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrandIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrandId != other.BrandId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrandId != 0) hash ^= BrandId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrandId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BrandId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrandId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrandId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrandIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.BrandId != 0) {
        BrandId = other.BrandId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrandId = input.ReadInt32();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品类型ID的请求参数
  /// </summary>
  public sealed partial class TypeIdRequest : pb::IMessage<TypeIdRequest> {
    private static readonly pb::MessageParser<TypeIdRequest> _parser = new pb::MessageParser<TypeIdRequest>(() => new TypeIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest(TypeIdRequest other) : this() {
      typeId_ = other.typeId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeIdRequest Clone() {
      return new TypeIdRequest(this);
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TypeId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TypeId = input.ReadInt64();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 商品属性ID的请求参数
  /// </summary>
  public sealed partial class AttributeIdRequest : pb::IMessage<AttributeIdRequest> {
    private static readonly pb::MessageParser<AttributeIdRequest> _parser = new pb::MessageParser<AttributeIdRequest>(() => new AttributeIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest(AttributeIdRequest other) : this() {
      attributeId_ = other.attributeId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeIdRequest Clone() {
      return new AttributeIdRequest(this);
    }

    /// <summary>Field number for the "attributeId" field.</summary>
    public const int AttributeIdFieldNumber = 1;
    private long attributeId_;
    /// <summary>
    ///*
    /// 商品属性ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttributeId {
      get { return attributeId_; }
      set {
        attributeId_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttributeId != other.AttributeId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttributeId != 0L) hash ^= AttributeId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttributeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AttributeId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttributeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttributeId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.AttributeId != 0L) {
        AttributeId = other.AttributeId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttributeId = input.ReadInt64();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 搜索产品的请求参数
  /// </summary>
  public sealed partial class SearchProductRequest : pb::IMessage<SearchProductRequest> {
    private static readonly pb::MessageParser<SearchProductRequest> _parser = new pb::MessageParser<SearchProductRequest>(() => new SearchProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest(SearchProductRequest other) : this() {
      keyWord_ = other.keyWord_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchProductRequest Clone() {
      return new SearchProductRequest(this);
    }

    /// <summary>Field number for the "keyWord" field.</summary>
    public const int KeyWordFieldNumber = 1;
    private string keyWord_ = "";
    /// <summary>
    ///*
    /// 产品中关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyWord {
      get { return keyWord_; }
      set {
        keyWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyWord != other.KeyWord) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyWord.Length != 0) hash ^= KeyWord.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyWord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyWord);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyWord);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyWord.Length != 0) {
        KeyWord = other.KeyWord;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KeyWord = input.ReadString();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品链表的返回信息
  /// </summary>
  public sealed partial class ProductListResponse : pb::IMessage<ProductListResponse> {
    private static readonly pb::MessageParser<ProductListResponse> _parser = new pb::MessageParser<ProductListResponse>(() => new ProductListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse(ProductListResponse other) : this() {
      status_ = other.status_;
      productList_ = other.productList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductListResponse Clone() {
      return new ProductListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Product> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Product.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Product> productList_ = new pbc::RepeatedField<global::SP.Service.Product>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Product> ProductList {
      get { return productList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 4;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productList_.Equals(other.productList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
      if (Total != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productList_.Add(other.productList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
          case 32: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品详情的返回信息
  /// </summary>
  public sealed partial class ProdctDetailResponse : pb::IMessage<ProdctDetailResponse> {
    private static readonly pb::MessageParser<ProdctDetailResponse> _parser = new pb::MessageParser<ProdctDetailResponse>(() => new ProdctDetailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProdctDetailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse(ProdctDetailResponse other) : this() {
      status_ = other.status_;
      ProductDetail = other.productDetail_ != null ? other.ProductDetail.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProdctDetailResponse Clone() {
      return new ProdctDetailResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productDetail" field.</summary>
    public const int ProductDetailFieldNumber = 2;
    private global::SP.Service.Product productDetail_;
    /// <summary>
    ///*
    /// 产品内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Product ProductDetail {
      get { return productDetail_; }
      set {
        productDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProdctDetailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProdctDetailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(ProductDetail, other.ProductDetail)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (productDetail_ != null) hash ^= ProductDetail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (productDetail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProductDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (productDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductDetail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProdctDetailResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.productDetail_ != null) {
        if (productDetail_ == null) {
          productDetail_ = new global::SP.Service.Product();
        }
        ProductDetail.MergeFrom(other.ProductDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (productDetail_ == null) {
              productDetail_ = new global::SP.Service.Product();
            }
            input.ReadMessage(productDetail_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 表头属性的请求参数
  /// </summary>
  public sealed partial class TitleAttributeListRequest : pb::IMessage<TitleAttributeListRequest> {
    private static readonly pb::MessageParser<TitleAttributeListRequest> _parser = new pb::MessageParser<TitleAttributeListRequest>(() => new TitleAttributeListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleAttributeListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest(TitleAttributeListRequest other) : this() {
      attType_ = other.attType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListRequest Clone() {
      return new TitleAttributeListRequest(this);
    }

    /// <summary>Field number for the "attType" field.</summary>
    public const int AttTypeFieldNumber = 1;
    private int attType_;
    /// <summary>
    ///*
    /// 属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttType {
      get { return attType_; }
      set {
        attType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleAttributeListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleAttributeListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttType != other.AttType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttType != 0) hash ^= AttType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleAttributeListRequest other) {
      if (other == null) {
        return;
      }
      if (other.AttType != 0) {
        AttType = other.AttType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 表头属性的返回信息
  /// </summary>
  public sealed partial class TitleAttributeListResponse : pb::IMessage<TitleAttributeListResponse> {
    private static readonly pb::MessageParser<TitleAttributeListResponse> _parser = new pb::MessageParser<TitleAttributeListResponse>(() => new TitleAttributeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleAttributeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse(TitleAttributeListResponse other) : this() {
      status_ = other.status_;
      titleAttributeList_ = other.titleAttributeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleAttributeListResponse Clone() {
      return new TitleAttributeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "titleAttributeList" field.</summary>
    public const int TitleAttributeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Attribute> _repeated_titleAttributeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Attribute.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Attribute> titleAttributeList_ = new pbc::RepeatedField<global::SP.Service.Attribute>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Attribute> TitleAttributeList {
      get { return titleAttributeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleAttributeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleAttributeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!titleAttributeList_.Equals(other.titleAttributeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= titleAttributeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      titleAttributeList_.WriteTo(output, _repeated_titleAttributeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += titleAttributeList_.CalculateSize(_repeated_titleAttributeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleAttributeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      titleAttributeList_.Add(other.titleAttributeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            titleAttributeList_.AddEntriesFrom(input, _repeated_titleAttributeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 搜索产品的请求参数
  /// </summary>
  public sealed partial class ShopListRequest : pb::IMessage<ShopListRequest> {
    private static readonly pb::MessageParser<ShopListRequest> _parser = new pb::MessageParser<ShopListRequest>(() => new ShopListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest(ShopListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      shopType_ = other.shopType_;
      districtId_ = other.districtId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListRequest Clone() {
      return new ShopListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "shopType" field.</summary>
    public const int ShopTypeFieldNumber = 3;
    private int shopType_;
    /// <summary>
    ///*
    /// 店铺分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopType {
      get { return shopType_; }
      set {
        shopType_ = value;
      }
    }

    /// <summary>Field number for the "districtId" field.</summary>
    public const int DistrictIdFieldNumber = 5;
    private int districtId_;
    /// <summary>
    ///*
    /// 区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistrictId {
      get { return districtId_; }
      set {
        districtId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (ShopType != other.ShopType) return false;
      if (DistrictId != other.DistrictId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (ShopType != 0) hash ^= ShopType.GetHashCode();
      if (DistrictId != 0) hash ^= DistrictId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (ShopType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShopType);
      }
      if (DistrictId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DistrictId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (ShopType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopType);
      }
      if (DistrictId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistrictId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.ShopType != 0) {
        ShopType = other.ShopType;
      }
      if (other.DistrictId != 0) {
        DistrictId = other.DistrictId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            ShopType = input.ReadInt32();
            break;
          }
          case 40: {
            DistrictId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的返回信息
  /// </summary>
  public sealed partial class ShopListResponse : pb::IMessage<ShopListResponse> {
    private static readonly pb::MessageParser<ShopListResponse> _parser = new pb::MessageParser<ShopListResponse>(() => new ShopListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse(ShopListResponse other) : this() {
      status_ = other.status_;
      shopList_ = other.shopList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopListResponse Clone() {
      return new ShopListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shopList" field.</summary>
    public const int ShopListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Shop> _repeated_shopList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Shop.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Shop> shopList_ = new pbc::RepeatedField<global::SP.Service.Shop>();
    /// <summary>
    ///*
    /// 店铺列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Shop> ShopList {
      get { return shopList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!shopList_.Equals(other.shopList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= shopList_.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      shopList_.WriteTo(output, _repeated_shopList_codec);
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += shopList_.CalculateSize(_repeated_shopList_codec);
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      shopList_.Add(other.shopList_);
      if (other.Total != 0) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            shopList_.AddEntriesFrom(input, _repeated_shopList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺产品的请求参数
  /// </summary>
  public sealed partial class ShopProductListRequest : pb::IMessage<ShopProductListRequest> {
    private static readonly pb::MessageParser<ShopProductListRequest> _parser = new pb::MessageParser<ShopProductListRequest>(() => new ShopProductListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopProductListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest(ShopProductListRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      typeId_ = other.typeId_;
      shopId_ = other.shopId_;
      districtId_ = other.districtId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductListRequest Clone() {
      return new ShopProductListRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品属性ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 4;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "districtId" field.</summary>
    public const int DistrictIdFieldNumber = 5;
    private int districtId_;
    /// <summary>
    ///*
    /// 区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistrictId {
      get { return districtId_; }
      set {
        districtId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopProductListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopProductListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (TypeId != other.TypeId) return false;
      if (ShopId != other.ShopId) return false;
      if (DistrictId != other.DistrictId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (DistrictId != 0) hash ^= DistrictId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TypeId);
      }
      if (ShopId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShopId);
      }
      if (DistrictId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DistrictId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (DistrictId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistrictId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopProductListRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.DistrictId != 0) {
        DistrictId = other.DistrictId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TypeId = input.ReadInt64();
            break;
          }
          case 32: {
            ShopId = input.ReadInt32();
            break;
          }
          case 40: {
            DistrictId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的请求参数
  /// </summary>
  public sealed partial class ShopIdRequest : pb::IMessage<ShopIdRequest> {
    private static readonly pb::MessageParser<ShopIdRequest> _parser = new pb::MessageParser<ShopIdRequest>(() => new ShopIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest(ShopIdRequest other) : this() {
      shopId_ = other.shopId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopIdRequest Clone() {
      return new ShopIdRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的返回信息
  /// </summary>
  public sealed partial class ShopResponse : pb::IMessage<ShopResponse> {
    private static readonly pb::MessageParser<ShopResponse> _parser = new pb::MessageParser<ShopResponse>(() => new ShopResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse(ShopResponse other) : this() {
      status_ = other.status_;
      Shop = other.shop_ != null ? other.Shop.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopResponse Clone() {
      return new ShopResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 2;
    private global::SP.Service.Shop shop_;
    /// <summary>
    ///*
    /// 店铺列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Shop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Shop, other.Shop)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (shop_ != null) hash ^= Shop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (shop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.shop_ != null) {
        if (shop_ == null) {
          shop_ = new global::SP.Service.Shop();
        }
        Shop.MergeFrom(other.Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (shop_ == null) {
              shop_ = new global::SP.Service.Shop();
            }
            input.ReadMessage(shop_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 轮播图的信息
  /// </summary>
  public sealed partial class Carousel : pb::IMessage<Carousel> {
    private static readonly pb::MessageParser<Carousel> _parser = new pb::MessageParser<Carousel>(() => new Carousel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Carousel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel(Carousel other) : this() {
      url_ = other.url_;
      imagePath_ = other.imagePath_;
      displayIndex_ = other.displayIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carousel Clone() {
      return new Carousel(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    ///*
    /// 轮播图的跳转地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagePath" field.</summary>
    public const int ImagePathFieldNumber = 2;
    private string imagePath_ = "";
    /// <summary>
    ///*
    /// 轮播图的地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayIndex" field.</summary>
    public const int DisplayIndexFieldNumber = 3;
    private int displayIndex_;
    /// <summary>
    ///*
    /// 显示顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayIndex {
      get { return displayIndex_; }
      set {
        displayIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Carousel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Carousel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (ImagePath != other.ImagePath) return false;
      if (DisplayIndex != other.DisplayIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      if (DisplayIndex != 0) hash ^= DisplayIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImagePath);
      }
      if (DisplayIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DisplayIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (ImagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      if (DisplayIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Carousel other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
      if (other.DisplayIndex != 0) {
        DisplayIndex = other.DisplayIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            ImagePath = input.ReadString();
            break;
          }
          case 24: {
            DisplayIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取轮播图的返回信息
  /// </summary>
  public sealed partial class CarouselListResponse : pb::IMessage<CarouselListResponse> {
    private static readonly pb::MessageParser<CarouselListResponse> _parser = new pb::MessageParser<CarouselListResponse>(() => new CarouselListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CarouselListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse(CarouselListResponse other) : this() {
      status_ = other.status_;
      carouselList_ = other.carouselList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarouselListResponse Clone() {
      return new CarouselListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "carouselList" field.</summary>
    public const int CarouselListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Carousel> _repeated_carouselList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Carousel.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Carousel> carouselList_ = new pbc::RepeatedField<global::SP.Service.Carousel>();
    /// <summary>
    ///*
    /// 轮播图列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Carousel> CarouselList {
      get { return carouselList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CarouselListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CarouselListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!carouselList_.Equals(other.carouselList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= carouselList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      carouselList_.WriteTo(output, _repeated_carouselList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += carouselList_.CalculateSize(_repeated_carouselList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CarouselListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      carouselList_.Add(other.carouselList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            carouselList_.AddEntriesFrom(input, _repeated_carouselList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺种类列表的返回信息
  /// </summary>
  public sealed partial class TitleTypeListResponse : pb::IMessage<TitleTypeListResponse> {
    private static readonly pb::MessageParser<TitleTypeListResponse> _parser = new pb::MessageParser<TitleTypeListResponse>(() => new TitleTypeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleTypeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse(TitleTypeListResponse other) : this() {
      status_ = other.status_;
      titleTypeList_ = other.titleTypeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleTypeListResponse Clone() {
      return new TitleTypeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "titleTypeList" field.</summary>
    public const int TitleTypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.ProductType> _repeated_titleTypeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.ProductType.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductType> titleTypeList_ = new pbc::RepeatedField<global::SP.Service.ProductType>();
    /// <summary>
    ///*
    /// 店铺种类列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductType> TitleTypeList {
      get { return titleTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleTypeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleTypeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!titleTypeList_.Equals(other.titleTypeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= titleTypeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      titleTypeList_.WriteTo(output, _repeated_titleTypeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += titleTypeList_.CalculateSize(_repeated_titleTypeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleTypeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      titleTypeList_.Add(other.titleTypeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            titleTypeList_.AddEntriesFrom(input, _repeated_titleTypeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 状态返回信息
  /// </summary>
  public sealed partial class ResultResponse : pb::IMessage<ResultResponse> {
    private static readonly pb::MessageParser<ResultResponse> _parser = new pb::MessageParser<ResultResponse>(() => new ResultResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultResponse(ResultResponse other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultResponse Clone() {
      return new ResultResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取配送员的产品列表的请求参数
  /// </summary>
  public sealed partial class ShopProductRequest : pb::IMessage<ShopProductRequest> {
    private static readonly pb::MessageParser<ShopProductRequest> _parser = new pb::MessageParser<ShopProductRequest>(() => new ShopProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductRequest(ShopProductRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      typeId_ = other.typeId_;
      secondTypeId_ = other.secondTypeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopProductRequest Clone() {
      return new ShopProductRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "secondTypeId" field.</summary>
    public const int SecondTypeIdFieldNumber = 4;
    private long secondTypeId_;
    /// <summary>
    ///*
    /// 商品次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondTypeId {
      get { return secondTypeId_; }
      set {
        secondTypeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (TypeId != other.TypeId) return false;
      if (SecondTypeId != other.SecondTypeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (SecondTypeId != 0L) hash ^= SecondTypeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TypeId);
      }
      if (SecondTypeId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SecondTypeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (SecondTypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondTypeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.SecondTypeId != 0L) {
        SecondTypeId = other.SecondTypeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TypeId = input.ReadInt64();
            break;
          }
          case 32: {
            SecondTypeId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 店铺的请求参数
  /// </summary>
  public sealed partial class KindRequest : pb::IMessage<KindRequest> {
    private static readonly pb::MessageParser<KindRequest> _parser = new pb::MessageParser<KindRequest>(() => new KindRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindRequest(KindRequest other) : this() {
      kind_ = other.kind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindRequest Clone() {
      return new KindRequest(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private int kind_;
    /// <summary>
    ///*
    /// 分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Kind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KindRequest other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Kind = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取产品分类的返回信息
  /// </summary>
  public sealed partial class ProductTypeListResponse : pb::IMessage<ProductTypeListResponse> {
    private static readonly pb::MessageParser<ProductTypeListResponse> _parser = new pb::MessageParser<ProductTypeListResponse>(() => new ProductTypeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductTypeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductTypeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductTypeListResponse(ProductTypeListResponse other) : this() {
      status_ = other.status_;
      productTypeList_ = other.productTypeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductTypeListResponse Clone() {
      return new ProductTypeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productTypeList" field.</summary>
    public const int ProductTypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.ProductType> _repeated_productTypeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.ProductType.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductType> productTypeList_ = new pbc::RepeatedField<global::SP.Service.ProductType>();
    /// <summary>
    ///*
    /// 产品分类列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductType> ProductTypeList {
      get { return productTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductTypeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductTypeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productTypeList_.Equals(other.productTypeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productTypeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productTypeList_.WriteTo(output, _repeated_productTypeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productTypeList_.CalculateSize(_repeated_productTypeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductTypeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productTypeList_.Add(other.productTypeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productTypeList_.AddEntriesFrom(input, _repeated_productTypeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品的信息
  /// </summary>
  public sealed partial class SellerProduct : pb::IMessage<SellerProduct> {
    private static readonly pb::MessageParser<SellerProduct> _parser = new pb::MessageParser<SellerProduct>(() => new SellerProduct());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerProduct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProduct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProduct(SellerProduct other) : this() {
      mainType_ = other.mainType_;
      secondType_ = other.secondType_;
      productName_ = other.productName_;
      imagePath_ = other.imagePath_;
      marketPrice_ = other.marketPrice_;
      purchasePrice_ = other.purchasePrice_;
      productId_ = other.productId_;
      saleStatus_ = other.saleStatus_;
      suppliersId_ = other.suppliersId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProduct Clone() {
      return new SellerProduct(this);
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 1;
    private long mainType_;
    /// <summary>
    ///*
    /// 主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "secondType" field.</summary>
    public const int SecondTypeFieldNumber = 2;
    private long secondType_;
    /// <summary>
    ///*
    /// 次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondType {
      get { return secondType_; }
      set {
        secondType_ = value;
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 3;
    private string productName_ = "";
    /// <summary>
    ///*
    /// 产品名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagePath" field.</summary>
    public const int ImagePathFieldNumber = 4;
    private string imagePath_ = "";
    /// <summary>
    ///*
    /// 产品图的地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "marketPrice" field.</summary>
    public const int MarketPriceFieldNumber = 5;
    private double marketPrice_;
    /// <summary>
    ///*
    /// 售货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarketPrice {
      get { return marketPrice_; }
      set {
        marketPrice_ = value;
      }
    }

    /// <summary>Field number for the "purchasePrice" field.</summary>
    public const int PurchasePriceFieldNumber = 6;
    private double purchasePrice_;
    /// <summary>
    ///*
    /// 拿货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PurchasePrice {
      get { return purchasePrice_; }
      set {
        purchasePrice_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 7;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saleStatus" field.</summary>
    public const int SaleStatusFieldNumber = 8;
    private int saleStatus_;
    /// <summary>
    ///*
    /// 商品上下架状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleStatus {
      get { return saleStatus_; }
      set {
        saleStatus_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 9;
    private string suppliersId_ = "";
    /// <summary>
    ///*
    /// 所有商户负责人ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerProduct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerProduct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainType != other.MainType) return false;
      if (SecondType != other.SecondType) return false;
      if (ProductName != other.ProductName) return false;
      if (ImagePath != other.ImagePath) return false;
      if (MarketPrice != other.MarketPrice) return false;
      if (PurchasePrice != other.PurchasePrice) return false;
      if (ProductId != other.ProductId) return false;
      if (SaleStatus != other.SaleStatus) return false;
      if (SuppliersId != other.SuppliersId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainType != 0L) hash ^= MainType.GetHashCode();
      if (SecondType != 0L) hash ^= SecondType.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      if (MarketPrice != 0D) hash ^= MarketPrice.GetHashCode();
      if (PurchasePrice != 0D) hash ^= PurchasePrice.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (SaleStatus != 0) hash ^= SaleStatus.GetHashCode();
      if (SuppliersId.Length != 0) hash ^= SuppliersId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainType != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MainType);
      }
      if (SecondType != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SecondType);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductName);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ImagePath);
      }
      if (MarketPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MarketPrice);
      }
      if (PurchasePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PurchasePrice);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProductId);
      }
      if (SaleStatus != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SaleStatus);
      }
      if (SuppliersId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SuppliersId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MainType);
      }
      if (SecondType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondType);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ImagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      if (MarketPrice != 0D) {
        size += 1 + 8;
      }
      if (PurchasePrice != 0D) {
        size += 1 + 8;
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (SaleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleStatus);
      }
      if (SuppliersId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SuppliersId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerProduct other) {
      if (other == null) {
        return;
      }
      if (other.MainType != 0L) {
        MainType = other.MainType;
      }
      if (other.SecondType != 0L) {
        SecondType = other.SecondType;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
      if (other.MarketPrice != 0D) {
        MarketPrice = other.MarketPrice;
      }
      if (other.PurchasePrice != 0D) {
        PurchasePrice = other.PurchasePrice;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.SaleStatus != 0) {
        SaleStatus = other.SaleStatus;
      }
      if (other.SuppliersId.Length != 0) {
        SuppliersId = other.SuppliersId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MainType = input.ReadInt64();
            break;
          }
          case 16: {
            SecondType = input.ReadInt64();
            break;
          }
          case 26: {
            ProductName = input.ReadString();
            break;
          }
          case 34: {
            ImagePath = input.ReadString();
            break;
          }
          case 41: {
            MarketPrice = input.ReadDouble();
            break;
          }
          case 49: {
            PurchasePrice = input.ReadDouble();
            break;
          }
          case 58: {
            ProductId = input.ReadString();
            break;
          }
          case 64: {
            SaleStatus = input.ReadInt32();
            break;
          }
          case 74: {
            SuppliersId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品的信息
  /// </summary>
  public sealed partial class ProductDetailResponse : pb::IMessage<ProductDetailResponse> {
    private static readonly pb::MessageParser<ProductDetailResponse> _parser = new pb::MessageParser<ProductDetailResponse>(() => new ProductDetailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductDetailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductDetailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductDetailResponse(ProductDetailResponse other) : this() {
      status_ = other.status_;
      Product = other.product_ != null ? other.Product.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductDetailResponse Clone() {
      return new ProductDetailResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 2;
    private global::SP.Service.SellerProduct product_;
    /// <summary>
    ///*
    /// 次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.SellerProduct Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductDetailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductDetailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Product, other.Product)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (product_ != null) hash ^= Product.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (product_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Product);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (product_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Product);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductDetailResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.product_ != null) {
        if (product_ == null) {
          product_ = new global::SP.Service.SellerProduct();
        }
        Product.MergeFrom(other.Product);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (product_ == null) {
              product_ = new global::SP.Service.SellerProduct();
            }
            input.ReadMessage(product_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加产品的请求参数
  /// </summary>
  public sealed partial class ProductRequest : pb::IMessage<ProductRequest> {
    private static readonly pb::MessageParser<ProductRequest> _parser = new pb::MessageParser<ProductRequest>(() => new ProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductRequest(ProductRequest other) : this() {
      mainType_ = other.mainType_;
      secondType_ = other.secondType_;
      suppliersId_ = other.suppliersId_;
      purchasePrice_ = other.purchasePrice_;
      accountId_ = other.accountId_;
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductRequest Clone() {
      return new ProductRequest(this);
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 1;
    private long mainType_;
    /// <summary>
    ///*
    /// 主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "secondType" field.</summary>
    public const int SecondTypeFieldNumber = 2;
    private long secondType_;
    /// <summary>
    ///*
    /// 次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondType {
      get { return secondType_; }
      set {
        secondType_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 3;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "purchasePrice" field.</summary>
    public const int PurchasePriceFieldNumber = 6;
    private double purchasePrice_;
    /// <summary>
    ///*
    /// 拿货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PurchasePrice {
      get { return purchasePrice_; }
      set {
        purchasePrice_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 7;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 8;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainType != other.MainType) return false;
      if (SecondType != other.SecondType) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (PurchasePrice != other.PurchasePrice) return false;
      if (AccountId != other.AccountId) return false;
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainType != 0L) hash ^= MainType.GetHashCode();
      if (SecondType != 0L) hash ^= SecondType.GetHashCode();
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (PurchasePrice != 0D) hash ^= PurchasePrice.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainType != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MainType);
      }
      if (SecondType != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SecondType);
      }
      if (SuppliersId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SuppliersId);
      }
      if (PurchasePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PurchasePrice);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AccountId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MainType);
      }
      if (SecondType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondType);
      }
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (PurchasePrice != 0D) {
        size += 1 + 8;
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.MainType != 0L) {
        MainType = other.MainType;
      }
      if (other.SecondType != 0L) {
        SecondType = other.SecondType;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.PurchasePrice != 0D) {
        PurchasePrice = other.PurchasePrice;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MainType = input.ReadInt64();
            break;
          }
          case 16: {
            SecondType = input.ReadInt64();
            break;
          }
          case 24: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 49: {
            PurchasePrice = input.ReadDouble();
            break;
          }
          case 58: {
            AccountId = input.ReadString();
            break;
          }
          case 66: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品链表的返回信息
  /// </summary>
  public sealed partial class SellerProductListResponse : pb::IMessage<SellerProductListResponse> {
    private static readonly pb::MessageParser<SellerProductListResponse> _parser = new pb::MessageParser<SellerProductListResponse>(() => new SellerProductListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerProductListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProductListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProductListResponse(SellerProductListResponse other) : this() {
      status_ = other.status_;
      productList_ = other.productList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerProductListResponse Clone() {
      return new SellerProductListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.SellerProduct> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.SellerProduct.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.SellerProduct> productList_ = new pbc::RepeatedField<global::SP.Service.SellerProduct>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.SellerProduct> ProductList {
      get { return productList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 4;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerProductListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerProductListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productList_.Equals(other.productList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
      if (Total != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerProductListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productList_.Add(other.productList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
          case 32: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取商家的产品列表的请求参数
  /// </summary>
  public sealed partial class SellerShopProductRequest : pb::IMessage<SellerShopProductRequest> {
    private static readonly pb::MessageParser<SellerShopProductRequest> _parser = new pb::MessageParser<SellerShopProductRequest>(() => new SellerShopProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerShopProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerShopProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerShopProductRequest(SellerShopProductRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      typeId_ = other.typeId_;
      secondTypeId_ = other.secondTypeId_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerShopProductRequest Clone() {
      return new SellerShopProductRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 3;
    private long typeId_;
    /// <summary>
    ///*
    /// 商品主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "secondTypeId" field.</summary>
    public const int SecondTypeIdFieldNumber = 4;
    private long secondTypeId_;
    /// <summary>
    ///*
    /// 商品次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondTypeId {
      get { return secondTypeId_; }
      set {
        secondTypeId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 5;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 商品次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerShopProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerShopProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (TypeId != other.TypeId) return false;
      if (SecondTypeId != other.SecondTypeId) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (SecondTypeId != 0L) hash ^= SecondTypeId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TypeId);
      }
      if (SecondTypeId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SecondTypeId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (SecondTypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondTypeId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerShopProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.SecondTypeId != 0L) {
        SecondTypeId = other.SecondTypeId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 24: {
            TypeId = input.ReadInt64();
            break;
          }
          case 32: {
            SecondTypeId = input.ReadInt64();
            break;
          }
          case 42: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新产品上下架状态的请求参数
  /// </summary>
  public sealed partial class ProductSaleStatusRequest : pb::IMessage<ProductSaleStatusRequest> {
    private static readonly pb::MessageParser<ProductSaleStatusRequest> _parser = new pb::MessageParser<ProductSaleStatusRequest>(() => new ProductSaleStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductSaleStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSaleStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSaleStatusRequest(ProductSaleStatusRequest other) : this() {
      productId_ = other.productId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSaleStatusRequest Clone() {
      return new ProductSaleStatusRequest(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 5;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 上下架状态(0：下架 1：上架)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductSaleStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductSaleStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductSaleStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取配送人员营业状态的返回信息
  /// </summary>
  public sealed partial class ShopStatusResponse : pb::IMessage<ShopStatusResponse> {
    private static readonly pb::MessageParser<ShopStatusResponse> _parser = new pb::MessageParser<ShopStatusResponse>(() => new ShopStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopStatusResponse(ShopStatusResponse other) : this() {
      status_ = other.status_;
      shopStatus_ = other.shopStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopStatusResponse Clone() {
      return new ShopStatusResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "shopStatus" field.</summary>
    public const int ShopStatusFieldNumber = 2;
    private bool shopStatus_;
    /// <summary>
    ///*
    /// 配送人员营业状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShopStatus {
      get { return shopStatus_; }
      set {
        shopStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ShopStatus != other.ShopStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ShopStatus != false) hash ^= ShopStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (ShopStatus != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShopStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ShopStatus != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ShopStatus != false) {
        ShopStatus = other.ShopStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            ShopStatus = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 配送人员营业状态的请求参数
  /// </summary>
  public sealed partial class OpenShopStatusRequest : pb::IMessage<OpenShopStatusRequest> {
    private static readonly pb::MessageParser<OpenShopStatusRequest> _parser = new pb::MessageParser<OpenShopStatusRequest>(() => new OpenShopStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenShopStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenShopStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenShopStatusRequest(OpenShopStatusRequest other) : this() {
      accountId_ = other.accountId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenShopStatusRequest Clone() {
      return new OpenShopStatusRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 配送人员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    /// <summary>
    ///*
    /// 营业状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenShopStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenShopStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenShopStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加供货商产品的请求参数
  /// </summary>
  public sealed partial class AddSuppliersProductRequest : pb::IMessage<AddSuppliersProductRequest> {
    private static readonly pb::MessageParser<AddSuppliersProductRequest> _parser = new pb::MessageParser<AddSuppliersProductRequest>(() => new AddSuppliersProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSuppliersProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersProductRequest(AddSuppliersProductRequest other) : this() {
      mainType_ = other.mainType_;
      secondType_ = other.secondType_;
      suppliersId_ = other.suppliersId_;
      purchasePrice_ = other.purchasePrice_;
      accountId_ = other.accountId_;
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersProductRequest Clone() {
      return new AddSuppliersProductRequest(this);
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 1;
    private long mainType_;
    /// <summary>
    ///*
    /// 主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "secondType" field.</summary>
    public const int SecondTypeFieldNumber = 2;
    private long secondType_;
    /// <summary>
    ///*
    /// 次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondType {
      get { return secondType_; }
      set {
        secondType_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 3;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "purchasePrice" field.</summary>
    public const int PurchasePriceFieldNumber = 6;
    private double purchasePrice_;
    /// <summary>
    ///*
    /// 拿货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PurchasePrice {
      get { return purchasePrice_; }
      set {
        purchasePrice_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 7;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// AccountId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 8;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSuppliersProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSuppliersProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainType != other.MainType) return false;
      if (SecondType != other.SecondType) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (PurchasePrice != other.PurchasePrice) return false;
      if (AccountId != other.AccountId) return false;
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainType != 0L) hash ^= MainType.GetHashCode();
      if (SecondType != 0L) hash ^= SecondType.GetHashCode();
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (PurchasePrice != 0D) hash ^= PurchasePrice.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainType != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MainType);
      }
      if (SecondType != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SecondType);
      }
      if (SuppliersId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SuppliersId);
      }
      if (PurchasePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PurchasePrice);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AccountId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MainType);
      }
      if (SecondType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondType);
      }
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (PurchasePrice != 0D) {
        size += 1 + 8;
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSuppliersProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.MainType != 0L) {
        MainType = other.MainType;
      }
      if (other.SecondType != 0L) {
        SecondType = other.SecondType;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.PurchasePrice != 0D) {
        PurchasePrice = other.PurchasePrice;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MainType = input.ReadInt64();
            break;
          }
          case 16: {
            SecondType = input.ReadInt64();
            break;
          }
          case 24: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 49: {
            PurchasePrice = input.ReadDouble();
            break;
          }
          case 58: {
            AccountId = input.ReadString();
            break;
          }
          case 66: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加供货商范围的请求参数
  /// </summary>
  public sealed partial class AddSuppliersRegionRequest : pb::IMessage<AddSuppliersRegionRequest> {
    private static readonly pb::MessageParser<AddSuppliersRegionRequest> _parser = new pb::MessageParser<AddSuppliersRegionRequest>(() => new AddSuppliersRegionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSuppliersRegionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersRegionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersRegionRequest(AddSuppliersRegionRequest other) : this() {
      supplierId_ = other.supplierId_;
      regionId_ = other.regionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSuppliersRegionRequest Clone() {
      return new AddSuppliersRegionRequest(this);
    }

    /// <summary>Field number for the "supplierId" field.</summary>
    public const int SupplierIdFieldNumber = 1;
    private int supplierId_;
    /// <summary>
    ///*
    /// 供货商ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupplierId {
      get { return supplierId_; }
      set {
        supplierId_ = value;
      }
    }

    /// <summary>Field number for the "regionId" field.</summary>
    public const int RegionIdFieldNumber = 2;
    private int regionId_;
    /// <summary>
    ///*
    /// 范围区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSuppliersRegionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSuppliersRegionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SupplierId != other.SupplierId) return false;
      if (RegionId != other.RegionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SupplierId != 0) hash ^= SupplierId.GetHashCode();
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SupplierId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SupplierId);
      }
      if (RegionId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RegionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SupplierId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupplierId);
      }
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSuppliersRegionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SupplierId != 0) {
        SupplierId = other.SupplierId;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SupplierId = input.ReadInt32();
            break;
          }
          case 16: {
            RegionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商范围列表的返回信息
  /// </summary>
  public sealed partial class SuppliersRegionListResponse : pb::IMessage<SuppliersRegionListResponse> {
    private static readonly pb::MessageParser<SuppliersRegionListResponse> _parser = new pb::MessageParser<SuppliersRegionListResponse>(() => new SuppliersRegionListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersRegionListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersRegionListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersRegionListResponse(SuppliersRegionListResponse other) : this() {
      status_ = other.status_;
      regionList_ = other.regionList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersRegionListResponse Clone() {
      return new SuppliersRegionListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "regionList" field.</summary>
    public const int RegionListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.RegionData> _repeated_regionList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.RegionData.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.RegionData> regionList_ = new pbc::RepeatedField<global::SP.Service.RegionData>();
    /// <summary>
    ///*
    /// 供货商范围列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.RegionData> RegionList {
      get { return regionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersRegionListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersRegionListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!regionList_.Equals(other.regionList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= regionList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      regionList_.WriteTo(output, _repeated_regionList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += regionList_.CalculateSize(_repeated_regionList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersRegionListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      regionList_.Add(other.regionList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            regionList_.AddEntriesFrom(input, _repeated_regionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商类型的返回信息
  /// </summary>
  public sealed partial class SuppliersTypeResponse : pb::IMessage<SuppliersTypeResponse> {
    private static readonly pb::MessageParser<SuppliersTypeResponse> _parser = new pb::MessageParser<SuppliersTypeResponse>(() => new SuppliersTypeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersTypeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersTypeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersTypeResponse(SuppliersTypeResponse other) : this() {
      status_ = other.status_;
      ProductType = other.productType_ != null ? other.ProductType.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersTypeResponse Clone() {
      return new SuppliersTypeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productType" field.</summary>
    public const int ProductTypeFieldNumber = 2;
    private global::SP.Service.ProductType productType_;
    /// <summary>
    ///*
    /// 产品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.ProductType ProductType {
      get { return productType_; }
      set {
        productType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersTypeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersTypeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(ProductType, other.ProductType)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (productType_ != null) hash ^= ProductType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (productType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProductType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (productType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersTypeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.productType_ != null) {
        if (productType_ == null) {
          productType_ = new global::SP.Service.ProductType();
        }
        ProductType.MergeFrom(other.ProductType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (productType_ == null) {
              productType_ = new global::SP.Service.ProductType();
            }
            input.ReadMessage(productType_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商产品的请求参数
  /// </summary>
  public sealed partial class SuppliersProductRequest : pb::IMessage<SuppliersProductRequest> {
    private static readonly pb::MessageParser<SuppliersProductRequest> _parser = new pb::MessageParser<SuppliersProductRequest>(() => new SuppliersProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductRequest(SuppliersProductRequest other) : this() {
      supplierId_ = other.supplierId_;
      mainType_ = other.mainType_;
      secondType_ = other.secondType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductRequest Clone() {
      return new SuppliersProductRequest(this);
    }

    /// <summary>Field number for the "supplierId" field.</summary>
    public const int SupplierIdFieldNumber = 1;
    private int supplierId_;
    /// <summary>
    ///*
    /// 供货商ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupplierId {
      get { return supplierId_; }
      set {
        supplierId_ = value;
      }
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 2;
    private int mainType_;
    /// <summary>
    ///*
    /// 主分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "secondType" field.</summary>
    public const int SecondTypeFieldNumber = 3;
    private int secondType_;
    /// <summary>
    ///*
    /// 次分类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondType {
      get { return secondType_; }
      set {
        secondType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SupplierId != other.SupplierId) return false;
      if (MainType != other.MainType) return false;
      if (SecondType != other.SecondType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SupplierId != 0) hash ^= SupplierId.GetHashCode();
      if (MainType != 0) hash ^= MainType.GetHashCode();
      if (SecondType != 0) hash ^= SecondType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SupplierId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SupplierId);
      }
      if (MainType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MainType);
      }
      if (SecondType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SecondType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SupplierId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupplierId);
      }
      if (MainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainType);
      }
      if (SecondType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.SupplierId != 0) {
        SupplierId = other.SupplierId;
      }
      if (other.MainType != 0) {
        MainType = other.MainType;
      }
      if (other.SecondType != 0) {
        SecondType = other.SecondType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SupplierId = input.ReadInt32();
            break;
          }
          case 16: {
            MainType = input.ReadInt32();
            break;
          }
          case 24: {
            SecondType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 供货商产品的信息
  /// </summary>
  public sealed partial class SuppliersProduct : pb::IMessage<SuppliersProduct> {
    private static readonly pb::MessageParser<SuppliersProduct> _parser = new pb::MessageParser<SuppliersProduct>(() => new SuppliersProduct());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersProduct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProduct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProduct(SuppliersProduct other) : this() {
      suppliersId_ = other.suppliersId_;
      productName_ = other.productName_;
      purchasePrice_ = other.purchasePrice_;
      productId_ = other.productId_;
      saleStatus_ = other.saleStatus_;
      alertStock_ = other.alertStock_;
      imagePath_ = other.imagePath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProduct Clone() {
      return new SuppliersProduct(this);
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 1;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 供货商ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 2;
    private string productName_ = "";
    /// <summary>
    ///*
    /// 产品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchasePrice" field.</summary>
    public const int PurchasePriceFieldNumber = 6;
    private double purchasePrice_;
    /// <summary>
    ///*
    /// 拿货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PurchasePrice {
      get { return purchasePrice_; }
      set {
        purchasePrice_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 7;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saleStatus" field.</summary>
    public const int SaleStatusFieldNumber = 8;
    private int saleStatus_;
    /// <summary>
    ///*
    /// 商品上下架状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleStatus {
      get { return saleStatus_; }
      set {
        saleStatus_ = value;
      }
    }

    /// <summary>Field number for the "alertStock" field.</summary>
    public const int AlertStockFieldNumber = 9;
    private int alertStock_;
    /// <summary>
    ///*
    /// 警戒库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlertStock {
      get { return alertStock_; }
      set {
        alertStock_ = value;
      }
    }

    /// <summary>Field number for the "imagePath" field.</summary>
    public const int ImagePathFieldNumber = 10;
    private string imagePath_ = "";
    /// <summary>
    ///*
    /// 产品图的地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersProduct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersProduct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SuppliersId != other.SuppliersId) return false;
      if (ProductName != other.ProductName) return false;
      if (PurchasePrice != other.PurchasePrice) return false;
      if (ProductId != other.ProductId) return false;
      if (SaleStatus != other.SaleStatus) return false;
      if (AlertStock != other.AlertStock) return false;
      if (ImagePath != other.ImagePath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (PurchasePrice != 0D) hash ^= PurchasePrice.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (SaleStatus != 0) hash ^= SaleStatus.GetHashCode();
      if (AlertStock != 0) hash ^= AlertStock.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuppliersId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SuppliersId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductName);
      }
      if (PurchasePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PurchasePrice);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProductId);
      }
      if (SaleStatus != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SaleStatus);
      }
      if (AlertStock != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AlertStock);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ImagePath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (PurchasePrice != 0D) {
        size += 1 + 8;
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (SaleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleStatus);
      }
      if (AlertStock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlertStock);
      }
      if (ImagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersProduct other) {
      if (other == null) {
        return;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.PurchasePrice != 0D) {
        PurchasePrice = other.PurchasePrice;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.SaleStatus != 0) {
        SaleStatus = other.SaleStatus;
      }
      if (other.AlertStock != 0) {
        AlertStock = other.AlertStock;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductName = input.ReadString();
            break;
          }
          case 49: {
            PurchasePrice = input.ReadDouble();
            break;
          }
          case 58: {
            ProductId = input.ReadString();
            break;
          }
          case 64: {
            SaleStatus = input.ReadInt32();
            break;
          }
          case 72: {
            AlertStock = input.ReadInt32();
            break;
          }
          case 82: {
            ImagePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商产品列表的返回信息
  /// </summary>
  public sealed partial class SuppliersProductListResponse : pb::IMessage<SuppliersProductListResponse> {
    private static readonly pb::MessageParser<SuppliersProductListResponse> _parser = new pb::MessageParser<SuppliersProductListResponse>(() => new SuppliersProductListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersProductListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductListResponse(SuppliersProductListResponse other) : this() {
      status_ = other.status_;
      productList_ = other.productList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductListResponse Clone() {
      return new SuppliersProductListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.SuppliersProduct> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.SuppliersProduct.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.SuppliersProduct> productList_ = new pbc::RepeatedField<global::SP.Service.SuppliersProduct>();
    /// <summary>
    ///*
    /// 供货商产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.SuppliersProduct> ProductList {
      get { return productList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersProductListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersProductListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productList_.Equals(other.productList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersProductListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productList_.Add(other.productList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取餐饮商家的产品列表的请求参数
  /// </summary>
  public sealed partial class SellerFoodProductRequest : pb::IMessage<SellerFoodProductRequest> {
    private static readonly pb::MessageParser<SellerFoodProductRequest> _parser = new pb::MessageParser<SellerFoodProductRequest>(() => new SellerFoodProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerFoodProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductRequest(SellerFoodProductRequest other) : this() {
      pageIndex_ = other.pageIndex_;
      isSelected_ = other.isSelected_;
      accountId_ = other.accountId_;
      pageSize_ = other.pageSize_;
      regionId_ = other.regionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductRequest Clone() {
      return new SellerFoodProductRequest(this);
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 1;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "isSelected" field.</summary>
    public const int IsSelectedFieldNumber = 2;
    private bool isSelected_;
    /// <summary>
    ///*
    /// 选择状态(true:已被选中的 false：所有的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelected {
      get { return isSelected_; }
      set {
        isSelected_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "regionId" field.</summary>
    public const int RegionIdFieldNumber = 5;
    private int regionId_;
    /// <summary>
    ///*
    /// 所属校区的区域ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerFoodProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerFoodProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageIndex != other.PageIndex) return false;
      if (IsSelected != other.IsSelected) return false;
      if (AccountId != other.AccountId) return false;
      if (PageSize != other.PageSize) return false;
      if (RegionId != other.RegionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (IsSelected != false) hash ^= IsSelected.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (IsSelected != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSelected);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (RegionId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RegionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (IsSelected != false) {
        size += 1 + 1;
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerFoodProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.IsSelected != false) {
        IsSelected = other.IsSelected;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            IsSelected = input.ReadBool();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
          case 40: {
            RegionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 餐饮商家的产品的信息
  /// </summary>
  public sealed partial class SellerFoodProduct : pb::IMessage<SellerFoodProduct> {
    private static readonly pb::MessageParser<SellerFoodProduct> _parser = new pb::MessageParser<SellerFoodProduct>(() => new SellerFoodProduct());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerFoodProduct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProduct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProduct(SellerFoodProduct other) : this() {
      productName_ = other.productName_;
      imagePath_ = other.imagePath_;
      purchasePrice_ = other.purchasePrice_;
      productId_ = other.productId_;
      selectedStatus_ = other.selectedStatus_;
      suppliersId_ = other.suppliersId_;
      supplierProductId_ = other.supplierProductId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProduct Clone() {
      return new SellerFoodProduct(this);
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 3;
    private string productName_ = "";
    /// <summary>
    ///*
    /// 产品名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagePath" field.</summary>
    public const int ImagePathFieldNumber = 4;
    private string imagePath_ = "";
    /// <summary>
    ///*
    /// 产品图的地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImagePath {
      get { return imagePath_; }
      set {
        imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchasePrice" field.</summary>
    public const int PurchasePriceFieldNumber = 6;
    private double purchasePrice_;
    /// <summary>
    ///*
    /// 拿货价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PurchasePrice {
      get { return purchasePrice_; }
      set {
        purchasePrice_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 7;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selectedStatus" field.</summary>
    public const int SelectedStatusFieldNumber = 8;
    private int selectedStatus_;
    /// <summary>
    ///*
    /// 商品选择状态（0：未选择 1：已选择）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedStatus {
      get { return selectedStatus_; }
      set {
        selectedStatus_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 9;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 商户负责人ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "supplierProductId" field.</summary>
    public const int SupplierProductIdFieldNumber = 10;
    private int supplierProductId_;
    /// <summary>
    ///*
    /// 商家产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupplierProductId {
      get { return supplierProductId_; }
      set {
        supplierProductId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerFoodProduct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerFoodProduct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductName != other.ProductName) return false;
      if (ImagePath != other.ImagePath) return false;
      if (PurchasePrice != other.PurchasePrice) return false;
      if (ProductId != other.ProductId) return false;
      if (SelectedStatus != other.SelectedStatus) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (SupplierProductId != other.SupplierProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
      if (PurchasePrice != 0D) hash ^= PurchasePrice.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (SelectedStatus != 0) hash ^= SelectedStatus.GetHashCode();
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (SupplierProductId != 0) hash ^= SupplierProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductName);
      }
      if (ImagePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ImagePath);
      }
      if (PurchasePrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PurchasePrice);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProductId);
      }
      if (SelectedStatus != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SelectedStatus);
      }
      if (SuppliersId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SuppliersId);
      }
      if (SupplierProductId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SupplierProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (ImagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
      }
      if (PurchasePrice != 0D) {
        size += 1 + 8;
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (SelectedStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedStatus);
      }
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (SupplierProductId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupplierProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerFoodProduct other) {
      if (other == null) {
        return;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.ImagePath.Length != 0) {
        ImagePath = other.ImagePath;
      }
      if (other.PurchasePrice != 0D) {
        PurchasePrice = other.PurchasePrice;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.SelectedStatus != 0) {
        SelectedStatus = other.SelectedStatus;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.SupplierProductId != 0) {
        SupplierProductId = other.SupplierProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            ProductName = input.ReadString();
            break;
          }
          case 34: {
            ImagePath = input.ReadString();
            break;
          }
          case 49: {
            PurchasePrice = input.ReadDouble();
            break;
          }
          case 58: {
            ProductId = input.ReadString();
            break;
          }
          case 64: {
            SelectedStatus = input.ReadInt32();
            break;
          }
          case 72: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 80: {
            SupplierProductId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取餐饮商家的产品列表的返回信息
  /// </summary>
  public sealed partial class SellerFoodProductListResponse : pb::IMessage<SellerFoodProductListResponse> {
    private static readonly pb::MessageParser<SellerFoodProductListResponse> _parser = new pb::MessageParser<SellerFoodProductListResponse>(() => new SellerFoodProductListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellerFoodProductListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductListResponse(SellerFoodProductListResponse other) : this() {
      status_ = other.status_;
      productList_ = other.productList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellerFoodProductListResponse Clone() {
      return new SellerFoodProductListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.SellerFoodProduct> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.SellerFoodProduct.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.SellerFoodProduct> productList_ = new pbc::RepeatedField<global::SP.Service.SellerFoodProduct>();
    /// <summary>
    ///*
    /// 产品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.SellerFoodProduct> ProductList {
      get { return productList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 4;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellerFoodProductListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellerFoodProductListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!productList_.Equals(other.productList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= productList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
      if (Total != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellerFoodProductListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      productList_.Add(other.productList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
          case 32: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 更新产品上下架状态的请求参数
  /// </summary>
  public sealed partial class SupplierProductSaleStatusRequest : pb::IMessage<SupplierProductSaleStatusRequest> {
    private static readonly pb::MessageParser<SupplierProductSaleStatusRequest> _parser = new pb::MessageParser<SupplierProductSaleStatusRequest>(() => new SupplierProductSaleStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupplierProductSaleStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierProductSaleStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierProductSaleStatusRequest(SupplierProductSaleStatusRequest other) : this() {
      suppliersId_ = other.suppliersId_;
      productId_ = other.productId_;
      saleStatus_ = other.saleStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierProductSaleStatusRequest Clone() {
      return new SupplierProductSaleStatusRequest(this);
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 1;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 商户负责人ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 商品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saleStatus" field.</summary>
    public const int SaleStatusFieldNumber = 3;
    private int saleStatus_;
    /// <summary>
    ///*
    /// 上下架状态(0：下架 1：上架)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleStatus {
      get { return saleStatus_; }
      set {
        saleStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupplierProductSaleStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupplierProductSaleStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SuppliersId != other.SuppliersId) return false;
      if (ProductId != other.ProductId) return false;
      if (SaleStatus != other.SaleStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (SaleStatus != 0) hash ^= SaleStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuppliersId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SuppliersId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (SaleStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SaleStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (SaleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupplierProductSaleStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.SaleStatus != 0) {
        SaleStatus = other.SaleStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 24: {
            SaleStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 业务员选择商家产品的请求参数
  /// </summary>
  public sealed partial class SelectSellerProductRequest : pb::IMessage<SelectSellerProductRequest> {
    private static readonly pb::MessageParser<SelectSellerProductRequest> _parser = new pb::MessageParser<SelectSellerProductRequest>(() => new SelectSellerProductRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectSellerProductRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectSellerProductRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectSellerProductRequest(SelectSellerProductRequest other) : this() {
      supplierProductId_ = other.supplierProductId_;
      accountId_ = other.accountId_;
      isSelected_ = other.isSelected_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectSellerProductRequest Clone() {
      return new SelectSellerProductRequest(this);
    }

    /// <summary>Field number for the "supplierProductId" field.</summary>
    public const int SupplierProductIdFieldNumber = 1;
    private int supplierProductId_;
    /// <summary>
    ///*
    /// 商家产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupplierProductId {
      get { return supplierProductId_; }
      set {
        supplierProductId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 业务员账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSelected" field.</summary>
    public const int IsSelectedFieldNumber = 3;
    private bool isSelected_;
    /// <summary>
    ///*
    /// 是否选择状态(true：选择 false：去除选择)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelected {
      get { return isSelected_; }
      set {
        isSelected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectSellerProductRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectSellerProductRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SupplierProductId != other.SupplierProductId) return false;
      if (AccountId != other.AccountId) return false;
      if (IsSelected != other.IsSelected) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SupplierProductId != 0) hash ^= SupplierProductId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (IsSelected != false) hash ^= IsSelected.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SupplierProductId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SupplierProductId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (IsSelected != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSelected);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SupplierProductId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupplierProductId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (IsSelected != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectSellerProductRequest other) {
      if (other == null) {
        return;
      }
      if (other.SupplierProductId != 0) {
        SupplierProductId = other.SupplierProductId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.IsSelected != false) {
        IsSelected = other.IsSelected;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SupplierProductId = input.ReadInt32();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 24: {
            IsSelected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商的返回信息
  /// </summary>
  public sealed partial class SupplierInfoResponse : pb::IMessage<SupplierInfoResponse> {
    private static readonly pb::MessageParser<SupplierInfoResponse> _parser = new pb::MessageParser<SupplierInfoResponse>(() => new SupplierInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupplierInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierInfoResponse(SupplierInfoResponse other) : this() {
      status_ = other.status_;
      suppliersId_ = other.suppliersId_;
      suppliersName_ = other.suppliersName_;
      accountId_ = other.accountId_;
      alipayNo_ = other.alipayNo_;
      cellPhone_ = other.cellPhone_;
      typeId_ = other.typeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierInfoResponse Clone() {
      return new SupplierInfoResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "suppliersId" field.</summary>
    public const int SuppliersIdFieldNumber = 2;
    private int suppliersId_;
    /// <summary>
    ///*
    /// 供货商ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuppliersId {
      get { return suppliersId_; }
      set {
        suppliersId_ = value;
      }
    }

    /// <summary>Field number for the "suppliersName" field.</summary>
    public const int SuppliersNameFieldNumber = 3;
    private string suppliersName_ = "";
    /// <summary>
    ///*
    /// 供货商名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SuppliersName {
      get { return suppliersName_; }
      set {
        suppliersName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 供货商账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alipayNo" field.</summary>
    public const int AlipayNoFieldNumber = 5;
    private string alipayNo_ = "";
    /// <summary>
    ///*
    /// 提现账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlipayNo {
      get { return alipayNo_; }
      set {
        alipayNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cellPhone" field.</summary>
    public const int CellPhoneFieldNumber = 6;
    private string cellPhone_ = "";
    /// <summary>
    ///*
    /// 手机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CellPhone {
      get { return cellPhone_; }
      set {
        cellPhone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "typeId" field.</summary>
    public const int TypeIdFieldNumber = 7;
    private int typeId_;
    /// <summary>
    ///*
    /// 种类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupplierInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupplierInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (SuppliersId != other.SuppliersId) return false;
      if (SuppliersName != other.SuppliersName) return false;
      if (AccountId != other.AccountId) return false;
      if (AlipayNo != other.AlipayNo) return false;
      if (CellPhone != other.CellPhone) return false;
      if (TypeId != other.TypeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (SuppliersId != 0) hash ^= SuppliersId.GetHashCode();
      if (SuppliersName.Length != 0) hash ^= SuppliersName.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AlipayNo.Length != 0) hash ^= AlipayNo.GetHashCode();
      if (CellPhone.Length != 0) hash ^= CellPhone.GetHashCode();
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (SuppliersId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SuppliersId);
      }
      if (SuppliersName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SuppliersName);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountId);
      }
      if (AlipayNo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AlipayNo);
      }
      if (CellPhone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CellPhone);
      }
      if (TypeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TypeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (SuppliersId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuppliersId);
      }
      if (SuppliersName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SuppliersName);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AlipayNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlipayNo);
      }
      if (CellPhone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellPhone);
      }
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupplierInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.SuppliersId != 0) {
        SuppliersId = other.SuppliersId;
      }
      if (other.SuppliersName.Length != 0) {
        SuppliersName = other.SuppliersName;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AlipayNo.Length != 0) {
        AlipayNo = other.AlipayNo;
      }
      if (other.CellPhone.Length != 0) {
        CellPhone = other.CellPhone;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            SuppliersId = input.ReadInt32();
            break;
          }
          case 26: {
            SuppliersName = input.ReadString();
            break;
          }
          case 34: {
            AccountId = input.ReadString();
            break;
          }
          case 42: {
            AlipayNo = input.ReadString();
            break;
          }
          case 50: {
            CellPhone = input.ReadString();
            break;
          }
          case 56: {
            TypeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取供货商产品的返回信息
  /// </summary>
  public sealed partial class SuppliersProductResponse : pb::IMessage<SuppliersProductResponse> {
    private static readonly pb::MessageParser<SuppliersProductResponse> _parser = new pb::MessageParser<SuppliersProductResponse>(() => new SuppliersProductResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuppliersProductResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.ProductModelReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductResponse(SuppliersProductResponse other) : this() {
      status_ = other.status_;
      Product = other.product_ != null ? other.Product.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuppliersProductResponse Clone() {
      return new SuppliersProductResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 2;
    private global::SP.Service.SuppliersProduct product_;
    /// <summary>
    ///*
    /// 供货商产品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.SuppliersProduct Product {
      get { return product_; }
      set {
        product_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuppliersProductResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuppliersProductResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Product, other.Product)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (product_ != null) hash ^= Product.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (product_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Product);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (product_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Product);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuppliersProductResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.product_ != null) {
        if (product_ == null) {
          product_ = new global::SP.Service.SuppliersProduct();
        }
        Product.MergeFrom(other.Product);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (product_ == null) {
              product_ = new global::SP.Service.SuppliersProduct();
            }
            input.ReadMessage(product_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
