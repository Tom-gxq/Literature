// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SP.Service {
  public static partial class ProductService
  {
    static readonly string __ServiceName = "SP.Service.ProductService";

    static readonly grpc::Marshaller<global::SP.Service.ProductListRequest> __Marshaller_ProductListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductListResponse> __Marshaller_ProductListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductIdRequest> __Marshaller_ProductIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProdctDetailResponse> __Marshaller_ProdctDetailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProdctDetailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.BrandIdRequest> __Marshaller_BrandIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.BrandIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TypeIdRequest> __Marshaller_TypeIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TypeIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AttributeIdRequest> __Marshaller_AttributeIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AttributeIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SearchProductRequest> __Marshaller_SearchProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SearchProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleAttributeListRequest> __Marshaller_TitleAttributeListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleAttributeListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleAttributeListResponse> __Marshaller_TitleAttributeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleAttributeListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopListRequest> __Marshaller_ShopListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopListResponse> __Marshaller_ShopListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopProductListRequest> __Marshaller_ShopProductListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopProductListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopIdRequest> __Marshaller_ShopIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopResponse> __Marshaller_ShopResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.VoidRequest> __Marshaller_VoidRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.VoidRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.CarouselListResponse> __Marshaller_CarouselListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.CarouselListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleTypeListResponse> __Marshaller_TitleTypeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleTypeListResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SP.Service.ProductListRequest, global::SP.Service.ProductListResponse> __Method_GetProductList = new grpc::Method<global::SP.Service.ProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductList",
        __Marshaller_ProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProdctDetailResponse> __Method_GetProductDetail = new grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProdctDetailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductDetail",
        __Marshaller_ProductIdRequest,
        __Marshaller_ProdctDetailResponse);

    static readonly grpc::Method<global::SP.Service.BrandIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByBrandId = new grpc::Method<global::SP.Service.BrandIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByBrandId",
        __Marshaller_BrandIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.TypeIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByTypeId = new grpc::Method<global::SP.Service.TypeIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByTypeId",
        __Marshaller_TypeIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.AttributeIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByAttributeId = new grpc::Method<global::SP.Service.AttributeIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByAttributeId",
        __Marshaller_AttributeIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.SearchProductRequest, global::SP.Service.ProductListResponse> __Method_SearchProductKeywordList = new grpc::Method<global::SP.Service.SearchProductRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchProductKeywordList",
        __Marshaller_SearchProductRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.TitleAttributeListRequest, global::SP.Service.TitleAttributeListResponse> __Method_GetTitleAttributeList = new grpc::Method<global::SP.Service.TitleAttributeListRequest, global::SP.Service.TitleAttributeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTitleAttributeList",
        __Marshaller_TitleAttributeListRequest,
        __Marshaller_TitleAttributeListResponse);

    static readonly grpc::Method<global::SP.Service.ShopListRequest, global::SP.Service.ShopListResponse> __Method_GetAllShopList = new grpc::Method<global::SP.Service.ShopListRequest, global::SP.Service.ShopListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllShopList",
        __Marshaller_ShopListRequest,
        __Marshaller_ShopListResponse);

    static readonly grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse> __Method_GetShopProductList = new grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopProductList",
        __Marshaller_ShopProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse> __Method_GetFoodShopProductList = new grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFoodShopProductList",
        __Marshaller_ShopProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ShopIdRequest, global::SP.Service.ShopResponse> __Method_GetShopById = new grpc::Method<global::SP.Service.ShopIdRequest, global::SP.Service.ShopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopById",
        __Marshaller_ShopIdRequest,
        __Marshaller_ShopResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.CarouselListResponse> __Method_GetCarouselList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.CarouselListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCarouselList",
        __Marshaller_VoidRequest,
        __Marshaller_CarouselListResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse> __Method_GetShopTypeList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopTypeList",
        __Marshaller_VoidRequest,
        __Marshaller_TitleTypeListResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse> __Method_GetProductTypeList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductTypeList",
        __Marshaller_VoidRequest,
        __Marshaller_TitleTypeListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SP.Service.ProductServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProductService</summary>
    public abstract partial class ProductServiceBase
    {
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductList(global::SP.Service.ProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProdctDetailResponse> GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShopListResponse> GetAllShopList(global::SP.Service.ShopListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShopResponse> GetShopById(global::SP.Service.ShopIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.CarouselListResponse> GetCarouselList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleTypeListResponse> GetShopTypeList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleTypeListResponse> GetProductTypeList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProductService</summary>
    public partial class ProductServiceClient : grpc::ClientBase<ProductServiceClient>
    {
      /// <summary>Creates a new client for ProductService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProductServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProductService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProductServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProductServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProductServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductList(global::SP.Service.ProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductList(global::SP.Service.ProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListAsync(global::SP.Service.ProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListAsync(global::SP.Service.ProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProdctDetailResponse GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProdctDetailResponse GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProdctDetailResponse> GetProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProdctDetailResponse> GetProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByBrandId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByBrandId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByBrandIdAsync(global::SP.Service.BrandIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByBrandIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByBrandIdAsync(global::SP.Service.BrandIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByBrandId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByTypeId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByTypeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByTypeIdAsync(global::SP.Service.TypeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByTypeIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByTypeIdAsync(global::SP.Service.TypeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByTypeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByAttributeId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByAttributeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByAttributeIdAsync(global::SP.Service.AttributeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByAttributeIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByAttributeIdAsync(global::SP.Service.AttributeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByAttributeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchProductKeywordList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchProductKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> SearchProductKeywordListAsync(global::SP.Service.SearchProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchProductKeywordListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> SearchProductKeywordListAsync(global::SP.Service.SearchProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchProductKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleAttributeListResponse GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTitleAttributeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleAttributeListResponse GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTitleAttributeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeListAsync(global::SP.Service.TitleAttributeListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTitleAttributeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeListAsync(global::SP.Service.TitleAttributeListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTitleAttributeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopListResponse GetAllShopList(global::SP.Service.ShopListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllShopList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopListResponse GetAllShopList(global::SP.Service.ShopListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllShopList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopListResponse> GetAllShopListAsync(global::SP.Service.ShopListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllShopListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopListResponse> GetAllShopListAsync(global::SP.Service.ShopListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllShopList, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFoodShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetFoodShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFoodShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetFoodShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopResponse GetShopById(global::SP.Service.ShopIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopResponse GetShopById(global::SP.Service.ShopIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopResponse> GetShopByIdAsync(global::SP.Service.ShopIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopResponse> GetShopByIdAsync(global::SP.Service.ShopIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.CarouselListResponse GetCarouselList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCarouselList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.CarouselListResponse GetCarouselList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCarouselList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.CarouselListResponse> GetCarouselListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCarouselListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.CarouselListResponse> GetCarouselListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCarouselList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetShopTypeList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetShopTypeList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetShopTypeListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetShopTypeListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetProductTypeList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetProductTypeList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetProductTypeListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetProductTypeListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductTypeList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProductServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProductServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProductServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetProductList, serviceImpl.GetProductList)
          .AddMethod(__Method_GetProductDetail, serviceImpl.GetProductDetail)
          .AddMethod(__Method_GetProductListByBrandId, serviceImpl.GetProductListByBrandId)
          .AddMethod(__Method_GetProductListByTypeId, serviceImpl.GetProductListByTypeId)
          .AddMethod(__Method_GetProductListByAttributeId, serviceImpl.GetProductListByAttributeId)
          .AddMethod(__Method_SearchProductKeywordList, serviceImpl.SearchProductKeywordList)
          .AddMethod(__Method_GetTitleAttributeList, serviceImpl.GetTitleAttributeList)
          .AddMethod(__Method_GetAllShopList, serviceImpl.GetAllShopList)
          .AddMethod(__Method_GetShopProductList, serviceImpl.GetShopProductList)
          .AddMethod(__Method_GetFoodShopProductList, serviceImpl.GetFoodShopProductList)
          .AddMethod(__Method_GetShopById, serviceImpl.GetShopById)
          .AddMethod(__Method_GetCarouselList, serviceImpl.GetCarouselList)
          .AddMethod(__Method_GetShopTypeList, serviceImpl.GetShopTypeList)
          .AddMethod(__Method_GetProductTypeList, serviceImpl.GetProductTypeList).Build();
    }

  }
}
#endregion
