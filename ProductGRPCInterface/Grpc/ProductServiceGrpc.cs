// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SP.Service {
  public static partial class ProductService
  {
    static readonly string __ServiceName = "SP.Service.ProductService";

    static readonly grpc::Marshaller<global::SP.Service.ProductListRequest> __Marshaller_ProductListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductListResponse> __Marshaller_ProductListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductIdRequest> __Marshaller_ProductIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProdctDetailResponse> __Marshaller_ProdctDetailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProdctDetailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.BrandIdRequest> __Marshaller_BrandIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.BrandIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TypeIdRequest> __Marshaller_TypeIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TypeIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AttributeIdRequest> __Marshaller_AttributeIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AttributeIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SearchProductRequest> __Marshaller_SearchProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SearchProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleAttributeListRequest> __Marshaller_TitleAttributeListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleAttributeListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleAttributeListResponse> __Marshaller_TitleAttributeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleAttributeListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopListRequest> __Marshaller_ShopListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopListResponse> __Marshaller_ShopListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopProductListRequest> __Marshaller_ShopProductListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopProductListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopIdRequest> __Marshaller_ShopIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopResponse> __Marshaller_ShopResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.VoidRequest> __Marshaller_VoidRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.VoidRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.CarouselListResponse> __Marshaller_CarouselListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.CarouselListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TitleTypeListResponse> __Marshaller_TitleTypeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TitleTypeListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OpenShopStatusRequest> __Marshaller_OpenShopStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OpenShopStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ResultResponse> __Marshaller_ResultResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ResultResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopProductRequest> __Marshaller_ShopProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SellerProductListResponse> __Marshaller_SellerProductListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SellerProductListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SellerShopProductRequest> __Marshaller_SellerShopProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SellerShopProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.KindRequest> __Marshaller_KindRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.KindRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductTypeListResponse> __Marshaller_ProductTypeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductTypeListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductRequest> __Marshaller_ProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductDetailResponse> __Marshaller_ProductDetailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductDetailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ProductSaleStatusRequest> __Marshaller_ProductSaleStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ProductSaleStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountIdRequest> __Marshaller_AccountIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.ShopStatusResponse> __Marshaller_ShopStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.ShopStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddSuppliersProductRequest> __Marshaller_AddSuppliersProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddSuppliersProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SupplierIdRequest> __Marshaller_SupplierIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SupplierIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddSuppliersRegionRequest> __Marshaller_AddSuppliersRegionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddSuppliersRegionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SuppliersRegionListResponse> __Marshaller_SuppliersRegionListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SuppliersRegionListResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SP.Service.ProductListRequest, global::SP.Service.ProductListResponse> __Method_GetProductList = new grpc::Method<global::SP.Service.ProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductList",
        __Marshaller_ProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProdctDetailResponse> __Method_GetProductDetail = new grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProdctDetailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductDetail",
        __Marshaller_ProductIdRequest,
        __Marshaller_ProdctDetailResponse);

    static readonly grpc::Method<global::SP.Service.BrandIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByBrandId = new grpc::Method<global::SP.Service.BrandIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByBrandId",
        __Marshaller_BrandIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.TypeIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByTypeId = new grpc::Method<global::SP.Service.TypeIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByTypeId",
        __Marshaller_TypeIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.AttributeIdRequest, global::SP.Service.ProductListResponse> __Method_GetProductListByAttributeId = new grpc::Method<global::SP.Service.AttributeIdRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductListByAttributeId",
        __Marshaller_AttributeIdRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.SearchProductRequest, global::SP.Service.ProductListResponse> __Method_SearchProductKeywordList = new grpc::Method<global::SP.Service.SearchProductRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchProductKeywordList",
        __Marshaller_SearchProductRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.TitleAttributeListRequest, global::SP.Service.TitleAttributeListResponse> __Method_GetTitleAttributeList = new grpc::Method<global::SP.Service.TitleAttributeListRequest, global::SP.Service.TitleAttributeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTitleAttributeList",
        __Marshaller_TitleAttributeListRequest,
        __Marshaller_TitleAttributeListResponse);

    static readonly grpc::Method<global::SP.Service.ShopListRequest, global::SP.Service.ShopListResponse> __Method_GetAllShopList = new grpc::Method<global::SP.Service.ShopListRequest, global::SP.Service.ShopListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllShopList",
        __Marshaller_ShopListRequest,
        __Marshaller_ShopListResponse);

    static readonly grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse> __Method_GetShopProductList = new grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopProductList",
        __Marshaller_ShopProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse> __Method_GetFoodShopProductList = new grpc::Method<global::SP.Service.ShopProductListRequest, global::SP.Service.ProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFoodShopProductList",
        __Marshaller_ShopProductListRequest,
        __Marshaller_ProductListResponse);

    static readonly grpc::Method<global::SP.Service.ShopIdRequest, global::SP.Service.ShopResponse> __Method_GetShopById = new grpc::Method<global::SP.Service.ShopIdRequest, global::SP.Service.ShopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopById",
        __Marshaller_ShopIdRequest,
        __Marshaller_ShopResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.CarouselListResponse> __Method_GetCarouselList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.CarouselListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCarouselList",
        __Marshaller_VoidRequest,
        __Marshaller_CarouselListResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse> __Method_GetShopTypeList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopTypeList",
        __Marshaller_VoidRequest,
        __Marshaller_TitleTypeListResponse);

    static readonly grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse> __Method_GetProductTypeList = new grpc::Method<global::SP.Service.VoidRequest, global::SP.Service.TitleTypeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProductTypeList",
        __Marshaller_VoidRequest,
        __Marshaller_TitleTypeListResponse);

    static readonly grpc::Method<global::SP.Service.OpenShopStatusRequest, global::SP.Service.ResultResponse> __Method_UpdateOpenShopStatus = new grpc::Method<global::SP.Service.OpenShopStatusRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOpenShopStatus",
        __Marshaller_OpenShopStatusRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.ShopProductRequest, global::SP.Service.SellerProductListResponse> __Method_GetDistributorMarketProduct = new grpc::Method<global::SP.Service.ShopProductRequest, global::SP.Service.SellerProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDistributorMarketProduct",
        __Marshaller_ShopProductRequest,
        __Marshaller_SellerProductListResponse);

    static readonly grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse> __Method_GetDistributorFoodShopProductList = new grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDistributorFoodShopProductList",
        __Marshaller_SellerShopProductRequest,
        __Marshaller_SellerProductListResponse);

    static readonly grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse> __Method_GetSellerMarketProduct = new grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSellerMarketProduct",
        __Marshaller_SellerShopProductRequest,
        __Marshaller_SellerProductListResponse);

    static readonly grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse> __Method_GetSellerFoodShopProductList = new grpc::Method<global::SP.Service.SellerShopProductRequest, global::SP.Service.SellerProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSellerFoodShopProductList",
        __Marshaller_SellerShopProductRequest,
        __Marshaller_SellerProductListResponse);

    static readonly grpc::Method<global::SP.Service.KindRequest, global::SP.Service.ProductTypeListResponse> __Method_GetAllProductTypeList = new grpc::Method<global::SP.Service.KindRequest, global::SP.Service.ProductTypeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllProductTypeList",
        __Marshaller_KindRequest,
        __Marshaller_ProductTypeListResponse);

    static readonly grpc::Method<global::SP.Service.ProductRequest, global::SP.Service.ResultResponse> __Method_AddProduct = new grpc::Method<global::SP.Service.ProductRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddProduct",
        __Marshaller_ProductRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.ProductRequest, global::SP.Service.ResultResponse> __Method_UpdateProduct = new grpc::Method<global::SP.Service.ProductRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProduct",
        __Marshaller_ProductRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ResultResponse> __Method_DelProduct = new grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DelProduct",
        __Marshaller_ProductIdRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProductDetailResponse> __Method_GetSellerProductDetail = new grpc::Method<global::SP.Service.ProductIdRequest, global::SP.Service.ProductDetailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSellerProductDetail",
        __Marshaller_ProductIdRequest,
        __Marshaller_ProductDetailResponse);

    static readonly grpc::Method<global::SP.Service.ProductSaleStatusRequest, global::SP.Service.ResultResponse> __Method_UpdateProductSaleStatus = new grpc::Method<global::SP.Service.ProductSaleStatusRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProductSaleStatus",
        __Marshaller_ProductSaleStatusRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShopStatusResponse> __Method_GetShopStatus = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.ShopStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShopStatus",
        __Marshaller_AccountIdRequest,
        __Marshaller_ShopStatusResponse);

    static readonly grpc::Method<global::SP.Service.AddSuppliersProductRequest, global::SP.Service.ResultResponse> __Method_AddSuppliersProduct = new grpc::Method<global::SP.Service.AddSuppliersProductRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSuppliersProduct",
        __Marshaller_AddSuppliersProductRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.SupplierIdRequest, global::SP.Service.SellerProductListResponse> __Method_GetSuppliersProduct = new grpc::Method<global::SP.Service.SupplierIdRequest, global::SP.Service.SellerProductListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSuppliersProduct",
        __Marshaller_SupplierIdRequest,
        __Marshaller_SellerProductListResponse);

    static readonly grpc::Method<global::SP.Service.AddSuppliersRegionRequest, global::SP.Service.ResultResponse> __Method_AddSuppliersRegion = new grpc::Method<global::SP.Service.AddSuppliersRegionRequest, global::SP.Service.ResultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSuppliersRegion",
        __Marshaller_AddSuppliersRegionRequest,
        __Marshaller_ResultResponse);

    static readonly grpc::Method<global::SP.Service.SupplierIdRequest, global::SP.Service.SuppliersRegionListResponse> __Method_GetSuppliersRegion = new grpc::Method<global::SP.Service.SupplierIdRequest, global::SP.Service.SuppliersRegionListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSuppliersRegion",
        __Marshaller_SupplierIdRequest,
        __Marshaller_SuppliersRegionListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SP.Service.ProductServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProductService</summary>
    public abstract partial class ProductServiceBase
    {
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductList(global::SP.Service.ProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProdctDetailResponse> GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShopListResponse> GetAllShopList(global::SP.Service.ShopListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductListResponse> GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShopResponse> GetShopById(global::SP.Service.ShopIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.CarouselListResponse> GetCarouselList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleTypeListResponse> GetShopTypeList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TitleTypeListResponse> GetProductTypeList(global::SP.Service.VoidRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新店铺营业状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> UpdateOpenShopStatus(global::SP.Service.OpenShopStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取超市配送员的产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SellerProductListResponse> GetDistributorMarketProduct(global::SP.Service.ShopProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取餐饮配送员的产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SellerProductListResponse> GetDistributorFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取超市商家的产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SellerProductListResponse> GetSellerMarketProduct(global::SP.Service.SellerShopProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取餐饮商家的产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SellerProductListResponse> GetSellerFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品分类
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductTypeListResponse> GetAllProductTypeList(global::SP.Service.KindRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> AddProduct(global::SP.Service.ProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> UpdateProduct(global::SP.Service.ProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 删除产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> DelProduct(global::SP.Service.ProductIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ProductDetailResponse> GetSellerProductDetail(global::SP.Service.ProductIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新产品上下架状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> UpdateProductSaleStatus(global::SP.Service.ProductSaleStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取配送人员营业状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ShopStatusResponse> GetShopStatus(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加供货商产品
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> AddSuppliersProduct(global::SP.Service.AddSuppliersProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取供货商产品列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SellerProductListResponse> GetSuppliersProduct(global::SP.Service.SupplierIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 添加供货商范围
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.ResultResponse> AddSuppliersRegion(global::SP.Service.AddSuppliersRegionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取供货商范围列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SuppliersRegionListResponse> GetSuppliersRegion(global::SP.Service.SupplierIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProductService</summary>
    public partial class ProductServiceClient : grpc::ClientBase<ProductServiceClient>
    {
      /// <summary>Creates a new client for ProductService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProductServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProductService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProductServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProductServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProductServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductList(global::SP.Service.ProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductList(global::SP.Service.ProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListAsync(global::SP.Service.ProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 随机获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListAsync(global::SP.Service.ProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProdctDetailResponse GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProdctDetailResponse GetProductDetail(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProdctDetailResponse> GetProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProdctDetailResponse> GetProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByBrandId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByBrandId(global::SP.Service.BrandIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByBrandId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByBrandIdAsync(global::SP.Service.BrandIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByBrandIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品品牌获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByBrandIdAsync(global::SP.Service.BrandIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByBrandId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByTypeId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByTypeId(global::SP.Service.TypeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByTypeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByTypeIdAsync(global::SP.Service.TypeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByTypeIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品Type获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByTypeIdAsync(global::SP.Service.TypeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByTypeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByAttributeId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetProductListByAttributeId(global::SP.Service.AttributeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductListByAttributeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByAttributeIdAsync(global::SP.Service.AttributeIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductListByAttributeIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetProductListByAttributeIdAsync(global::SP.Service.AttributeIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductListByAttributeId, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchProductKeywordList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse SearchProductKeywordList(global::SP.Service.SearchProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchProductKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> SearchProductKeywordListAsync(global::SP.Service.SearchProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchProductKeywordListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> SearchProductKeywordListAsync(global::SP.Service.SearchProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchProductKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleAttributeListResponse GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTitleAttributeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleAttributeListResponse GetTitleAttributeList(global::SP.Service.TitleAttributeListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTitleAttributeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeListAsync(global::SP.Service.TitleAttributeListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTitleAttributeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取表头属性列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleAttributeListResponse> GetTitleAttributeListAsync(global::SP.Service.TitleAttributeListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTitleAttributeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopListResponse GetAllShopList(global::SP.Service.ShopListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllShopList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopListResponse GetAllShopList(global::SP.Service.ShopListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllShopList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopListResponse> GetAllShopListAsync(global::SP.Service.ShopListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllShopListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopListResponse> GetAllShopListAsync(global::SP.Service.ShopListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllShopList, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetShopProductList(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据产品属性获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFoodShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductListResponse GetFoodShopProductList(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetFoodShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetFoodShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductListResponse> GetFoodShopProductListAsync(global::SP.Service.ShopProductListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopResponse GetShopById(global::SP.Service.ShopIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopResponse GetShopById(global::SP.Service.ShopIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopResponse> GetShopByIdAsync(global::SP.Service.ShopIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopResponse> GetShopByIdAsync(global::SP.Service.ShopIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopById, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.CarouselListResponse GetCarouselList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCarouselList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.CarouselListResponse GetCarouselList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCarouselList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.CarouselListResponse> GetCarouselListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCarouselListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取轮播图
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.CarouselListResponse> GetCarouselListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCarouselList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetShopTypeList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetShopTypeList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetShopTypeListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取店铺种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetShopTypeListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetProductTypeList(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TitleTypeListResponse GetProductTypeList(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProductTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetProductTypeListAsync(global::SP.Service.VoidRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProductTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品种类列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TitleTypeListResponse> GetProductTypeListAsync(global::SP.Service.VoidRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProductTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新店铺营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateOpenShopStatus(global::SP.Service.OpenShopStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOpenShopStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新店铺营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateOpenShopStatus(global::SP.Service.OpenShopStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOpenShopStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新店铺营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateOpenShopStatusAsync(global::SP.Service.OpenShopStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOpenShopStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新店铺营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateOpenShopStatusAsync(global::SP.Service.OpenShopStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOpenShopStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取超市配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetDistributorMarketProduct(global::SP.Service.ShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDistributorMarketProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取超市配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetDistributorMarketProduct(global::SP.Service.ShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDistributorMarketProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取超市配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetDistributorMarketProductAsync(global::SP.Service.ShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDistributorMarketProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取超市配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetDistributorMarketProductAsync(global::SP.Service.ShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDistributorMarketProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取餐饮配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetDistributorFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDistributorFoodShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取餐饮配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetDistributorFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDistributorFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取餐饮配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetDistributorFoodShopProductListAsync(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDistributorFoodShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取餐饮配送员的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetDistributorFoodShopProductListAsync(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDistributorFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取超市商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSellerMarketProduct(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerMarketProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取超市商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSellerMarketProduct(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSellerMarketProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取超市商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSellerMarketProductAsync(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerMarketProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取超市商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSellerMarketProductAsync(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSellerMarketProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取餐饮商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSellerFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerFoodShopProductList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取餐饮商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSellerFoodShopProductList(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSellerFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取餐饮商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSellerFoodShopProductListAsync(global::SP.Service.SellerShopProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerFoodShopProductListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取餐饮商家的产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSellerFoodShopProductListAsync(global::SP.Service.SellerShopProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSellerFoodShopProductList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品分类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductTypeListResponse GetAllProductTypeList(global::SP.Service.KindRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllProductTypeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品分类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductTypeListResponse GetAllProductTypeList(global::SP.Service.KindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllProductTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品分类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductTypeListResponse> GetAllProductTypeListAsync(global::SP.Service.KindRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllProductTypeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品分类
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductTypeListResponse> GetAllProductTypeListAsync(global::SP.Service.KindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllProductTypeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddProduct(global::SP.Service.ProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddProduct(global::SP.Service.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddProductAsync(global::SP.Service.ProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddProductAsync(global::SP.Service.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateProduct(global::SP.Service.ProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateProduct(global::SP.Service.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateProductAsync(global::SP.Service.ProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateProductAsync(global::SP.Service.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse DelProduct(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse DelProduct(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DelProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 删除产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> DelProductAsync(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DelProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 删除产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> DelProductAsync(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DelProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductDetailResponse GetSellerProductDetail(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerProductDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ProductDetailResponse GetSellerProductDetail(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSellerProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductDetailResponse> GetSellerProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSellerProductDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取产品详情
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ProductDetailResponse> GetSellerProductDetailAsync(global::SP.Service.ProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSellerProductDetail, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新产品上下架状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateProductSaleStatus(global::SP.Service.ProductSaleStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProductSaleStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新产品上下架状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse UpdateProductSaleStatus(global::SP.Service.ProductSaleStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProductSaleStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新产品上下架状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateProductSaleStatusAsync(global::SP.Service.ProductSaleStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateProductSaleStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新产品上下架状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> UpdateProductSaleStatusAsync(global::SP.Service.ProductSaleStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProductSaleStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取配送人员营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopStatusResponse GetShopStatus(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取配送人员营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ShopStatusResponse GetShopStatus(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShopStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取配送人员营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopStatusResponse> GetShopStatusAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetShopStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取配送人员营业状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ShopStatusResponse> GetShopStatusAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShopStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加供货商产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddSuppliersProduct(global::SP.Service.AddSuppliersProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSuppliersProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加供货商产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddSuppliersProduct(global::SP.Service.AddSuppliersProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSuppliersProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加供货商产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddSuppliersProductAsync(global::SP.Service.AddSuppliersProductRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSuppliersProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加供货商产品
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddSuppliersProductAsync(global::SP.Service.AddSuppliersProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSuppliersProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取供货商产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSuppliersProduct(global::SP.Service.SupplierIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSuppliersProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取供货商产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SellerProductListResponse GetSuppliersProduct(global::SP.Service.SupplierIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSuppliersProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取供货商产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSuppliersProductAsync(global::SP.Service.SupplierIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSuppliersProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取供货商产品列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SellerProductListResponse> GetSuppliersProductAsync(global::SP.Service.SupplierIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSuppliersProduct, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加供货商范围
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddSuppliersRegion(global::SP.Service.AddSuppliersRegionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSuppliersRegion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加供货商范围
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.ResultResponse AddSuppliersRegion(global::SP.Service.AddSuppliersRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSuppliersRegion, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加供货商范围
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddSuppliersRegionAsync(global::SP.Service.AddSuppliersRegionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddSuppliersRegionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加供货商范围
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.ResultResponse> AddSuppliersRegionAsync(global::SP.Service.AddSuppliersRegionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSuppliersRegion, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取供货商范围列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SuppliersRegionListResponse GetSuppliersRegion(global::SP.Service.SupplierIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSuppliersRegion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取供货商范围列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SuppliersRegionListResponse GetSuppliersRegion(global::SP.Service.SupplierIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSuppliersRegion, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取供货商范围列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SuppliersRegionListResponse> GetSuppliersRegionAsync(global::SP.Service.SupplierIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSuppliersRegionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取供货商范围列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SuppliersRegionListResponse> GetSuppliersRegionAsync(global::SP.Service.SupplierIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSuppliersRegion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProductServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProductServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProductServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetProductList, serviceImpl.GetProductList)
          .AddMethod(__Method_GetProductDetail, serviceImpl.GetProductDetail)
          .AddMethod(__Method_GetProductListByBrandId, serviceImpl.GetProductListByBrandId)
          .AddMethod(__Method_GetProductListByTypeId, serviceImpl.GetProductListByTypeId)
          .AddMethod(__Method_GetProductListByAttributeId, serviceImpl.GetProductListByAttributeId)
          .AddMethod(__Method_SearchProductKeywordList, serviceImpl.SearchProductKeywordList)
          .AddMethod(__Method_GetTitleAttributeList, serviceImpl.GetTitleAttributeList)
          .AddMethod(__Method_GetAllShopList, serviceImpl.GetAllShopList)
          .AddMethod(__Method_GetShopProductList, serviceImpl.GetShopProductList)
          .AddMethod(__Method_GetFoodShopProductList, serviceImpl.GetFoodShopProductList)
          .AddMethod(__Method_GetShopById, serviceImpl.GetShopById)
          .AddMethod(__Method_GetCarouselList, serviceImpl.GetCarouselList)
          .AddMethod(__Method_GetShopTypeList, serviceImpl.GetShopTypeList)
          .AddMethod(__Method_GetProductTypeList, serviceImpl.GetProductTypeList)
          .AddMethod(__Method_UpdateOpenShopStatus, serviceImpl.UpdateOpenShopStatus)
          .AddMethod(__Method_GetDistributorMarketProduct, serviceImpl.GetDistributorMarketProduct)
          .AddMethod(__Method_GetDistributorFoodShopProductList, serviceImpl.GetDistributorFoodShopProductList)
          .AddMethod(__Method_GetSellerMarketProduct, serviceImpl.GetSellerMarketProduct)
          .AddMethod(__Method_GetSellerFoodShopProductList, serviceImpl.GetSellerFoodShopProductList)
          .AddMethod(__Method_GetAllProductTypeList, serviceImpl.GetAllProductTypeList)
          .AddMethod(__Method_AddProduct, serviceImpl.AddProduct)
          .AddMethod(__Method_UpdateProduct, serviceImpl.UpdateProduct)
          .AddMethod(__Method_DelProduct, serviceImpl.DelProduct)
          .AddMethod(__Method_GetSellerProductDetail, serviceImpl.GetSellerProductDetail)
          .AddMethod(__Method_UpdateProductSaleStatus, serviceImpl.UpdateProductSaleStatus)
          .AddMethod(__Method_GetShopStatus, serviceImpl.GetShopStatus)
          .AddMethod(__Method_AddSuppliersProduct, serviceImpl.AddSuppliersProduct)
          .AddMethod(__Method_GetSuppliersProduct, serviceImpl.GetSuppliersProduct)
          .AddMethod(__Method_AddSuppliersRegion, serviceImpl.AddSuppliersRegion)
          .AddMethod(__Method_GetSuppliersRegion, serviceImpl.GetSuppliersRegion).Build();
    }

  }
}
#endregion
