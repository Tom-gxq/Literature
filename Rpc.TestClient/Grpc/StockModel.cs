// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StockModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SP.Service {

  /// <summary>Holder for reflection information generated from StockModel.proto</summary>
  public static partial class StockModelReflection {

    #region Descriptor
    /// <summary>File descriptor for StockModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTdG9ja01vZGVsLnByb3RvEgpTUC5TZXJ2aWNlIjYKEVByb2R1Y3RTa3VS",
            "ZXF1ZXN0Eg4KBnNob3BJZBgBIAEoBRIRCglwcm9kdWN0SWQYAiABKAkiYAoK",
            "UHJvZHVjdFNrdRIRCglwcm9kdWN0SWQYAiABKAkSDQoFc2t1SWQYAyABKAkS",
            "DQoFc3RvY2sYBCABKAUSDgoGc2hvcElkGAUgASgFEhEKCWFjY291bnRJZBgG",
            "IAEoCSJJChJQcm9kdWN0U2t1UmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEiMK",
            "A3NrdRgCIAMoCzIWLlNQLlNlcnZpY2UuUHJvZHVjdFNrdSJQChhBY2NvdW50",
            "UHJvZHVjdFNrdVJlcXVlc3QSDgoGc2hvcElkGAEgASgFEhEKCXByb2R1Y3RJ",
            "ZBgCIAEoCRIRCglhY2NvdW50SWQYAyABKAkiIwoRU2t1U3RhdHVzUmVzcG9u",
            "c2USDgoGc3RhdHVzGAEgASgFImsKE09wZXJhdGlvblNrdVJlcXVlc3QSDgoG",
            "c2hvcElkGAEgASgFEhEKCXByb2R1Y3RJZBgCIAEoCRIRCglhY2NvdW50SWQY",
            "AyABKAkSDQoFc3RvY2sYBCABKAUSDwoHb3JkZXJJZBgFIAEoCSIyCg1JbnZT",
            "a3VSZXF1ZXN0Eg4KBnNob3BJZBgBIAEoBRIRCglwcm9kdWN0SWQYAiABKAki",
            "RwoOU2t1TGlzdFJlcXVlc3QSIwoDc2t1GAEgAygLMhYuU1AuU2VydmljZS5Q",
            "cm9kdWN0U2t1EhAKCHRpbWVTcGFuGAIgASgDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductSkuRequest), global::SP.Service.ProductSkuRequest.Parser, new[]{ "ShopId", "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductSku), global::SP.Service.ProductSku.Parser, new[]{ "ProductId", "SkuId", "Stock", "ShopId", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ProductSkuResponse), global::SP.Service.ProductSkuResponse.Parser, new[]{ "Status", "Sku" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AccountProductSkuRequest), global::SP.Service.AccountProductSkuRequest.Parser, new[]{ "ShopId", "ProductId", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SkuStatusResponse), global::SP.Service.SkuStatusResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OperationSkuRequest), global::SP.Service.OperationSkuRequest.Parser, new[]{ "ShopId", "ProductId", "AccountId", "Stock", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.InvSkuRequest), global::SP.Service.InvSkuRequest.Parser, new[]{ "ShopId", "ProductId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SkuListRequest), global::SP.Service.SkuListRequest.Parser, new[]{ "Sku", "TimeSpan" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// 产品库存的请求参数
  /// </summary>
  public sealed partial class ProductSkuRequest : pb::IMessage<ProductSkuRequest> {
    private static readonly pb::MessageParser<ProductSkuRequest> _parser = new pb::MessageParser<ProductSkuRequest>(() => new ProductSkuRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductSkuRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuRequest(ProductSkuRequest other) : this() {
      shopId_ = other.shopId_;
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuRequest Clone() {
      return new ProductSkuRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductSkuRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductSkuRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductSkuRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProductSku : pb::IMessage<ProductSku> {
    private static readonly pb::MessageParser<ProductSku> _parser = new pb::MessageParser<ProductSku>(() => new ProductSku());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductSku> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSku() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSku(ProductSku other) : this() {
      productId_ = other.productId_;
      skuId_ = other.skuId_;
      stock_ = other.stock_;
      shopId_ = other.shopId_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSku Clone() {
      return new ProductSku(this);
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skuId" field.</summary>
    public const int SkuIdFieldNumber = 3;
    private string skuId_ = "";
    /// <summary>
    ///*
    /// 库存ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkuId {
      get { return skuId_; }
      set {
        skuId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 4;
    private int stock_;
    /// <summary>
    ///*
    /// 库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 5;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 6;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductSku);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductSku other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (SkuId != other.SkuId) return false;
      if (Stock != other.Stock) return false;
      if (ShopId != other.ShopId) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (SkuId.Length != 0) hash ^= SkuId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (SkuId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SkuId);
      }
      if (Stock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stock);
      }
      if (ShopId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShopId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (SkuId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkuId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductSku other) {
      if (other == null) {
        return;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.SkuId.Length != 0) {
        SkuId = other.SkuId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 26: {
            SkuId = input.ReadString();
            break;
          }
          case 32: {
            Stock = input.ReadInt32();
            break;
          }
          case 40: {
            ShopId = input.ReadInt32();
            break;
          }
          case 50: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品库存的返回信息
  /// </summary>
  public sealed partial class ProductSkuResponse : pb::IMessage<ProductSkuResponse> {
    private static readonly pb::MessageParser<ProductSkuResponse> _parser = new pb::MessageParser<ProductSkuResponse>(() => new ProductSkuResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductSkuResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuResponse(ProductSkuResponse other) : this() {
      status_ = other.status_;
      sku_ = other.sku_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductSkuResponse Clone() {
      return new ProductSkuResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sku" field.</summary>
    public const int SkuFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.ProductSku> _repeated_sku_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.ProductSku.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductSku> sku_ = new pbc::RepeatedField<global::SP.Service.ProductSku>();
    /// <summary>
    ///*
    /// 产品库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductSku> Sku {
      get { return sku_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductSkuResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductSkuResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!sku_.Equals(other.sku_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= sku_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      sku_.WriteTo(output, _repeated_sku_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += sku_.CalculateSize(_repeated_sku_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductSkuResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      sku_.Add(other.sku_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            sku_.AddEntriesFrom(input, _repeated_sku_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品库存的请求参数
  /// </summary>
  public sealed partial class AccountProductSkuRequest : pb::IMessage<AccountProductSkuRequest> {
    private static readonly pb::MessageParser<AccountProductSkuRequest> _parser = new pb::MessageParser<AccountProductSkuRequest>(() => new AccountProductSkuRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountProductSkuRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProductSkuRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProductSkuRequest(AccountProductSkuRequest other) : this() {
      shopId_ = other.shopId_;
      productId_ = other.productId_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProductSkuRequest Clone() {
      return new AccountProductSkuRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountProductSkuRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountProductSkuRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ProductId != other.ProductId) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountProductSkuRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 库存的返回信息
  /// </summary>
  public sealed partial class SkuStatusResponse : pb::IMessage<SkuStatusResponse> {
    private static readonly pb::MessageParser<SkuStatusResponse> _parser = new pb::MessageParser<SkuStatusResponse>(() => new SkuStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkuStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuStatusResponse(SkuStatusResponse other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuStatusResponse Clone() {
      return new SkuStatusResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkuStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkuStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkuStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 产品库存的请求参数
  /// </summary>
  public sealed partial class OperationSkuRequest : pb::IMessage<OperationSkuRequest> {
    private static readonly pb::MessageParser<OperationSkuRequest> _parser = new pb::MessageParser<OperationSkuRequest>(() => new OperationSkuRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationSkuRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationSkuRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationSkuRequest(OperationSkuRequest other) : this() {
      shopId_ = other.shopId_;
      productId_ = other.productId_;
      accountId_ = other.accountId_;
      stock_ = other.stock_;
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationSkuRequest Clone() {
      return new OperationSkuRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 4;
    private int stock_;
    /// <summary>
    ///*
    /// 操作涉及到的库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 5;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 操作涉及到的订单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationSkuRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationSkuRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ProductId != other.ProductId) return false;
      if (AccountId != other.AccountId) return false;
      if (Stock != other.Stock) return false;
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountId);
      }
      if (Stock != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stock);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationSkuRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
          case 26: {
            AccountId = input.ReadString();
            break;
          }
          case 32: {
            Stock = input.ReadInt32();
            break;
          }
          case 42: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 无效库存的请求参数
  /// </summary>
  public sealed partial class InvSkuRequest : pb::IMessage<InvSkuRequest> {
    private static readonly pb::MessageParser<InvSkuRequest> _parser = new pb::MessageParser<InvSkuRequest>(() => new InvSkuRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvSkuRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvSkuRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvSkuRequest(InvSkuRequest other) : this() {
      shopId_ = other.shopId_;
      productId_ = other.productId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvSkuRequest Clone() {
      return new InvSkuRequest(this);
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///*
    /// 店铺ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private string productId_ = "";
    /// <summary>
    ///*
    /// 产品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvSkuRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvSkuRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ProductId != other.ProductId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvSkuRequest other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 18: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 库存列表的请求参数
  /// </summary>
  public sealed partial class SkuListRequest : pb::IMessage<SkuListRequest> {
    private static readonly pb::MessageParser<SkuListRequest> _parser = new pb::MessageParser<SkuListRequest>(() => new SkuListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkuListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.StockModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuListRequest(SkuListRequest other) : this() {
      sku_ = other.sku_.Clone();
      timeSpan_ = other.timeSpan_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkuListRequest Clone() {
      return new SkuListRequest(this);
    }

    /// <summary>Field number for the "sku" field.</summary>
    public const int SkuFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SP.Service.ProductSku> _repeated_sku_codec
        = pb::FieldCodec.ForMessage(10, global::SP.Service.ProductSku.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ProductSku> sku_ = new pbc::RepeatedField<global::SP.Service.ProductSku>();
    /// <summary>
    ///*
    /// 库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ProductSku> Sku {
      get { return sku_; }
    }

    /// <summary>Field number for the "timeSpan" field.</summary>
    public const int TimeSpanFieldNumber = 2;
    private long timeSpan_;
    /// <summary>
    ///*
    /// 库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeSpan {
      get { return timeSpan_; }
      set {
        timeSpan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkuListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkuListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sku_.Equals(other.sku_)) return false;
      if (TimeSpan != other.TimeSpan) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sku_.GetHashCode();
      if (TimeSpan != 0L) hash ^= TimeSpan.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sku_.WriteTo(output, _repeated_sku_codec);
      if (TimeSpan != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeSpan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sku_.CalculateSize(_repeated_sku_codec);
      if (TimeSpan != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeSpan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkuListRequest other) {
      if (other == null) {
        return;
      }
      sku_.Add(other.sku_);
      if (other.TimeSpan != 0L) {
        TimeSpan = other.TimeSpan;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sku_.AddEntriesFrom(input, _repeated_sku_codec);
            break;
          }
          case 16: {
            TimeSpan = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
