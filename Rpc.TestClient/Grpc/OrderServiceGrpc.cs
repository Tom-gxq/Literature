// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SP.Service {
  public static partial class OrderService
  {
    static readonly string __ServiceName = "SP.Service.OrderService";

    static readonly grpc::Marshaller<global::SP.Service.AddOrderRequest> __Marshaller_AddOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddOrderResponse> __Marshaller_AddOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.MyOrderRequest> __Marshaller_MyOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.MyOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OrderListResponse> __Marshaller_OrderListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OrderListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SearchMyOrderRequest> __Marshaller_SearchMyOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SearchMyOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.GetOrderRequest> __Marshaller_GetOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.GetOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OrderIdRequest> __Marshaller_OrderIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OrderIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OrderResponse> __Marshaller_OrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.UpdateOrderRequest> __Marshaller_UpdateOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.UpdateOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OrderStatusResponse> __Marshaller_OrderStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OrderStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SchoolLeadRequest> __Marshaller_SchoolLeadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SchoolLeadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SchoolLeadOrderListResponse> __Marshaller_SchoolLeadOrderListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SchoolLeadOrderListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TradeRequest> __Marshaller_TradeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TradeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.TradeListResponse> __Marshaller_TradeListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.TradeListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AccountIdRequest> __Marshaller_AccountIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AccountIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.SchoolLeadFinanceResponse> __Marshaller_SchoolLeadFinanceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.SchoolLeadFinanceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.AddCashApplyRequest> __Marshaller_AddCashApplyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.AddCashApplyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.UpdateOrderCodeRequest> __Marshaller_UpdateOrderCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.UpdateOrderCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SP.Service.OrderCodeRequest> __Marshaller_OrderCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SP.Service.OrderCodeRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::SP.Service.AddOrderRequest, global::SP.Service.AddOrderResponse> __Method_AddMyOrder = new grpc::Method<global::SP.Service.AddOrderRequest, global::SP.Service.AddOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddMyOrder",
        __Marshaller_AddOrderRequest,
        __Marshaller_AddOrderResponse);

    static readonly grpc::Method<global::SP.Service.MyOrderRequest, global::SP.Service.OrderListResponse> __Method_GetMyOrderList = new grpc::Method<global::SP.Service.MyOrderRequest, global::SP.Service.OrderListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMyOrderList",
        __Marshaller_MyOrderRequest,
        __Marshaller_OrderListResponse);

    static readonly grpc::Method<global::SP.Service.SearchMyOrderRequest, global::SP.Service.OrderListResponse> __Method_SearchOrderKeywordList = new grpc::Method<global::SP.Service.SearchMyOrderRequest, global::SP.Service.OrderListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchOrderKeywordList",
        __Marshaller_SearchMyOrderRequest,
        __Marshaller_OrderListResponse);

    static readonly grpc::Method<global::SP.Service.GetOrderRequest, global::SP.Service.OrderListResponse> __Method_GetMyOrderListByStatus = new grpc::Method<global::SP.Service.GetOrderRequest, global::SP.Service.OrderListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMyOrderListByStatus",
        __Marshaller_GetOrderRequest,
        __Marshaller_OrderListResponse);

    static readonly grpc::Method<global::SP.Service.OrderIdRequest, global::SP.Service.OrderResponse> __Method_GetOrderByOrderId = new grpc::Method<global::SP.Service.OrderIdRequest, global::SP.Service.OrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrderByOrderId",
        __Marshaller_OrderIdRequest,
        __Marshaller_OrderResponse);

    static readonly grpc::Method<global::SP.Service.UpdateOrderRequest, global::SP.Service.OrderStatusResponse> __Method_UpdateOrderStatus = new grpc::Method<global::SP.Service.UpdateOrderRequest, global::SP.Service.OrderStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrderStatus",
        __Marshaller_UpdateOrderRequest,
        __Marshaller_OrderStatusResponse);

    static readonly grpc::Method<global::SP.Service.SchoolLeadRequest, global::SP.Service.SchoolLeadOrderListResponse> __Method_GetSchoolLeadList = new grpc::Method<global::SP.Service.SchoolLeadRequest, global::SP.Service.SchoolLeadOrderListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSchoolLeadList",
        __Marshaller_SchoolLeadRequest,
        __Marshaller_SchoolLeadOrderListResponse);

    static readonly grpc::Method<global::SP.Service.TradeRequest, global::SP.Service.TradeListResponse> __Method_GetSchoolLeadTradeList = new grpc::Method<global::SP.Service.TradeRequest, global::SP.Service.TradeListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSchoolLeadTradeList",
        __Marshaller_TradeRequest,
        __Marshaller_TradeListResponse);

    static readonly grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.SchoolLeadFinanceResponse> __Method_GetSchoolLeadFinance = new grpc::Method<global::SP.Service.AccountIdRequest, global::SP.Service.SchoolLeadFinanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSchoolLeadFinance",
        __Marshaller_AccountIdRequest,
        __Marshaller_SchoolLeadFinanceResponse);

    static readonly grpc::Method<global::SP.Service.AddCashApplyRequest, global::SP.Service.OrderStatusResponse> __Method_AddCashApply = new grpc::Method<global::SP.Service.AddCashApplyRequest, global::SP.Service.OrderStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCashApply",
        __Marshaller_AddCashApplyRequest,
        __Marshaller_OrderStatusResponse);

    static readonly grpc::Method<global::SP.Service.UpdateOrderCodeRequest, global::SP.Service.OrderStatusResponse> __Method_UpdateOrderStatusByOrderCode = new grpc::Method<global::SP.Service.UpdateOrderCodeRequest, global::SP.Service.OrderStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrderStatusByOrderCode",
        __Marshaller_UpdateOrderCodeRequest,
        __Marshaller_OrderStatusResponse);

    static readonly grpc::Method<global::SP.Service.OrderCodeRequest, global::SP.Service.OrderResponse> __Method_GetOrderByOrderCode = new grpc::Method<global::SP.Service.OrderCodeRequest, global::SP.Service.OrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrderByOrderCode",
        __Marshaller_OrderCodeRequest,
        __Marshaller_OrderResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SP.Service.OrderServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OrderService</summary>
    public abstract partial class OrderServiceBase
    {
      /// <summary>
      ///*
      /// 添加我的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.AddOrderResponse> AddMyOrder(global::SP.Service.AddOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderListResponse> GetMyOrderList(global::SP.Service.MyOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 搜索我的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderListResponse> SearchOrderKeywordList(global::SP.Service.SearchMyOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderListResponse> GetMyOrderListByStatus(global::SP.Service.GetOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderResponse> GetOrderByOrderId(global::SP.Service.OrderIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderStatusResponse> UpdateOrderStatus(global::SP.Service.UpdateOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SchoolLeadOrderListResponse> GetSchoolLeadList(global::SP.Service.SchoolLeadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.TradeListResponse> GetSchoolLeadTradeList(global::SP.Service.TradeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.SchoolLeadFinanceResponse> GetSchoolLeadFinance(global::SP.Service.AccountIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderStatusResponse> AddCashApply(global::SP.Service.AddCashApplyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderStatusResponse> UpdateOrderStatusByOrderCode(global::SP.Service.UpdateOrderCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SP.Service.OrderResponse> GetOrderByOrderCode(global::SP.Service.OrderCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OrderService</summary>
    public partial class OrderServiceClient : grpc::ClientBase<OrderServiceClient>
    {
      /// <summary>Creates a new client for OrderService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OrderServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrderService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OrderServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OrderServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OrderServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 添加我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddOrderResponse AddMyOrder(global::SP.Service.AddOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddMyOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.AddOrderResponse AddMyOrder(global::SP.Service.AddOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddMyOrder, null, options, request);
      }
      /// <summary>
      ///*
      /// 添加我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddOrderResponse> AddMyOrderAsync(global::SP.Service.AddOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddMyOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 添加我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.AddOrderResponse> AddMyOrderAsync(global::SP.Service.AddOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddMyOrder, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse GetMyOrderList(global::SP.Service.MyOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyOrderList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse GetMyOrderList(global::SP.Service.MyOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMyOrderList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> GetMyOrderListAsync(global::SP.Service.MyOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyOrderListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> GetMyOrderListAsync(global::SP.Service.MyOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMyOrderList, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse SearchOrderKeywordList(global::SP.Service.SearchMyOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchOrderKeywordList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse SearchOrderKeywordList(global::SP.Service.SearchMyOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchOrderKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 搜索我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> SearchOrderKeywordListAsync(global::SP.Service.SearchMyOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchOrderKeywordListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 搜索我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> SearchOrderKeywordListAsync(global::SP.Service.SearchMyOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchOrderKeywordList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse GetMyOrderListByStatus(global::SP.Service.GetOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyOrderListByStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderListResponse GetMyOrderListByStatus(global::SP.Service.GetOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMyOrderListByStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> GetMyOrderListByStatusAsync(global::SP.Service.GetOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetMyOrderListByStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取我的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderListResponse> GetMyOrderListByStatusAsync(global::SP.Service.GetOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMyOrderListByStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderResponse GetOrderByOrderId(global::SP.Service.OrderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOrderByOrderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderResponse GetOrderByOrderId(global::SP.Service.OrderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrderByOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderResponse> GetOrderByOrderIdAsync(global::SP.Service.OrderIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOrderByOrderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderResponse> GetOrderByOrderIdAsync(global::SP.Service.OrderIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrderByOrderId, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse UpdateOrderStatus(global::SP.Service.UpdateOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOrderStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse UpdateOrderStatus(global::SP.Service.UpdateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrderStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> UpdateOrderStatusAsync(global::SP.Service.UpdateOrderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOrderStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> UpdateOrderStatusAsync(global::SP.Service.UpdateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrderStatus, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SchoolLeadOrderListResponse GetSchoolLeadList(global::SP.Service.SchoolLeadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SchoolLeadOrderListResponse GetSchoolLeadList(global::SP.Service.SchoolLeadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSchoolLeadList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SchoolLeadOrderListResponse> GetSchoolLeadListAsync(global::SP.Service.SchoolLeadRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SchoolLeadOrderListResponse> GetSchoolLeadListAsync(global::SP.Service.SchoolLeadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSchoolLeadList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TradeListResponse GetSchoolLeadTradeList(global::SP.Service.TradeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadTradeList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.TradeListResponse GetSchoolLeadTradeList(global::SP.Service.TradeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSchoolLeadTradeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TradeListResponse> GetSchoolLeadTradeListAsync(global::SP.Service.TradeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadTradeListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.TradeListResponse> GetSchoolLeadTradeListAsync(global::SP.Service.TradeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSchoolLeadTradeList, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SchoolLeadFinanceResponse GetSchoolLeadFinance(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadFinance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.SchoolLeadFinanceResponse GetSchoolLeadFinance(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSchoolLeadFinance, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SchoolLeadFinanceResponse> GetSchoolLeadFinanceAsync(global::SP.Service.AccountIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSchoolLeadFinanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取校区负责人的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.SchoolLeadFinanceResponse> GetSchoolLeadFinanceAsync(global::SP.Service.AccountIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSchoolLeadFinance, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse AddCashApply(global::SP.Service.AddCashApplyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddCashApply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse AddCashApply(global::SP.Service.AddCashApplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCashApply, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> AddCashApplyAsync(global::SP.Service.AddCashApplyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddCashApplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> AddCashApplyAsync(global::SP.Service.AddCashApplyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCashApply, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse UpdateOrderStatusByOrderCode(global::SP.Service.UpdateOrderCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOrderStatusByOrderCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderStatusResponse UpdateOrderStatusByOrderCode(global::SP.Service.UpdateOrderCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrderStatusByOrderCode, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> UpdateOrderStatusByOrderCodeAsync(global::SP.Service.UpdateOrderCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateOrderStatusByOrderCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新我的订单的状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderStatusResponse> UpdateOrderStatusByOrderCodeAsync(global::SP.Service.UpdateOrderCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrderStatusByOrderCode, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderResponse GetOrderByOrderCode(global::SP.Service.OrderCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOrderByOrderCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SP.Service.OrderResponse GetOrderByOrderCode(global::SP.Service.OrderCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrderByOrderCode, null, options, request);
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderResponse> GetOrderByOrderCodeAsync(global::SP.Service.OrderCodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOrderByOrderCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 获取的订单
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SP.Service.OrderResponse> GetOrderByOrderCodeAsync(global::SP.Service.OrderCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrderByOrderCode, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OrderServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrderServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OrderServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddMyOrder, serviceImpl.AddMyOrder)
          .AddMethod(__Method_GetMyOrderList, serviceImpl.GetMyOrderList)
          .AddMethod(__Method_SearchOrderKeywordList, serviceImpl.SearchOrderKeywordList)
          .AddMethod(__Method_GetMyOrderListByStatus, serviceImpl.GetMyOrderListByStatus)
          .AddMethod(__Method_GetOrderByOrderId, serviceImpl.GetOrderByOrderId)
          .AddMethod(__Method_UpdateOrderStatus, serviceImpl.UpdateOrderStatus)
          .AddMethod(__Method_GetSchoolLeadList, serviceImpl.GetSchoolLeadList)
          .AddMethod(__Method_GetSchoolLeadTradeList, serviceImpl.GetSchoolLeadTradeList)
          .AddMethod(__Method_GetSchoolLeadFinance, serviceImpl.GetSchoolLeadFinance)
          .AddMethod(__Method_AddCashApply, serviceImpl.AddCashApply)
          .AddMethod(__Method_UpdateOrderStatusByOrderCode, serviceImpl.UpdateOrderStatusByOrderCode)
          .AddMethod(__Method_GetOrderByOrderCode, serviceImpl.GetOrderByOrderCode).Build();
    }

  }
}
#endregion
