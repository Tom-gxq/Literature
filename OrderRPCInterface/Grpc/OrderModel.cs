// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SP.Service {

  /// <summary>Holder for reflection information generated from OrderModel.proto</summary>
  public static partial class OrderModelReflection {

    #region Descriptor
    /// <summary>File descriptor for OrderModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBPcmRlck1vZGVsLnByb3RvEgpTUC5TZXJ2aWNlGhFDb21tb25Nb2RlbC5w",
            "cm90bxoSUHJvZHVjdE1vZGVsLnByb3RvImsKD0FkZE9yZGVyUmVxdWVzdBIR",
            "CglhY2NvdW50SWQYASABKAkSDwoHY2FydElkcxgCIAMoCRIOCgZyZW1hcmsY",
            "AyABKAkSEQoJYWRkcmVzc0lkGAQgASgFEhEKCW9yZGVyVHlwZRgFIAEoBSIl",
            "ChNPcmRlclN0YXR1c1Jlc3BvbnNlEg4KBnN0YXR1cxgBIAEoBSLbAQoHQ291",
            "cG9ucxIQCghjb3Vwb25JZBgBIAEoCRIOCgZraW5kSWQYAiABKAkSFAoMYXNz",
            "b2NpYXRvcklkGAMgASgJEhEKCWFjY291bnRJZBgEIAEoCRIRCglzdGFydERh",
            "dGUYBSABKAMSDwoHZW5kRGF0ZRgGIAEoAxIOCgZzdGF0dXMYByABKAUSEwoL",
            "ZGVzY3JpcHRpb24YCCABKAkSDgoGYW1vdW50GAkgASgBEhMKC21vZGVsQW1v",
            "dW50GAogASgBEhcKD21vZGVEZXNjcmlwdGlvbhgLIAEoCSLLAgoFT3JkZXIS",
            "DwoHb3JkZXJJZBgBIAEoCRIOCgZyZW1hcmsYAiABKAkSEwoLb3JkZXJTdGF0",
            "dXMYAyABKAUSEwoLY2xvc2VSZWFzb24YBCABKAkSEQoJb3JkZXJEYXRlGAUg",
            "ASgDEg8KB3BheURhdGUYBiABKAMSFAoMc2hpcHBpbmdEYXRlGAcgASgDEhIK",
            "CmZpbmlzaERhdGUYCCABKAMSEQoJYWNjb3VudElkGAkgASgJEhIKCnNoaXBU",
            "b0RhdGUYCiABKAMSDwoHZnJlaWdodBgLIAEoAxIOCgZhbW91bnQYDCABKAES",
            "KAoLcHJvZHVjdExpc3QYDSADKAsyEy5TUC5TZXJ2aWNlLlByb2R1Y3QSEQoJ",
            "b3JkZXJDb2RlGA4gASgJEiQKB2NvdXBvbnMYDyABKAsyEy5TUC5TZXJ2aWNl",
            "LkNvdXBvbnMiSQoRT3JkZXJMaXN0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgF",
            "EiQKCW9yZGVyTGlzdBgCIAMoCzIRLlNQLlNlcnZpY2UuT3JkZXIibgoUU2Vh",
            "cmNoTXlPcmRlclJlcXVlc3QSEQoJYWNjb3VudElkGAEgASgJEg8KB2tleVdv",
            "cmQYAiABKAkSEQoJcGFnZUluZGV4GAMgASgFEhAKCHBhZ2VTaXplGAQgASgF",
            "Eg0KBXRvdGFsGAUgASgDIm0KD0dldE9yZGVyUmVxdWVzdBIRCglhY2NvdW50",
            "SWQYASABKAkSEwoLb3JkZXJTdGF0dXMYAiABKAUSEQoJcGFnZUluZGV4GAMg",
            "ASgFEhAKCHBhZ2VTaXplGAQgASgFEg0KBXRvdGFsGAUgASgDIjYKDk15T3Jk",
            "ZXJSZXF1ZXN0EhEKCWFjY291bnRJZBgBIAEoCRIRCglvcmRlckRhdGUYAiAB",
            "KAkiIQoOT3JkZXJJZFJlcXVlc3QSDwoHb3JkZXJJZBgBIAEoCSJFCg1PcmRl",
            "clJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoBRIkCglvcmRlckluZm8YAiABKAsy",
            "ES5TUC5TZXJ2aWNlLk9yZGVyIjMKEEFkZE9yZGVyUmVzcG9uc2USDgoGc3Rh",
            "dHVzGAEgASgFEg8KB29yZGVySWQYAiABKAkiSgoSVXBkYXRlT3JkZXJSZXF1",
            "ZXN0EhMKC29yZGVyU3RhdHVzGAEgASgFEg8KB29yZGVySWQYAiABKAkSDgoG",
            "cGF5V2F5GAMgASgFIk4KEVNjaG9vbExlYWRSZXF1ZXN0EhEKCWFjY291bnRJ",
            "ZBgBIAEoCRITCgtvcmRlclN0YXR1cxgCIAEoBRIRCglvcmRlclR5cGUYAyAB",
            "KAUisQIKD1NjaG9vbExlYWRPcmRlchIPCgdvcmRlcklkGAEgASgJEg4KBmFt",
            "b3VudBgCIAEoARIRCglvcmRlckNvZGUYAyABKAkSEQoJb3JkZXJEYXRlGAQg",
            "ASgDEg8KB3BheURhdGUYBSABKAMSKAoHYWNjb3VudBgGIAEoCzIXLlNQLlNl",
            "cnZpY2UuQWNjb3VudEluZm8SJAoHYWRkcmVzcxgHIAEoCzITLlNQLlNlcnZp",
            "Y2UuQWRkcmVzcxIeCgRzaG9wGAggASgLMhAuU1AuU2VydmljZS5TaG9wEjIK",
            "EHNob3BwaW5nQ2FydExpc3QYCSADKAsyGC5TUC5TZXJ2aWNlLlNob3BwaW5n",
            "Q2FydBITCgtvcmRlclN0YXR1cxgKIAEoBRINCgVpc1ZpcBgLIAEoCCJdChtT",
            "Y2hvb2xMZWFkT3JkZXJMaXN0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgFEi4K",
            "CW9yZGVySW5mbxgCIAMoCzIbLlNQLlNlcnZpY2UuU2Nob29sTGVhZE9yZGVy",
            "IkYKDFRyYWRlUmVxdWVzdBIRCglhY2NvdW50SWQYASABKAkSEQoJcGFnZUlu",
            "ZGV4GAMgASgFEhAKCHBhZ2VTaXplGAQgASgFInEKBVRyYWRlEhEKCWFjY291",
            "bnRJZBgBIAEoCRIOCgZhbW91bnQYAiABKAESDgoGY2FydElkGAMgASgJEhIK",
            "CmNyZWF0ZVRpbWUYBCABKAMSEAoIcXVhbnRpdHkYBSABKAUSDwoHc3ViamVj",
            "dBgGIAEoBSJYChFUcmFkZUxpc3RSZXNwb25zZRIOCgZzdGF0dXMYASABKAUS",
            "JAoJdHJhZGVMaXN0GAIgAygLMhEuU1AuU2VydmljZS5UcmFkZRINCgV0b3Rh",
            "bBgFIAEoAyKnAQoZU2Nob29sTGVhZEZpbmFuY2VSZXNwb25zZRIOCgZzdGF0",
            "dXMYASABKAUSEQoJYWNjb3VudElkGAIgASgJEhIKCmhhdmVBbW91bnQYAyAB",
            "KAESEQoJdXNlQW1vdW50GAQgASgBEhQKDGFjdGl2ZUFtb3VudBgFIAEoARIT",
            "CgthcHBseUFtb3VudBgGIAEoARIVCg1jb25zdW1lQW1vdW50GAcgASgBIkcK",
            "E0FkZENhc2hBcHBseVJlcXVlc3QSEQoJYWNjb3VudElkGAEgASgJEg4KBmFs",
            "aXBheRgCIAEoCRINCgVtb25leRgDIAEoASJQChZVcGRhdGVPcmRlckNvZGVS",
            "ZXF1ZXN0EhMKC29yZGVyU3RhdHVzGAEgASgFEhEKCW9yZGVyQ29kZRgCIAEo",
            "CRIOCgZwYXlXYXkYAyABKAUiJQoQT3JkZXJDb2RlUmVxdWVzdBIRCglvcmRl",
            "ckNvZGUYASABKAkiRgoaVXBkYXRlU2hpcHBpbmdPcmRlclJlcXVlc3QSEwoL",
            "b3JkZXJTdGF0dXMYASABKAUSEwoLc2hpcE9yZGVySWQYAiADKAUiYQoWVXBk",
            "YXRlU2hpcE9yZGVyUmVxdWVzdBITCgtvcmRlclN0YXR1cxgBIAEoBRIPCgdv",
            "cmRlcklkGAIgASgJEg4KBnBheVdheRgDIAEoBRIRCglhY2NvdW50SWQYBCAB",
            "KAkicgoQU2hpcE9yZGVyUmVxdWVzdBIRCglhY2NvdW50SWQYASABKAkSEwoL",
            "b3JkZXJTdGF0dXMYAiABKAUSEQoJb3JkZXJUeXBlGAMgASgFEhEKCXBhZ2VJ",
            "bmRleBgEIAEoBRIQCghwYWdlU2l6ZRgFIAEoBSJSChhQdXJjaGFzZU9yZGVy",
            "TGlzdFJlcXVlc3QSEQoJYWNjb3VudElkGAEgASgJEhEKCXBhZ2VJbmRleBgE",
            "IAEoBRIQCghwYWdlU2l6ZRgFIAEoBSJWCg1QdXJjaGFzZU9yZGVyEg8KB29y",
            "ZGVySWQYASABKAkSDgoGYW1vdW50GAIgASgBEhEKCW9yZGVyRGF0ZRgEIAEo",
            "AxIRCglvcmRlclR5cGUYCyABKAUiaAoZUHVyY2hhc2VPcmRlckxpc3RSZXNw",
            "b25zZRIOCgZzdGF0dXMYASABKAUSLAoJb3JkZXJJbmZvGAIgAygLMhkuU1Au",
            "U2VydmljZS5QdXJjaGFzZU9yZGVyEg0KBXRvdGFsGAQgASgDIpkCChVQdXJj",
            "aGFzZU9yZGVyUmVzcG9uc2USDwoHb3JkZXJJZBgBIAEoCRIOCgZhbW91bnQY",
            "AiABKAESEQoJb3JkZXJDb2RlGAMgASgJEhEKCW9yZGVyRGF0ZRgEIAEoAxIP",
            "CgdwYXlEYXRlGAUgASgDEigKB2FjY291bnQYBiABKAsyFy5TUC5TZXJ2aWNl",
            "LkFjY291bnRJbmZvEiQKB2FkZHJlc3MYByABKAsyEy5TUC5TZXJ2aWNlLkFk",
            "ZHJlc3MSDwoHcGF5VHlwZRgIIAEoBRIyChBzaG9wcGluZ0NhcnRMaXN0GAkg",
            "AygLMhguU1AuU2VydmljZS5TaG9wcGluZ0NhcnQSEwoLb3JkZXJTdGF0dXMY",
            "CiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SP.Service.CommonModelReflection.Descriptor, global::SP.Service.ProductModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddOrderRequest), global::SP.Service.AddOrderRequest.Parser, new[]{ "AccountId", "CartIds", "Remark", "AddressId", "OrderType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OrderStatusResponse), global::SP.Service.OrderStatusResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Coupons), global::SP.Service.Coupons.Parser, new[]{ "CouponId", "KindId", "AssociatorId", "AccountId", "StartDate", "EndDate", "Status", "Description", "Amount", "ModelAmount", "ModeDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Order), global::SP.Service.Order.Parser, new[]{ "OrderId", "Remark", "OrderStatus", "CloseReason", "OrderDate", "PayDate", "ShippingDate", "FinishDate", "AccountId", "ShipToDate", "Freight", "Amount", "ProductList", "OrderCode", "Coupons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OrderListResponse), global::SP.Service.OrderListResponse.Parser, new[]{ "Status", "OrderList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SearchMyOrderRequest), global::SP.Service.SearchMyOrderRequest.Parser, new[]{ "AccountId", "KeyWord", "PageIndex", "PageSize", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.GetOrderRequest), global::SP.Service.GetOrderRequest.Parser, new[]{ "AccountId", "OrderStatus", "PageIndex", "PageSize", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.MyOrderRequest), global::SP.Service.MyOrderRequest.Parser, new[]{ "AccountId", "OrderDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OrderIdRequest), global::SP.Service.OrderIdRequest.Parser, new[]{ "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OrderResponse), global::SP.Service.OrderResponse.Parser, new[]{ "Status", "OrderInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddOrderResponse), global::SP.Service.AddOrderResponse.Parser, new[]{ "Status", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateOrderRequest), global::SP.Service.UpdateOrderRequest.Parser, new[]{ "OrderStatus", "OrderId", "PayWay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SchoolLeadRequest), global::SP.Service.SchoolLeadRequest.Parser, new[]{ "AccountId", "OrderStatus", "OrderType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SchoolLeadOrder), global::SP.Service.SchoolLeadOrder.Parser, new[]{ "OrderId", "Amount", "OrderCode", "OrderDate", "PayDate", "Account", "Address", "Shop", "ShoppingCartList", "OrderStatus", "IsVip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SchoolLeadOrderListResponse), global::SP.Service.SchoolLeadOrderListResponse.Parser, new[]{ "Status", "OrderInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TradeRequest), global::SP.Service.TradeRequest.Parser, new[]{ "AccountId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.Trade), global::SP.Service.Trade.Parser, new[]{ "AccountId", "Amount", "CartId", "CreateTime", "Quantity", "Subject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.TradeListResponse), global::SP.Service.TradeListResponse.Parser, new[]{ "Status", "TradeList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.SchoolLeadFinanceResponse), global::SP.Service.SchoolLeadFinanceResponse.Parser, new[]{ "Status", "AccountId", "HaveAmount", "UseAmount", "ActiveAmount", "ApplyAmount", "ConsumeAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.AddCashApplyRequest), global::SP.Service.AddCashApplyRequest.Parser, new[]{ "AccountId", "Alipay", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateOrderCodeRequest), global::SP.Service.UpdateOrderCodeRequest.Parser, new[]{ "OrderStatus", "OrderCode", "PayWay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.OrderCodeRequest), global::SP.Service.OrderCodeRequest.Parser, new[]{ "OrderCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateShippingOrderRequest), global::SP.Service.UpdateShippingOrderRequest.Parser, new[]{ "OrderStatus", "ShipOrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.UpdateShipOrderRequest), global::SP.Service.UpdateShipOrderRequest.Parser, new[]{ "OrderStatus", "OrderId", "PayWay", "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.ShipOrderRequest), global::SP.Service.ShipOrderRequest.Parser, new[]{ "AccountId", "OrderStatus", "OrderType", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.PurchaseOrderListRequest), global::SP.Service.PurchaseOrderListRequest.Parser, new[]{ "AccountId", "PageIndex", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.PurchaseOrder), global::SP.Service.PurchaseOrder.Parser, new[]{ "OrderId", "Amount", "OrderDate", "OrderType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.PurchaseOrderListResponse), global::SP.Service.PurchaseOrderListResponse.Parser, new[]{ "Status", "OrderInfo", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SP.Service.PurchaseOrderResponse), global::SP.Service.PurchaseOrderResponse.Parser, new[]{ "OrderId", "Amount", "OrderCode", "OrderDate", "PayDate", "Account", "Address", "PayType", "ShoppingCartList", "OrderStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// 添加我的订单的请求参数
  /// </summary>
  public sealed partial class AddOrderRequest : pb::IMessage<AddOrderRequest> {
    private static readonly pb::MessageParser<AddOrderRequest> _parser = new pb::MessageParser<AddOrderRequest>(() => new AddOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderRequest(AddOrderRequest other) : this() {
      accountId_ = other.accountId_;
      cartIds_ = other.cartIds_.Clone();
      remark_ = other.remark_;
      addressId_ = other.addressId_;
      orderType_ = other.orderType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderRequest Clone() {
      return new AddOrderRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 订单创建者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cartIds" field.</summary>
    public const int CartIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cartIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cartIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    /// 购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CartIds {
      get { return cartIds_; }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    /// <summary>
    ///*
    /// 买家留言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addressId" field.</summary>
    public const int AddressIdFieldNumber = 4;
    private int addressId_;
    /// <summary>
    ///*
    /// 买家地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressId {
      get { return addressId_; }
      set {
        addressId_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 5;
    private int orderType_;
    /// <summary>
    ///*
    /// 订单类别(0,售卖订单 1，采购订单)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!cartIds_.Equals(other.cartIds_)) return false;
      if (Remark != other.Remark) return false;
      if (AddressId != other.AddressId) return false;
      if (OrderType != other.OrderType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      hash ^= cartIds_.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (AddressId != 0) hash ^= AddressId.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      cartIds_.WriteTo(output, _repeated_cartIds_codec);
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
      if (AddressId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddressId);
      }
      if (OrderType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OrderType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      size += cartIds_.CalculateSize(_repeated_cartIds_codec);
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (AddressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressId);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      cartIds_.Add(other.cartIds_);
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.AddressId != 0) {
        AddressId = other.AddressId;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            cartIds_.AddEntriesFrom(input, _repeated_cartIds_codec);
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
          case 32: {
            AddressId = input.ReadInt32();
            break;
          }
          case 40: {
            OrderType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class OrderStatusResponse : pb::IMessage<OrderStatusResponse> {
    private static readonly pb::MessageParser<OrderStatusResponse> _parser = new pb::MessageParser<OrderStatusResponse>(() => new OrderStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusResponse(OrderStatusResponse other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusResponse Clone() {
      return new OrderStatusResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 优惠券信息
  /// </summary>
  public sealed partial class Coupons : pb::IMessage<Coupons> {
    private static readonly pb::MessageParser<Coupons> _parser = new pb::MessageParser<Coupons>(() => new Coupons());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coupons> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coupons() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coupons(Coupons other) : this() {
      couponId_ = other.couponId_;
      kindId_ = other.kindId_;
      associatorId_ = other.associatorId_;
      accountId_ = other.accountId_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      status_ = other.status_;
      description_ = other.description_;
      amount_ = other.amount_;
      modelAmount_ = other.modelAmount_;
      modeDescription_ = other.modeDescription_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coupons Clone() {
      return new Coupons(this);
    }

    /// <summary>Field number for the "couponId" field.</summary>
    public const int CouponIdFieldNumber = 1;
    private string couponId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CouponId {
      get { return couponId_; }
      set {
        couponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kindId" field.</summary>
    public const int KindIdFieldNumber = 2;
    private string kindId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KindId {
      get { return kindId_; }
      set {
        kindId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "associatorId" field.</summary>
    public const int AssociatorIdFieldNumber = 3;
    private string associatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssociatorId {
      get { return associatorId_; }
      set {
        associatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 5;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "endDate" field.</summary>
    public const int EndDateFieldNumber = 6;
    private long endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 9;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "modelAmount" field.</summary>
    public const int ModelAmountFieldNumber = 10;
    private double modelAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ModelAmount {
      get { return modelAmount_; }
      set {
        modelAmount_ = value;
      }
    }

    /// <summary>Field number for the "modeDescription" field.</summary>
    public const int ModeDescriptionFieldNumber = 11;
    private string modeDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeDescription {
      get { return modeDescription_; }
      set {
        modeDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coupons);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coupons other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CouponId != other.CouponId) return false;
      if (KindId != other.KindId) return false;
      if (AssociatorId != other.AssociatorId) return false;
      if (AccountId != other.AccountId) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Status != other.Status) return false;
      if (Description != other.Description) return false;
      if (Amount != other.Amount) return false;
      if (ModelAmount != other.ModelAmount) return false;
      if (ModeDescription != other.ModeDescription) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CouponId.Length != 0) hash ^= CouponId.GetHashCode();
      if (KindId.Length != 0) hash ^= KindId.GetHashCode();
      if (AssociatorId.Length != 0) hash ^= AssociatorId.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (ModelAmount != 0D) hash ^= ModelAmount.GetHashCode();
      if (ModeDescription.Length != 0) hash ^= ModeDescription.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CouponId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CouponId);
      }
      if (KindId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(KindId);
      }
      if (AssociatorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssociatorId);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountId);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndDate);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Amount != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Amount);
      }
      if (ModelAmount != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ModelAmount);
      }
      if (ModeDescription.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ModeDescription);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CouponId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CouponId);
      }
      if (KindId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KindId);
      }
      if (AssociatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssociatorId);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (ModelAmount != 0D) {
        size += 1 + 8;
      }
      if (ModeDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeDescription);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coupons other) {
      if (other == null) {
        return;
      }
      if (other.CouponId.Length != 0) {
        CouponId = other.CouponId;
      }
      if (other.KindId.Length != 0) {
        KindId = other.KindId;
      }
      if (other.AssociatorId.Length != 0) {
        AssociatorId = other.AssociatorId;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.ModelAmount != 0D) {
        ModelAmount = other.ModelAmount;
      }
      if (other.ModeDescription.Length != 0) {
        ModeDescription = other.ModeDescription;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CouponId = input.ReadString();
            break;
          }
          case 18: {
            KindId = input.ReadString();
            break;
          }
          case 26: {
            AssociatorId = input.ReadString();
            break;
          }
          case 34: {
            AccountId = input.ReadString();
            break;
          }
          case 40: {
            StartDate = input.ReadInt64();
            break;
          }
          case 48: {
            EndDate = input.ReadInt64();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 73: {
            Amount = input.ReadDouble();
            break;
          }
          case 81: {
            ModelAmount = input.ReadDouble();
            break;
          }
          case 90: {
            ModeDescription = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class Order : pb::IMessage<Order> {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      orderId_ = other.orderId_;
      remark_ = other.remark_;
      orderStatus_ = other.orderStatus_;
      closeReason_ = other.closeReason_;
      orderDate_ = other.orderDate_;
      payDate_ = other.payDate_;
      shippingDate_ = other.shippingDate_;
      finishDate_ = other.finishDate_;
      accountId_ = other.accountId_;
      shipToDate_ = other.shipToDate_;
      freight_ = other.freight_;
      amount_ = other.amount_;
      productList_ = other.productList_.Clone();
      orderCode_ = other.orderCode_;
      Coupons = other.coupons_ != null ? other.Coupons.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 2;
    private string remark_ = "";
    /// <summary>
    ///*
    /// 买家留言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 3;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态(等待买家付款:1,买家已经付款:2,卖方发货:3,已关闭:4,订单已完成:5,申请退款:6,申请退货:7,申请换货:8,已退款:9,已退货:10,历史订单:0x63)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "closeReason" field.</summary>
    public const int CloseReasonFieldNumber = 4;
    private string closeReason_ = "";
    /// <summary>
    ///*
    /// 订单关闭原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseReason {
      get { return closeReason_; }
      set {
        closeReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderDate" field.</summary>
    public const int OrderDateFieldNumber = 5;
    private long orderDate_;
    /// <summary>
    ///*
    /// 订单日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDate {
      get { return orderDate_; }
      set {
        orderDate_ = value;
      }
    }

    /// <summary>Field number for the "payDate" field.</summary>
    public const int PayDateFieldNumber = 6;
    private long payDate_;
    /// <summary>
    ///*
    /// 订单付款日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayDate {
      get { return payDate_; }
      set {
        payDate_ = value;
      }
    }

    /// <summary>Field number for the "shippingDate" field.</summary>
    public const int ShippingDateFieldNumber = 7;
    private long shippingDate_;
    /// <summary>
    ///*
    /// 订单发货日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShippingDate {
      get { return shippingDate_; }
      set {
        shippingDate_ = value;
      }
    }

    /// <summary>Field number for the "finishDate" field.</summary>
    public const int FinishDateFieldNumber = 8;
    private long finishDate_;
    /// <summary>
    ///*
    /// 订单完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishDate {
      get { return finishDate_; }
      set {
        finishDate_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 9;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 用户关联ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shipToDate" field.</summary>
    public const int ShipToDateFieldNumber = 10;
    private long shipToDate_;
    /// <summary>
    ///*
    /// 送货上门时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShipToDate {
      get { return shipToDate_; }
      set {
        shipToDate_ = value;
      }
    }

    /// <summary>Field number for the "freight" field.</summary>
    public const int FreightFieldNumber = 11;
    private long freight_;
    /// <summary>
    ///*
    /// 运费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Freight {
      get { return freight_; }
      set {
        freight_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 12;
    private double amount_;
    /// <summary>
    ///*
    /// 商品总价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "productList" field.</summary>
    public const int ProductListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SP.Service.Product> _repeated_productList_codec
        = pb::FieldCodec.ForMessage(106, global::SP.Service.Product.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Product> productList_ = new pbc::RepeatedField<global::SP.Service.Product>();
    /// <summary>
    ///*
    /// 订单商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Product> ProductList {
      get { return productList_; }
    }

    /// <summary>Field number for the "orderCode" field.</summary>
    public const int OrderCodeFieldNumber = 14;
    private string orderCode_ = "";
    /// <summary>
    ///*
    /// 订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderCode {
      get { return orderCode_; }
      set {
        orderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupons" field.</summary>
    public const int CouponsFieldNumber = 15;
    private global::SP.Service.Coupons coupons_;
    /// <summary>
    ///*
    /// 优惠券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Coupons Coupons {
      get { return coupons_; }
      set {
        coupons_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (Remark != other.Remark) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (CloseReason != other.CloseReason) return false;
      if (OrderDate != other.OrderDate) return false;
      if (PayDate != other.PayDate) return false;
      if (ShippingDate != other.ShippingDate) return false;
      if (FinishDate != other.FinishDate) return false;
      if (AccountId != other.AccountId) return false;
      if (ShipToDate != other.ShipToDate) return false;
      if (Freight != other.Freight) return false;
      if (Amount != other.Amount) return false;
      if(!productList_.Equals(other.productList_)) return false;
      if (OrderCode != other.OrderCode) return false;
      if (!object.Equals(Coupons, other.Coupons)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (CloseReason.Length != 0) hash ^= CloseReason.GetHashCode();
      if (OrderDate != 0L) hash ^= OrderDate.GetHashCode();
      if (PayDate != 0L) hash ^= PayDate.GetHashCode();
      if (ShippingDate != 0L) hash ^= ShippingDate.GetHashCode();
      if (FinishDate != 0L) hash ^= FinishDate.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (ShipToDate != 0L) hash ^= ShipToDate.GetHashCode();
      if (Freight != 0L) hash ^= Freight.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      hash ^= productList_.GetHashCode();
      if (OrderCode.Length != 0) hash ^= OrderCode.GetHashCode();
      if (coupons_ != null) hash ^= Coupons.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Remark);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OrderStatus);
      }
      if (CloseReason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CloseReason);
      }
      if (OrderDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OrderDate);
      }
      if (PayDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PayDate);
      }
      if (ShippingDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ShippingDate);
      }
      if (FinishDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FinishDate);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AccountId);
      }
      if (ShipToDate != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ShipToDate);
      }
      if (Freight != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Freight);
      }
      if (Amount != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Amount);
      }
      productList_.WriteTo(output, _repeated_productList_codec);
      if (OrderCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OrderCode);
      }
      if (coupons_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Coupons);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (CloseReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseReason);
      }
      if (OrderDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDate);
      }
      if (PayDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayDate);
      }
      if (ShippingDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShippingDate);
      }
      if (FinishDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishDate);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (ShipToDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShipToDate);
      }
      if (Freight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Freight);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      size += productList_.CalculateSize(_repeated_productList_codec);
      if (OrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderCode);
      }
      if (coupons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coupons);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.CloseReason.Length != 0) {
        CloseReason = other.CloseReason;
      }
      if (other.OrderDate != 0L) {
        OrderDate = other.OrderDate;
      }
      if (other.PayDate != 0L) {
        PayDate = other.PayDate;
      }
      if (other.ShippingDate != 0L) {
        ShippingDate = other.ShippingDate;
      }
      if (other.FinishDate != 0L) {
        FinishDate = other.FinishDate;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.ShipToDate != 0L) {
        ShipToDate = other.ShipToDate;
      }
      if (other.Freight != 0L) {
        Freight = other.Freight;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      productList_.Add(other.productList_);
      if (other.OrderCode.Length != 0) {
        OrderCode = other.OrderCode;
      }
      if (other.coupons_ != null) {
        if (coupons_ == null) {
          coupons_ = new global::SP.Service.Coupons();
        }
        Coupons.MergeFrom(other.Coupons);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            Remark = input.ReadString();
            break;
          }
          case 24: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 34: {
            CloseReason = input.ReadString();
            break;
          }
          case 40: {
            OrderDate = input.ReadInt64();
            break;
          }
          case 48: {
            PayDate = input.ReadInt64();
            break;
          }
          case 56: {
            ShippingDate = input.ReadInt64();
            break;
          }
          case 64: {
            FinishDate = input.ReadInt64();
            break;
          }
          case 74: {
            AccountId = input.ReadString();
            break;
          }
          case 80: {
            ShipToDate = input.ReadInt64();
            break;
          }
          case 88: {
            Freight = input.ReadInt64();
            break;
          }
          case 97: {
            Amount = input.ReadDouble();
            break;
          }
          case 106: {
            productList_.AddEntriesFrom(input, _repeated_productList_codec);
            break;
          }
          case 114: {
            OrderCode = input.ReadString();
            break;
          }
          case 122: {
            if (coupons_ == null) {
              coupons_ = new global::SP.Service.Coupons();
            }
            input.ReadMessage(coupons_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单链表的返回信息
  /// </summary>
  public sealed partial class OrderListResponse : pb::IMessage<OrderListResponse> {
    private static readonly pb::MessageParser<OrderListResponse> _parser = new pb::MessageParser<OrderListResponse>(() => new OrderListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListResponse(OrderListResponse other) : this() {
      status_ = other.status_;
      orderList_ = other.orderList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListResponse Clone() {
      return new OrderListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "orderList" field.</summary>
    public const int OrderListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Order> _repeated_orderList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Order.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Order> orderList_ = new pbc::RepeatedField<global::SP.Service.Order>();
    /// <summary>
    ///*
    /// 网络IDS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Order> OrderList {
      get { return orderList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!orderList_.Equals(other.orderList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= orderList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      orderList_.WriteTo(output, _repeated_orderList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += orderList_.CalculateSize(_repeated_orderList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      orderList_.Add(other.orderList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            orderList_.AddEntriesFrom(input, _repeated_orderList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 搜索我的订单的请求参数
  /// </summary>
  public sealed partial class SearchMyOrderRequest : pb::IMessage<SearchMyOrderRequest> {
    private static readonly pb::MessageParser<SearchMyOrderRequest> _parser = new pb::MessageParser<SearchMyOrderRequest>(() => new SearchMyOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchMyOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchMyOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchMyOrderRequest(SearchMyOrderRequest other) : this() {
      accountId_ = other.accountId_;
      keyWord_ = other.keyWord_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchMyOrderRequest Clone() {
      return new SearchMyOrderRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 订单创建者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyWord" field.</summary>
    public const int KeyWordFieldNumber = 2;
    private string keyWord_ = "";
    /// <summary>
    ///*
    /// 订单中关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyWord {
      get { return keyWord_; }
      set {
        keyWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 3;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 5;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchMyOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchMyOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (KeyWord != other.KeyWord) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (KeyWord.Length != 0) hash ^= KeyWord.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (KeyWord.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(KeyWord);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (Total != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (KeyWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyWord);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchMyOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.KeyWord.Length != 0) {
        KeyWord = other.KeyWord;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            KeyWord = input.ReadString();
            break;
          }
          case 24: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
          case 40: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 按照订单类型搜索我的订单的请求参数
  /// </summary>
  public sealed partial class GetOrderRequest : pb::IMessage<GetOrderRequest> {
    private static readonly pb::MessageParser<GetOrderRequest> _parser = new pb::MessageParser<GetOrderRequest>(() => new GetOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderRequest(GetOrderRequest other) : this() {
      accountId_ = other.accountId_;
      orderStatus_ = other.orderStatus_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOrderRequest Clone() {
      return new GetOrderRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 订单创建者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 2;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 3;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 5;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderStatus);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      if (Total != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 24: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
          case 40: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 按照订单类型搜索我的订单的请求参数
  /// </summary>
  public sealed partial class MyOrderRequest : pb::IMessage<MyOrderRequest> {
    private static readonly pb::MessageParser<MyOrderRequest> _parser = new pb::MessageParser<MyOrderRequest>(() => new MyOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyOrderRequest(MyOrderRequest other) : this() {
      accountId_ = other.accountId_;
      orderDate_ = other.orderDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyOrderRequest Clone() {
      return new MyOrderRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 订单创建者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderDate" field.</summary>
    public const int OrderDateFieldNumber = 2;
    private string orderDate_ = "";
    /// <summary>
    ///*
    /// 订单日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderDate {
      get { return orderDate_; }
      set {
        orderDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OrderDate != other.OrderDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OrderDate.Length != 0) hash ^= OrderDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OrderDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OrderDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OrderDate.Length != 0) {
        OrderDate = other.OrderDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            OrderDate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class OrderIdRequest : pb::IMessage<OrderIdRequest> {
    private static readonly pb::MessageParser<OrderIdRequest> _parser = new pb::MessageParser<OrderIdRequest>(() => new OrderIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderIdRequest(OrderIdRequest other) : this() {
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderIdRequest Clone() {
      return new OrderIdRequest(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class OrderResponse : pb::IMessage<OrderResponse> {
    private static readonly pb::MessageParser<OrderResponse> _parser = new pb::MessageParser<OrderResponse>(() => new OrderResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse(OrderResponse other) : this() {
      status_ = other.status_;
      OrderInfo = other.orderInfo_ != null ? other.OrderInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderResponse Clone() {
      return new OrderResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "orderInfo" field.</summary>
    public const int OrderInfoFieldNumber = 2;
    private global::SP.Service.Order orderInfo_;
    /// <summary>
    ///*
    /// 订单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Order OrderInfo {
      get { return orderInfo_; }
      set {
        orderInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(OrderInfo, other.OrderInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (orderInfo_ != null) hash ^= OrderInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (orderInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OrderInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (orderInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.orderInfo_ != null) {
        if (orderInfo_ == null) {
          orderInfo_ = new global::SP.Service.Order();
        }
        OrderInfo.MergeFrom(other.OrderInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (orderInfo_ == null) {
              orderInfo_ = new global::SP.Service.Order();
            }
            input.ReadMessage(orderInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加订单的返回信息
  /// </summary>
  public sealed partial class AddOrderResponse : pb::IMessage<AddOrderResponse> {
    private static readonly pb::MessageParser<AddOrderResponse> _parser = new pb::MessageParser<AddOrderResponse>(() => new AddOrderResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddOrderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderResponse(AddOrderResponse other) : this() {
      status_ = other.status_;
      orderId_ = other.orderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOrderResponse Clone() {
      return new AddOrderResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddOrderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddOrderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (OrderId != other.OrderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddOrderResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加订单的返回信息
  /// </summary>
  public sealed partial class UpdateOrderRequest : pb::IMessage<UpdateOrderRequest> {
    private static readonly pb::MessageParser<UpdateOrderRequest> _parser = new pb::MessageParser<UpdateOrderRequest>(() => new UpdateOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderRequest(UpdateOrderRequest other) : this() {
      orderStatus_ = other.orderStatus_;
      orderId_ = other.orderId_;
      payWay_ = other.payWay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderRequest Clone() {
      return new UpdateOrderRequest(this);
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 1;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payWay" field.</summary>
    public const int PayWayFieldNumber = 3;
    private int payWay_;
    /// <summary>
    ///*
    /// 订单支付方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayWay {
      get { return payWay_; }
      set {
        payWay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderId != other.OrderId) return false;
      if (PayWay != other.PayWay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (PayWay != 0) hash ^= PayWay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderStatus);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (PayWay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PayWay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (PayWay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayWay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.PayWay != 0) {
        PayWay = other.PayWay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            PayWay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class SchoolLeadRequest : pb::IMessage<SchoolLeadRequest> {
    private static readonly pb::MessageParser<SchoolLeadRequest> _parser = new pb::MessageParser<SchoolLeadRequest>(() => new SchoolLeadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchoolLeadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadRequest(SchoolLeadRequest other) : this() {
      accountId_ = other.accountId_;
      orderStatus_ = other.orderStatus_;
      orderType_ = other.orderType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadRequest Clone() {
      return new SchoolLeadRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 2;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 3;
    private int orderType_;
    /// <summary>
    ///*
    /// 订单类别(0,售卖订单 1，采购订单) ，默认为 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchoolLeadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchoolLeadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderType != other.OrderType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderStatus);
      }
      if (OrderType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OrderType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchoolLeadRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 24: {
            OrderType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SchoolLeadOrder : pb::IMessage<SchoolLeadOrder> {
    private static readonly pb::MessageParser<SchoolLeadOrder> _parser = new pb::MessageParser<SchoolLeadOrder>(() => new SchoolLeadOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchoolLeadOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrder(SchoolLeadOrder other) : this() {
      orderId_ = other.orderId_;
      amount_ = other.amount_;
      orderCode_ = other.orderCode_;
      orderDate_ = other.orderDate_;
      payDate_ = other.payDate_;
      Account = other.account_ != null ? other.Account.Clone() : null;
      Address = other.address_ != null ? other.Address.Clone() : null;
      Shop = other.shop_ != null ? other.Shop.Clone() : null;
      shoppingCartList_ = other.shoppingCartList_.Clone();
      orderStatus_ = other.orderStatus_;
      isVip_ = other.isVip_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrder Clone() {
      return new SchoolLeadOrder(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    /// <summary>
    ///*
    /// 商品总价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "orderCode" field.</summary>
    public const int OrderCodeFieldNumber = 3;
    private string orderCode_ = "";
    /// <summary>
    ///*
    /// 订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderCode {
      get { return orderCode_; }
      set {
        orderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderDate" field.</summary>
    public const int OrderDateFieldNumber = 4;
    private long orderDate_;
    /// <summary>
    ///*
    /// 订单日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDate {
      get { return orderDate_; }
      set {
        orderDate_ = value;
      }
    }

    /// <summary>Field number for the "payDate" field.</summary>
    public const int PayDateFieldNumber = 5;
    private long payDate_;
    /// <summary>
    ///*
    /// 订单付款日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayDate {
      get { return payDate_; }
      set {
        payDate_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private global::SP.Service.AccountInfo account_;
    /// <summary>
    ///*
    /// 订货人地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AccountInfo Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 7;
    private global::SP.Service.Address address_;
    /// <summary>
    ///*
    /// 订货人地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 8;
    private global::SP.Service.Shop shop_;
    /// <summary>
    ///*
    /// 店铺
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Shop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    /// <summary>Field number for the "shoppingCartList" field.</summary>
    public const int ShoppingCartListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::SP.Service.ShoppingCart> _repeated_shoppingCartList_codec
        = pb::FieldCodec.ForMessage(74, global::SP.Service.ShoppingCart.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ShoppingCart> shoppingCartList_ = new pbc::RepeatedField<global::SP.Service.ShoppingCart>();
    /// <summary>
    ///*
    ///  购物车列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ShoppingCart> ShoppingCartList {
      get { return shoppingCartList_; }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 10;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态(等待买家付款:1,买家已经付款:2,卖方发货:3,已关闭:4,订单已完成:5,申请退款:6,申请退货:7,申请换货:8,已退款:9,已退货:10,历史订单:0x63)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "isVip" field.</summary>
    public const int IsVipFieldNumber = 11;
    private bool isVip_;
    /// <summary>
    ///*
    ///是否是会员价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVip {
      get { return isVip_; }
      set {
        isVip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchoolLeadOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchoolLeadOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (Amount != other.Amount) return false;
      if (OrderCode != other.OrderCode) return false;
      if (OrderDate != other.OrderDate) return false;
      if (PayDate != other.PayDate) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(Shop, other.Shop)) return false;
      if(!shoppingCartList_.Equals(other.shoppingCartList_)) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (IsVip != other.IsVip) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (OrderCode.Length != 0) hash ^= OrderCode.GetHashCode();
      if (OrderDate != 0L) hash ^= OrderDate.GetHashCode();
      if (PayDate != 0L) hash ^= PayDate.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (shop_ != null) hash ^= Shop.GetHashCode();
      hash ^= shoppingCartList_.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (IsVip != false) hash ^= IsVip.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
      if (OrderCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderCode);
      }
      if (OrderDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OrderDate);
      }
      if (PayDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PayDate);
      }
      if (account_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Account);
      }
      if (address_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Address);
      }
      if (shop_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Shop);
      }
      shoppingCartList_.WriteTo(output, _repeated_shoppingCartList_codec);
      if (OrderStatus != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OrderStatus);
      }
      if (IsVip != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsVip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (OrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderCode);
      }
      if (OrderDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDate);
      }
      if (PayDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayDate);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      size += shoppingCartList_.CalculateSize(_repeated_shoppingCartList_codec);
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (IsVip != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchoolLeadOrder other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.OrderCode.Length != 0) {
        OrderCode = other.OrderCode;
      }
      if (other.OrderDate != 0L) {
        OrderDate = other.OrderDate;
      }
      if (other.PayDate != 0L) {
        PayDate = other.PayDate;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::SP.Service.AccountInfo();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::SP.Service.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.shop_ != null) {
        if (shop_ == null) {
          shop_ = new global::SP.Service.Shop();
        }
        Shop.MergeFrom(other.Shop);
      }
      shoppingCartList_.Add(other.shoppingCartList_);
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.IsVip != false) {
        IsVip = other.IsVip;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
          case 26: {
            OrderCode = input.ReadString();
            break;
          }
          case 32: {
            OrderDate = input.ReadInt64();
            break;
          }
          case 40: {
            PayDate = input.ReadInt64();
            break;
          }
          case 50: {
            if (account_ == null) {
              account_ = new global::SP.Service.AccountInfo();
            }
            input.ReadMessage(account_);
            break;
          }
          case 58: {
            if (address_ == null) {
              address_ = new global::SP.Service.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 66: {
            if (shop_ == null) {
              shop_ = new global::SP.Service.Shop();
            }
            input.ReadMessage(shop_);
            break;
          }
          case 74: {
            shoppingCartList_.AddEntriesFrom(input, _repeated_shoppingCartList_codec);
            break;
          }
          case 80: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 88: {
            IsVip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class SchoolLeadOrderListResponse : pb::IMessage<SchoolLeadOrderListResponse> {
    private static readonly pb::MessageParser<SchoolLeadOrderListResponse> _parser = new pb::MessageParser<SchoolLeadOrderListResponse>(() => new SchoolLeadOrderListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchoolLeadOrderListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrderListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrderListResponse(SchoolLeadOrderListResponse other) : this() {
      status_ = other.status_;
      orderInfo_ = other.orderInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadOrderListResponse Clone() {
      return new SchoolLeadOrderListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "orderInfo" field.</summary>
    public const int OrderInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.SchoolLeadOrder> _repeated_orderInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.SchoolLeadOrder.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.SchoolLeadOrder> orderInfo_ = new pbc::RepeatedField<global::SP.Service.SchoolLeadOrder>();
    /// <summary>
    ///*
    /// 订单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.SchoolLeadOrder> OrderInfo {
      get { return orderInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchoolLeadOrderListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchoolLeadOrderListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!orderInfo_.Equals(other.orderInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= orderInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      orderInfo_.WriteTo(output, _repeated_orderInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += orderInfo_.CalculateSize(_repeated_orderInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchoolLeadOrderListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      orderInfo_.Add(other.orderInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            orderInfo_.AddEntriesFrom(input, _repeated_orderInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class TradeRequest : pb::IMessage<TradeRequest> {
    private static readonly pb::MessageParser<TradeRequest> _parser = new pb::MessageParser<TradeRequest>(() => new TradeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRequest(TradeRequest other) : this() {
      accountId_ = other.accountId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRequest Clone() {
      return new TradeRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 3;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 24: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trade : pb::IMessage<Trade> {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade(Trade other) : this() {
      accountId_ = other.accountId_;
      amount_ = other.amount_;
      cartId_ = other.cartId_;
      createTime_ = other.createTime_;
      quantity_ = other.quantity_;
      subject_ = other.subject_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 负责人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    /// <summary>
    ///*
    /// 提成金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "cartId" field.</summary>
    public const int CartIdFieldNumber = 3;
    private string cartId_ = "";
    /// <summary>
    ///*
    /// 购物车ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CartId {
      get { return cartId_; }
      set {
        cartId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private long createTime_;
    /// <summary>
    ///*
    /// 日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 5;
    private int quantity_;
    /// <summary>
    ///*
    /// 购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 6;
    private int subject_;
    /// <summary>
    ///*
    /// 流水类型 1：增加 2：提现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subject {
      get { return subject_; }
      set {
        subject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Amount != other.Amount) return false;
      if (CartId != other.CartId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Quantity != other.Quantity) return false;
      if (Subject != other.Subject) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (CartId.Length != 0) hash ^= CartId.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Subject != 0) hash ^= Subject.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
      if (CartId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CartId);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreateTime);
      }
      if (Quantity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quantity);
      }
      if (Subject != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Subject);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (CartId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CartId);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Subject != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subject);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.CartId.Length != 0) {
        CartId = other.CartId;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Subject != 0) {
        Subject = other.Subject;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
          case 26: {
            CartId = input.ReadString();
            break;
          }
          case 32: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 40: {
            Quantity = input.ReadInt32();
            break;
          }
          case 48: {
            Subject = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class TradeListResponse : pb::IMessage<TradeListResponse> {
    private static readonly pb::MessageParser<TradeListResponse> _parser = new pb::MessageParser<TradeListResponse>(() => new TradeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeListResponse(TradeListResponse other) : this() {
      status_ = other.status_;
      tradeList_ = other.tradeList_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeListResponse Clone() {
      return new TradeListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tradeList" field.</summary>
    public const int TradeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.Trade> _repeated_tradeList_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.Trade.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.Trade> tradeList_ = new pbc::RepeatedField<global::SP.Service.Trade>();
    /// <summary>
    ///*
    /// 订单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.Trade> TradeList {
      get { return tradeList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 5;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!tradeList_.Equals(other.tradeList_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= tradeList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      tradeList_.WriteTo(output, _repeated_tradeList_codec);
      if (Total != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += tradeList_.CalculateSize(_repeated_tradeList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      tradeList_.Add(other.tradeList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            tradeList_.AddEntriesFrom(input, _repeated_tradeList_codec);
            break;
          }
          case 40: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class SchoolLeadFinanceResponse : pb::IMessage<SchoolLeadFinanceResponse> {
    private static readonly pb::MessageParser<SchoolLeadFinanceResponse> _parser = new pb::MessageParser<SchoolLeadFinanceResponse>(() => new SchoolLeadFinanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchoolLeadFinanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadFinanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadFinanceResponse(SchoolLeadFinanceResponse other) : this() {
      status_ = other.status_;
      accountId_ = other.accountId_;
      haveAmount_ = other.haveAmount_;
      useAmount_ = other.useAmount_;
      activeAmount_ = other.activeAmount_;
      applyAmount_ = other.applyAmount_;
      consumeAmount_ = other.consumeAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchoolLeadFinanceResponse Clone() {
      return new SchoolLeadFinanceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 订单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "haveAmount" field.</summary>
    public const int HaveAmountFieldNumber = 3;
    private double haveAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HaveAmount {
      get { return haveAmount_; }
      set {
        haveAmount_ = value;
      }
    }

    /// <summary>Field number for the "useAmount" field.</summary>
    public const int UseAmountFieldNumber = 4;
    private double useAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UseAmount {
      get { return useAmount_; }
      set {
        useAmount_ = value;
      }
    }

    /// <summary>Field number for the "activeAmount" field.</summary>
    public const int ActiveAmountFieldNumber = 5;
    private double activeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ActiveAmount {
      get { return activeAmount_; }
      set {
        activeAmount_ = value;
      }
    }

    /// <summary>Field number for the "applyAmount" field.</summary>
    public const int ApplyAmountFieldNumber = 6;
    private double applyAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ApplyAmount {
      get { return applyAmount_; }
      set {
        applyAmount_ = value;
      }
    }

    /// <summary>Field number for the "consumeAmount" field.</summary>
    public const int ConsumeAmountFieldNumber = 7;
    private double consumeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConsumeAmount {
      get { return consumeAmount_; }
      set {
        consumeAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchoolLeadFinanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchoolLeadFinanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (AccountId != other.AccountId) return false;
      if (HaveAmount != other.HaveAmount) return false;
      if (UseAmount != other.UseAmount) return false;
      if (ActiveAmount != other.ActiveAmount) return false;
      if (ApplyAmount != other.ApplyAmount) return false;
      if (ConsumeAmount != other.ConsumeAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (HaveAmount != 0D) hash ^= HaveAmount.GetHashCode();
      if (UseAmount != 0D) hash ^= UseAmount.GetHashCode();
      if (ActiveAmount != 0D) hash ^= ActiveAmount.GetHashCode();
      if (ApplyAmount != 0D) hash ^= ApplyAmount.GetHashCode();
      if (ConsumeAmount != 0D) hash ^= ConsumeAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (HaveAmount != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(HaveAmount);
      }
      if (UseAmount != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(UseAmount);
      }
      if (ActiveAmount != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ActiveAmount);
      }
      if (ApplyAmount != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ApplyAmount);
      }
      if (ConsumeAmount != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ConsumeAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (HaveAmount != 0D) {
        size += 1 + 8;
      }
      if (UseAmount != 0D) {
        size += 1 + 8;
      }
      if (ActiveAmount != 0D) {
        size += 1 + 8;
      }
      if (ApplyAmount != 0D) {
        size += 1 + 8;
      }
      if (ConsumeAmount != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchoolLeadFinanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.HaveAmount != 0D) {
        HaveAmount = other.HaveAmount;
      }
      if (other.UseAmount != 0D) {
        UseAmount = other.UseAmount;
      }
      if (other.ActiveAmount != 0D) {
        ActiveAmount = other.ActiveAmount;
      }
      if (other.ApplyAmount != 0D) {
        ApplyAmount = other.ApplyAmount;
      }
      if (other.ConsumeAmount != 0D) {
        ConsumeAmount = other.ConsumeAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 25: {
            HaveAmount = input.ReadDouble();
            break;
          }
          case 33: {
            UseAmount = input.ReadDouble();
            break;
          }
          case 41: {
            ActiveAmount = input.ReadDouble();
            break;
          }
          case 49: {
            ApplyAmount = input.ReadDouble();
            break;
          }
          case 57: {
            ConsumeAmount = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class AddCashApplyRequest : pb::IMessage<AddCashApplyRequest> {
    private static readonly pb::MessageParser<AddCashApplyRequest> _parser = new pb::MessageParser<AddCashApplyRequest>(() => new AddCashApplyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddCashApplyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddCashApplyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddCashApplyRequest(AddCashApplyRequest other) : this() {
      accountId_ = other.accountId_;
      alipay_ = other.alipay_;
      money_ = other.money_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddCashApplyRequest Clone() {
      return new AddCashApplyRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alipay" field.</summary>
    public const int AlipayFieldNumber = 2;
    private string alipay_ = "";
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alipay {
      get { return alipay_; }
      set {
        alipay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 3;
    private double money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddCashApplyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddCashApplyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Alipay != other.Alipay) return false;
      if (Money != other.Money) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Alipay.Length != 0) hash ^= Alipay.GetHashCode();
      if (Money != 0D) hash ^= Money.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Alipay.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alipay);
      }
      if (Money != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Alipay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alipay);
      }
      if (Money != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddCashApplyRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Alipay.Length != 0) {
        Alipay = other.Alipay;
      }
      if (other.Money != 0D) {
        Money = other.Money;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            Alipay = input.ReadString();
            break;
          }
          case 25: {
            Money = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加订单的返回信息
  /// </summary>
  public sealed partial class UpdateOrderCodeRequest : pb::IMessage<UpdateOrderCodeRequest> {
    private static readonly pb::MessageParser<UpdateOrderCodeRequest> _parser = new pb::MessageParser<UpdateOrderCodeRequest>(() => new UpdateOrderCodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOrderCodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderCodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderCodeRequest(UpdateOrderCodeRequest other) : this() {
      orderStatus_ = other.orderStatus_;
      orderCode_ = other.orderCode_;
      payWay_ = other.payWay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOrderCodeRequest Clone() {
      return new UpdateOrderCodeRequest(this);
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 1;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderCode" field.</summary>
    public const int OrderCodeFieldNumber = 2;
    private string orderCode_ = "";
    /// <summary>
    ///*
    /// 订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderCode {
      get { return orderCode_; }
      set {
        orderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payWay" field.</summary>
    public const int PayWayFieldNumber = 3;
    private int payWay_;
    /// <summary>
    ///*
    /// 订单支付方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayWay {
      get { return payWay_; }
      set {
        payWay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOrderCodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOrderCodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderCode != other.OrderCode) return false;
      if (PayWay != other.PayWay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderCode.Length != 0) hash ^= OrderCode.GetHashCode();
      if (PayWay != 0) hash ^= PayWay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderStatus);
      }
      if (OrderCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderCode);
      }
      if (PayWay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PayWay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderCode);
      }
      if (PayWay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayWay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOrderCodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderCode.Length != 0) {
        OrderCode = other.OrderCode;
      }
      if (other.PayWay != 0) {
        PayWay = other.PayWay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 18: {
            OrderCode = input.ReadString();
            break;
          }
          case 24: {
            PayWay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 获取订单的返回信息
  /// </summary>
  public sealed partial class OrderCodeRequest : pb::IMessage<OrderCodeRequest> {
    private static readonly pb::MessageParser<OrderCodeRequest> _parser = new pb::MessageParser<OrderCodeRequest>(() => new OrderCodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderCodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCodeRequest(OrderCodeRequest other) : this() {
      orderCode_ = other.orderCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCodeRequest Clone() {
      return new OrderCodeRequest(this);
    }

    /// <summary>Field number for the "orderCode" field.</summary>
    public const int OrderCodeFieldNumber = 1;
    private string orderCode_ = "";
    /// <summary>
    ///*
    /// 订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderCode {
      get { return orderCode_; }
      set {
        orderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderCodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderCodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderCode != other.OrderCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderCode.Length != 0) hash ^= OrderCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderCodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderCode.Length != 0) {
        OrderCode = other.OrderCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加订单的返回信息
  /// </summary>
  public sealed partial class UpdateShippingOrderRequest : pb::IMessage<UpdateShippingOrderRequest> {
    private static readonly pb::MessageParser<UpdateShippingOrderRequest> _parser = new pb::MessageParser<UpdateShippingOrderRequest>(() => new UpdateShippingOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateShippingOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShippingOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShippingOrderRequest(UpdateShippingOrderRequest other) : this() {
      orderStatus_ = other.orderStatus_;
      shipOrderId_ = other.shipOrderId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShippingOrderRequest Clone() {
      return new UpdateShippingOrderRequest(this);
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 1;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "shipOrderId" field.</summary>
    public const int ShipOrderIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_shipOrderId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> shipOrderId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///*
    /// 配送订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShipOrderId {
      get { return shipOrderId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateShippingOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateShippingOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderStatus != other.OrderStatus) return false;
      if(!shipOrderId_.Equals(other.shipOrderId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      hash ^= shipOrderId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderStatus);
      }
      shipOrderId_.WriteTo(output, _repeated_shipOrderId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      size += shipOrderId_.CalculateSize(_repeated_shipOrderId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateShippingOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      shipOrderId_.Add(other.shipOrderId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            shipOrderId_.AddEntriesFrom(input, _repeated_shipOrderId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 添加订单的返回信息
  /// </summary>
  public sealed partial class UpdateShipOrderRequest : pb::IMessage<UpdateShipOrderRequest> {
    private static readonly pb::MessageParser<UpdateShipOrderRequest> _parser = new pb::MessageParser<UpdateShipOrderRequest>(() => new UpdateShipOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateShipOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShipOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShipOrderRequest(UpdateShipOrderRequest other) : this() {
      orderStatus_ = other.orderStatus_;
      orderId_ = other.orderId_;
      payWay_ = other.payWay_;
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateShipOrderRequest Clone() {
      return new UpdateShipOrderRequest(this);
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 1;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payWay" field.</summary>
    public const int PayWayFieldNumber = 3;
    private int payWay_;
    /// <summary>
    ///*
    /// 订单支付方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayWay {
      get { return payWay_; }
      set {
        payWay_ = value;
      }
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 商家账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateShipOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateShipOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderId != other.OrderId) return false;
      if (PayWay != other.PayWay) return false;
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (PayWay != 0) hash ^= PayWay.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderStatus);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderId);
      }
      if (PayWay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PayWay);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (PayWay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayWay);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateShipOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.PayWay != 0) {
        PayWay = other.PayWay;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 18: {
            OrderId = input.ReadString();
            break;
          }
          case 24: {
            PayWay = input.ReadInt32();
            break;
          }
          case 34: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class ShipOrderRequest : pb::IMessage<ShipOrderRequest> {
    private static readonly pb::MessageParser<ShipOrderRequest> _parser = new pb::MessageParser<ShipOrderRequest>(() => new ShipOrderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShipOrderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShipOrderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShipOrderRequest(ShipOrderRequest other) : this() {
      accountId_ = other.accountId_;
      orderStatus_ = other.orderStatus_;
      orderType_ = other.orderType_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShipOrderRequest Clone() {
      return new ShipOrderRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 2;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 3;
    private int orderType_;
    /// <summary>
    ///*
    /// 订单类别(0,售卖订单 1，采购订单) ，默认为 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 4;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShipOrderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShipOrderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderType != other.OrderType) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OrderStatus);
      }
      if (OrderType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OrderType);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShipOrderRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            OrderStatus = input.ReadInt32();
            break;
          }
          case 24: {
            OrderType = input.ReadInt32();
            break;
          }
          case 32: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的请求参数
  /// </summary>
  public sealed partial class PurchaseOrderListRequest : pb::IMessage<PurchaseOrderListRequest> {
    private static readonly pb::MessageParser<PurchaseOrderListRequest> _parser = new pb::MessageParser<PurchaseOrderListRequest>(() => new PurchaseOrderListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseOrderListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListRequest(PurchaseOrderListRequest other) : this() {
      accountId_ = other.accountId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListRequest Clone() {
      return new PurchaseOrderListRequest(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    /// <summary>
    ///*
    /// 账户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 4;
    private int pageIndex_;
    /// <summary>
    ///*
    /// 当前页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///*
    /// 每页显示行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseOrderListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseOrderListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseOrderListRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 32: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseOrder : pb::IMessage<PurchaseOrder> {
    private static readonly pb::MessageParser<PurchaseOrder> _parser = new pb::MessageParser<PurchaseOrder>(() => new PurchaseOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrder(PurchaseOrder other) : this() {
      orderId_ = other.orderId_;
      amount_ = other.amount_;
      orderDate_ = other.orderDate_;
      orderType_ = other.orderType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrder Clone() {
      return new PurchaseOrder(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    /// <summary>
    ///*
    /// 商品总价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "orderDate" field.</summary>
    public const int OrderDateFieldNumber = 4;
    private long orderDate_;
    /// <summary>
    ///*
    /// 订单日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDate {
      get { return orderDate_; }
      set {
        orderDate_ = value;
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 11;
    private int orderType_;
    /// <summary>
    ///*
    /// 订单类型（1.餐饮、2.超市）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (Amount != other.Amount) return false;
      if (OrderDate != other.OrderDate) return false;
      if (OrderType != other.OrderType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (OrderDate != 0L) hash ^= OrderDate.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
      if (OrderDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OrderDate);
      }
      if (OrderType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OrderType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (OrderDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDate);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseOrder other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.OrderDate != 0L) {
        OrderDate = other.OrderDate;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
          case 32: {
            OrderDate = input.ReadInt64();
            break;
          }
          case 88: {
            OrderType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// 订单的返回信息
  /// </summary>
  public sealed partial class PurchaseOrderListResponse : pb::IMessage<PurchaseOrderListResponse> {
    private static readonly pb::MessageParser<PurchaseOrderListResponse> _parser = new pb::MessageParser<PurchaseOrderListResponse>(() => new PurchaseOrderListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseOrderListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListResponse(PurchaseOrderListResponse other) : this() {
      status_ = other.status_;
      orderInfo_ = other.orderInfo_.Clone();
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderListResponse Clone() {
      return new PurchaseOrderListResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    ///*
    /// 添加状态10001为正常10002为异常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "orderInfo" field.</summary>
    public const int OrderInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SP.Service.PurchaseOrder> _repeated_orderInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SP.Service.PurchaseOrder.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.PurchaseOrder> orderInfo_ = new pbc::RepeatedField<global::SP.Service.PurchaseOrder>();
    /// <summary>
    ///*
    /// 订单列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.PurchaseOrder> OrderInfo {
      get { return orderInfo_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 4;
    private long total_;
    /// <summary>
    ///*
    /// 总行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseOrderListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseOrderListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!orderInfo_.Equals(other.orderInfo_)) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= orderInfo_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      orderInfo_.WriteTo(output, _repeated_orderInfo_codec);
      if (Total != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += orderInfo_.CalculateSize(_repeated_orderInfo_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseOrderListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      orderInfo_.Add(other.orderInfo_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            orderInfo_.AddEntriesFrom(input, _repeated_orderInfo_codec);
            break;
          }
          case 32: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseOrderResponse : pb::IMessage<PurchaseOrderResponse> {
    private static readonly pb::MessageParser<PurchaseOrderResponse> _parser = new pb::MessageParser<PurchaseOrderResponse>(() => new PurchaseOrderResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseOrderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SP.Service.OrderModelReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderResponse(PurchaseOrderResponse other) : this() {
      orderId_ = other.orderId_;
      amount_ = other.amount_;
      orderCode_ = other.orderCode_;
      orderDate_ = other.orderDate_;
      payDate_ = other.payDate_;
      Account = other.account_ != null ? other.Account.Clone() : null;
      Address = other.address_ != null ? other.Address.Clone() : null;
      payType_ = other.payType_;
      shoppingCartList_ = other.shoppingCartList_.Clone();
      orderStatus_ = other.orderStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseOrderResponse Clone() {
      return new PurchaseOrderResponse(this);
    }

    /// <summary>Field number for the "orderId" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    /// <summary>
    ///*
    /// 订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    /// <summary>
    ///*
    /// 商品总价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "orderCode" field.</summary>
    public const int OrderCodeFieldNumber = 3;
    private string orderCode_ = "";
    /// <summary>
    ///*
    /// 订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderCode {
      get { return orderCode_; }
      set {
        orderCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderDate" field.</summary>
    public const int OrderDateFieldNumber = 4;
    private long orderDate_;
    /// <summary>
    ///*
    /// 订单日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDate {
      get { return orderDate_; }
      set {
        orderDate_ = value;
      }
    }

    /// <summary>Field number for the "payDate" field.</summary>
    public const int PayDateFieldNumber = 5;
    private long payDate_;
    /// <summary>
    ///*
    /// 订单付款日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayDate {
      get { return payDate_; }
      set {
        payDate_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private global::SP.Service.AccountInfo account_;
    /// <summary>
    ///*
    /// 订货人地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.AccountInfo Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 7;
    private global::SP.Service.Address address_;
    /// <summary>
    ///*
    /// 订货人地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SP.Service.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "payType" field.</summary>
    public const int PayTypeFieldNumber = 8;
    private int payType_;
    /// <summary>
    ///*
    /// 支付类型（1：支付宝支付 2：微信支付  3：余额支付）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayType {
      get { return payType_; }
      set {
        payType_ = value;
      }
    }

    /// <summary>Field number for the "shoppingCartList" field.</summary>
    public const int ShoppingCartListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::SP.Service.ShoppingCart> _repeated_shoppingCartList_codec
        = pb::FieldCodec.ForMessage(74, global::SP.Service.ShoppingCart.Parser);
    private readonly pbc::RepeatedField<global::SP.Service.ShoppingCart> shoppingCartList_ = new pbc::RepeatedField<global::SP.Service.ShoppingCart>();
    /// <summary>
    ///*
    ///  购物车列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SP.Service.ShoppingCart> ShoppingCartList {
      get { return shoppingCartList_; }
    }

    /// <summary>Field number for the "orderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 10;
    private int orderStatus_;
    /// <summary>
    ///*
    /// 订单状态(等待买家付款:1,买家已经付款:2,卖方发货:3,已关闭:4,订单已完成:5,申请退款:6,申请退货:7,申请换货:8,已退款:9,已退货:10,历史订单:0x63)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseOrderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseOrderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (Amount != other.Amount) return false;
      if (OrderCode != other.OrderCode) return false;
      if (OrderDate != other.OrderDate) return false;
      if (PayDate != other.PayDate) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (PayType != other.PayType) return false;
      if(!shoppingCartList_.Equals(other.shoppingCartList_)) return false;
      if (OrderStatus != other.OrderStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      if (OrderCode.Length != 0) hash ^= OrderCode.GetHashCode();
      if (OrderDate != 0L) hash ^= OrderDate.GetHashCode();
      if (PayDate != 0L) hash ^= PayDate.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (PayType != 0) hash ^= PayType.GetHashCode();
      hash ^= shoppingCartList_.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
      if (OrderCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderCode);
      }
      if (OrderDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OrderDate);
      }
      if (PayDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PayDate);
      }
      if (account_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Account);
      }
      if (address_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Address);
      }
      if (PayType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PayType);
      }
      shoppingCartList_.WriteTo(output, _repeated_shoppingCartList_codec);
      if (OrderStatus != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OrderStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (OrderCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderCode);
      }
      if (OrderDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDate);
      }
      if (PayDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayDate);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (PayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayType);
      }
      size += shoppingCartList_.CalculateSize(_repeated_shoppingCartList_codec);
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseOrderResponse other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.OrderCode.Length != 0) {
        OrderCode = other.OrderCode;
      }
      if (other.OrderDate != 0L) {
        OrderDate = other.OrderDate;
      }
      if (other.PayDate != 0L) {
        PayDate = other.PayDate;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::SP.Service.AccountInfo();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::SP.Service.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.PayType != 0) {
        PayType = other.PayType;
      }
      shoppingCartList_.Add(other.shoppingCartList_);
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
          case 26: {
            OrderCode = input.ReadString();
            break;
          }
          case 32: {
            OrderDate = input.ReadInt64();
            break;
          }
          case 40: {
            PayDate = input.ReadInt64();
            break;
          }
          case 50: {
            if (account_ == null) {
              account_ = new global::SP.Service.AccountInfo();
            }
            input.ReadMessage(account_);
            break;
          }
          case 58: {
            if (address_ == null) {
              address_ = new global::SP.Service.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 64: {
            PayType = input.ReadInt32();
            break;
          }
          case 74: {
            shoppingCartList_.AddEntriesFrom(input, _repeated_shoppingCartList_codec);
            break;
          }
          case 80: {
            OrderStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
